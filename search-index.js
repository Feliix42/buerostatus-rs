var searchIndex = {};
searchIndex["buerostatus"] = {"doc":"This crate is a small wrapper around the [buerostatus](https://github.com/fsr/buerostatus) API\nof the [@fsr](https://github.com/fsr) that tells you whether someone is in our office or not.","items":[[4,"ApiError","buerostatus","A set of errors that may occur during the API call.",null,null],[13,"Network","","An error originating from the `hyper` crate such as &quot;No Internet connection&quot;.",0,null],[13,"StatusNotOk","","The Return Code of the website is not _200_.",0,null],[13,"WrongMessage","","The API call delivered a wrong message.",0,null],[5,"get_buerostatus","","Gets the buerostatus from ifsr.de.",null,{"inputs":[],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"apierror"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"ApiError"]]};
searchIndex["hyper"] = {"doc":"# Hyper","items":[[11,"parse","url","Parse an absolute URL from a string.",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"join","","Parse a string as an URL, with this URL as the base URL.",0,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[11,"options","","Return a default `ParseOptions` that can fully configure the URL parser.",0,{"inputs":[],"output":{"name":"parseoptions"}}],[11,"as_str","","Return the serialization of this URL.",0,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[11,"into_string","","Return the serialization of this URL.",0,{"inputs":[{"name":"url"}],"output":{"name":"string"}}],[11,"origin","","Return the origin of this URL (https://url.spec.whatwg.org/#origin)",0,{"inputs":[{"name":"url"}],"output":{"name":"origin"}}],[11,"scheme","","Return the scheme of this URL, lower-cased, as an ASCII string without the &#39;:&#39; delimiter.",0,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[11,"has_authority","","Return whether the URL has an &#39;authority&#39;,\nwhich can contain a username, password, host, and port number.",0,{"inputs":[{"name":"url"}],"output":{"name":"bool"}}],[11,"cannot_be_a_base","","Return whether this URL is a cannot-be-a-base URL,\nmeaning that parsing a relative URL string with this URL as the base will return an error.",0,{"inputs":[{"name":"url"}],"output":{"name":"bool"}}],[11,"username","","Return the username for this URL (typically the empty string)\nas a percent-encoded ASCII string.",0,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[11,"password","","Return the password for this URL, if any, as a percent-encoded ASCII string.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"has_host","","Equivalent to `url.host().is_some()`.",0,{"inputs":[{"name":"url"}],"output":{"name":"bool"}}],[11,"host_str","","Return the string representation of the host (domain or IP address) for this URL, if any.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"host","","Return the parsed representation of the host for this URL.\nNon-ASCII domain labels are punycode-encoded per IDNA.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"domain","","If this URL has a host and it is a domain name (not an IP address), return it.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"port","","Return the port number for this URL, if any.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"port_or_known_default","","Return the port number for this URL, or the default port number if it is known.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"with_default_port","","If the URL has a host, return something that implements `ToSocketAddrs`.",0,{"inputs":[{"name":"url"},{"name":"f"}],"output":{"name":"result"}}],[11,"path","","Return the path for this URL, as a percent-encoded ASCII string.\nFor cannot-be-a-base URLs, this is an arbitrary string that doesn’t start with &#39;/&#39;.\nFor other URLs, this starts with a &#39;/&#39; slash\nand continues with slash-separated path segments.",0,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[11,"path_segments","","Unless this URL is cannot-be-a-base,\nreturn an iterator of &#39;/&#39; slash-separated path segments,\neach as a percent-encoded ASCII string.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"query","","Return this URL’s query string, if any, as a percent-encoded ASCII string.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"query_pairs","","Parse the URL’s query string, if any, as `application/x-www-form-urlencoded`\nand return an iterator of (key, value) pairs.",0,{"inputs":[{"name":"url"}],"output":{"name":"parse"}}],[11,"fragment","","Return this URL’s fragment identifier, if any.",0,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"set_fragment","","Change this URL’s fragment identifier.",0,null],[11,"set_query","","Change this URL’s query string.",0,null],[11,"query_pairs_mut","","Manipulate this URL’s query string, viewed as a sequence of name/value pairs\nin `application/x-www-form-urlencoded` syntax.",0,{"inputs":[{"name":"url"}],"output":{"name":"serializer"}}],[11,"set_path","","Change this URL’s path.",0,null],[11,"path_segments_mut","","Return an object with methods to manipulate this URL’s path segments.",0,{"inputs":[{"name":"url"}],"output":{"name":"result"}}],[11,"set_port","","Change this URL’s port number.",0,{"inputs":[{"name":"url"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_host","","Change this URL’s host.",0,{"inputs":[{"name":"url"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_ip_host","","Change this URL’s host to the given IP address.",0,{"inputs":[{"name":"url"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"set_password","","Change this URL’s password.",0,{"inputs":[{"name":"url"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_username","","Change this URL’s username.",0,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[11,"set_scheme","","Change this URL’s scheme.",0,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_file_path","","Convert a file name as `std::path::Path` into an URL in the `file` scheme.",0,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"from_directory_path","","Convert a directory name as `std::path::Path` into an URL in the `file` scheme.",0,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"to_file_path","","Assuming the URL is in the `file` scheme or similar,\nconvert its path to an absolute `std::path::Path`.",0,{"inputs":[{"name":"url"}],"output":{"name":"result"}}],[11,"clone","url::encoding","",1,{"inputs":[{"name":"encodingoverride"}],"output":{"name":"encodingoverride"}}],[11,"utf8","","",1,{"inputs":[],"output":{"name":"encodingoverride"}}],[11,"decode","","",1,{"inputs":[{"name":"encodingoverride"},{"name":"cow"}],"output":{"name":"cow"}}],[11,"encode","","",1,{"inputs":[{"name":"encodingoverride"},{"name":"cow"}],"output":{"name":"cow"}}],[11,"eq","url::host","",2,{"inputs":[{"name":"hostinternal"},{"name":"hostinternal"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"hostinternal"},{"name":"hostinternal"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"hostinternal"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"hostinternal"}],"output":{"name":"hostinternal"}}],[11,"from","","",2,{"inputs":[{"name":"host"}],"output":{"name":"hostinternal"}}],[11,"hash","","",3,null],[11,"partial_cmp","","",3,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"cmp","","",3,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"ordering"}}],[11,"eq","","",3,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"host"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"host"}],"output":{"name":"host"}}],[11,"to_owned","","Return a copy of `self` that owns an allocated `String` but does not borrow an `&amp;Url`.",3,{"inputs":[{"name":"host"}],"output":{"name":"host"}}],[11,"parse","","Parse a host: either an IPv6 address in [] square brackets, or a domain.",3,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"host"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_owned","","Return a copy of `self` that owns an allocated `String` but does not borrow an `&amp;Url`.",4,{"inputs":[{"name":"hostandport"}],"output":{"name":"hostandport"}}],[11,"to_socket_addrs","","",4,{"inputs":[{"name":"hostandport"}],"output":{"name":"result"}}],[11,"next","","",5,{"inputs":[{"name":"socketaddrs"}],"output":{"name":"option"}}],[11,"fmt","url::origin","",6,{"inputs":[{"name":"origin"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"origin"}],"output":{"name":"origin"}}],[11,"eq","","",6,{"inputs":[{"name":"origin"},{"name":"origin"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"origin"},{"name":"origin"}],"output":{"name":"bool"}}],[11,"new_opaque","","Creates a new opaque origin that is only equal to itself.",6,{"inputs":[],"output":{"name":"origin"}}],[11,"is_tuple","","Return whether this origin is a (scheme, host, port) tuple\n(as opposed to an opaque origin).",6,{"inputs":[{"name":"origin"}],"output":{"name":"bool"}}],[11,"ascii_serialization","","https://html.spec.whatwg.org/multipage/#ascii-serialisation-of-an-origin",6,{"inputs":[{"name":"origin"}],"output":{"name":"string"}}],[11,"unicode_serialization","","https://html.spec.whatwg.org/multipage/#unicode-serialisation-of-an-origin",6,{"inputs":[{"name":"origin"}],"output":{"name":"string"}}],[11,"fmt","","",7,{"inputs":[{"name":"opaqueorigin"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"opaqueorigin"}],"output":{"name":"opaqueorigin"}}],[11,"eq","","",7,{"inputs":[{"name":"opaqueorigin"},{"name":"opaqueorigin"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"opaqueorigin"},{"name":"opaqueorigin"}],"output":{"name":"bool"}}],[11,"drop","url::path_segments","",8,null],[11,"clear","","Remove all segments in the path, leaving the minimal `url.path() == &quot;/&quot;`.",8,{"inputs":[{"name":"pathsegmentsmut"}],"output":{"name":"pathsegmentsmut"}}],[11,"pop_if_empty","","Remove the last segment of this URL’s path if it is empty,\nexcept if these was only one segment to begin with.",8,{"inputs":[{"name":"pathsegmentsmut"}],"output":{"name":"pathsegmentsmut"}}],[11,"pop","","Remove the last segment of this URL’s path.",8,{"inputs":[{"name":"pathsegmentsmut"}],"output":{"name":"pathsegmentsmut"}}],[11,"push","","Append the given segment at the end of this URL’s path.",8,{"inputs":[{"name":"pathsegmentsmut"},{"name":"str"}],"output":{"name":"pathsegmentsmut"}}],[11,"extend","","Append each segment from the given iterator at the end of this URL’s path.",8,{"inputs":[{"name":"pathsegmentsmut"},{"name":"i"}],"output":{"name":"pathsegmentsmut"}}],[11,"fmt","url::parser","",9,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"eq","","",9,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"description","","",9,{"inputs":[{"name":"parseerror"}],"output":{"name":"str"}}],[11,"fmt","","",9,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",9,{"inputs":[{"name":"errors"}],"output":{"name":"parseerror"}}],[11,"clone","","",10,{"inputs":[{"name":"schemetype"}],"output":{"name":"schemetype"}}],[11,"is_special","","",10,{"inputs":[{"name":"schemetype"}],"output":{"name":"bool"}}],[11,"is_file","","",10,{"inputs":[{"name":"schemetype"}],"output":{"name":"bool"}}],[11,"from","","",10,{"inputs":[{"name":"str"}],"output":{"name":"schemetype"}}],[11,"clone","","",11,{"inputs":[{"name":"input"}],"output":{"name":"input"}}],[11,"new","","",11,{"inputs":[{"name":"str"}],"output":{"name":"input"}}],[11,"with_log","","",11,{"inputs":[{"name":"str"},{"name":"option"}],"output":{"name":"input"}}],[11,"is_empty","","",11,{"inputs":[{"name":"input"}],"output":{"name":"bool"}}],[11,"split_prefix","","",11,{"inputs":[{"name":"input"},{"name":"p"}],"output":{"name":"option"}}],[11,"next","","",11,{"inputs":[{"name":"input"}],"output":{"name":"option"}}],[11,"clone","","",12,{"inputs":[{"name":"context"}],"output":{"name":"context"}}],[11,"eq","","",12,{"inputs":[{"name":"context"},{"name":"context"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"context"},{"name":"context"}],"output":{"name":"bool"}}],[11,"for_setter","","",13,{"inputs":[{"name":"string"}],"output":{"name":"parser"}}],[11,"parse_url","","https://url.spec.whatwg.org/#concept-basic-url-parser",13,{"inputs":[{"name":"parser"},{"name":"str"}],"output":{"name":"result"}}],[11,"parse_scheme","","",13,{"inputs":[{"name":"parser"},{"name":"input"}],"output":{"name":"result"}}],[11,"parse_host","","",13,{"inputs":[{"name":"input"},{"name":"schemetype"}],"output":{"name":"result"}}],[11,"parse_file_host","","",13,{"inputs":[{"name":"parser"},{"name":"input"}],"output":{"name":"result"}}],[11,"parse_port","","",13,{"inputs":[{"name":"input"},{"name":"p"},{"name":"context"}],"output":{"name":"result"}}],[11,"parse_path_start","","",13,{"inputs":[{"name":"parser"},{"name":"schemetype"},{"name":"bool"},{"name":"input"}],"output":{"name":"input"}}],[11,"parse_path","","",13,{"inputs":[{"name":"parser"},{"name":"schemetype"},{"name":"bool"},{"name":"usize"},{"name":"input"}],"output":{"name":"input"}}],[11,"parse_cannot_be_a_base_path","","",13,{"inputs":[{"name":"parser"},{"name":"input"}],"output":{"name":"input"}}],[11,"parse_query","","",13,{"inputs":[{"name":"parser"},{"name":"u32"},{"name":"input"}],"output":{"name":"option"}}],[11,"parse_fragment","","",13,null],[11,"index","url","",0,{"inputs":[{"name":"url"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index","","",0,{"inputs":[{"name":"url"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",0,{"inputs":[{"name":"url"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",0,{"inputs":[{"name":"url"},{"name":"range"}],"output":{"name":"str"}}],[11,"fmt","url::slicing","",14,{"inputs":[{"name":"position"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"position"}],"output":{"name":"position"}}],[11,"clone","url::form_urlencoded","",15,{"inputs":[{"name":"parse"}],"output":{"name":"parse"}}],[11,"next","","",15,{"inputs":[{"name":"parse"}],"output":{"name":"option"}}],[11,"into_owned","","Return a new iterator that yields pairs of `String` instead of pairs of `Cow&lt;str&gt;`.",15,{"inputs":[{"name":"parse"}],"output":{"name":"parseintoowned"}}],[11,"next","","",16,{"inputs":[{"name":"parseintoowned"}],"output":{"name":"option"}}],[11,"next","","",17,{"inputs":[{"name":"byteserialize"}],"output":{"name":"option"}}],[11,"size_hint","","",17,null],[11,"as_mut_string","collections::string","",18,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"finish","","",18,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"as_mut_string","url","",19,{"inputs":[{"name":"urlquery"}],"output":{"name":"string"}}],[11,"finish","","",19,{"inputs":[{"name":"urlquery"}],"output":{"name":"url"}}],[11,"new","url::form_urlencoded","Create a new `application/x-www-form-urlencoded` serializer for the given target.",20,{"inputs":[{"name":"t"}],"output":{"name":"serializer"}}],[11,"for_suffix","","Create a new `application/x-www-form-urlencoded` serializer\nfor a suffix of the given target.",20,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"serializer"}}],[11,"clear","","Remove any existing name/value pair.",20,{"inputs":[{"name":"serializer"}],"output":{"name":"serializer"}}],[11,"append_pair","","Serialize and append a name/value pair.",20,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"str"}],"output":{"name":"serializer"}}],[11,"extend_pairs","","Serialize and append a number of name/value pairs.",20,{"inputs":[{"name":"serializer"},{"name":"i"}],"output":{"name":"serializer"}}],[11,"finish","","If this serializer was constructed with a string, take and return that string.",20,null],[11,"clone","url::percent_encoding","",21,{"inputs":[{"name":"simple_encode_set"}],"output":{"name":"simple_encode_set"}}],[11,"contains","","",21,{"inputs":[{"name":"simple_encode_set"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",22,{"inputs":[{"name":"query_encode_set"}],"output":{"name":"query_encode_set"}}],[11,"contains","","",22,{"inputs":[{"name":"query_encode_set"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",23,{"inputs":[{"name":"default_encode_set"}],"output":{"name":"default_encode_set"}}],[11,"contains","","",23,{"inputs":[{"name":"default_encode_set"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",24,{"inputs":[{"name":"path_segment_encode_set"}],"output":{"name":"path_segment_encode_set"}}],[11,"contains","","",24,{"inputs":[{"name":"path_segment_encode_set"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",25,{"inputs":[{"name":"userinfo_encode_set"}],"output":{"name":"userinfo_encode_set"}}],[11,"contains","","",25,{"inputs":[{"name":"userinfo_encode_set"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"percentencode"}],"output":{"name":"percentencode"}}],[11,"next","","",26,{"inputs":[{"name":"percentencode"}],"output":{"name":"option"}}],[11,"size_hint","","",26,null],[11,"fmt","","",26,{"inputs":[{"name":"percentencode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","collections::borrow","",27,{"inputs":[{"name":"percentencode"}],"output":{"name":"cow"}}],[11,"clone","url::percent_encoding","",28,{"inputs":[{"name":"percentdecode"}],"output":{"name":"percentdecode"}}],[11,"next","","",28,{"inputs":[{"name":"percentdecode"}],"output":{"name":"option"}}],[11,"size_hint","","",28,null],[11,"from","collections::borrow","",27,{"inputs":[{"name":"percentdecode"}],"output":{"name":"cow"}}],[11,"if_any","url::percent_encoding","If the percent-decoding is different from the input, return it as a new bytes vector.",28,{"inputs":[{"name":"percentdecode"}],"output":{"name":"option"}}],[11,"decode_utf8","","Decode the result of percent-decoding as UTF-8.",28,{"inputs":[{"name":"percentdecode"}],"output":{"name":"result"}}],[11,"decode_utf8_lossy","","Decode the result of percent-decoding as UTF-8, lossily.",28,{"inputs":[{"name":"percentdecode"}],"output":{"name":"cow"}}],[11,"clone","url","",0,{"inputs":[{"name":"url"}],"output":{"name":"url"}}],[11,"clone","","",29,{"inputs":[{"name":"parseoptions"}],"output":{"name":"parseoptions"}}],[11,"base_url","","Change the base URL",29,{"inputs":[{"name":"parseoptions"},{"name":"option"}],"output":{"name":"parseoptions"}}],[11,"log_syntax_violation","","Call the provided function or closure on non-fatal parse errors.",29,{"inputs":[{"name":"parseoptions"},{"name":"option"}],"output":{"name":"parseoptions"}}],[11,"parse","","Parse an URL string with the configuration so far.",29,{"inputs":[{"name":"parseoptions"},{"name":"str"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",0,{"inputs":[{"name":"url"}],"output":{"name":"result"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"url"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"url"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"url"},{"name":"url"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"url"},{"name":"url"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"url"},{"name":"url"}],"output":{"name":"option"}}],[11,"hash","","",0,null],[11,"as_ref","","",0,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[11,"slice_of","core::ops","",30,{"inputs":[{"name":"range"},{"name":"str"}],"output":{"name":"str"}}],[11,"slice_of","","",31,{"inputs":[{"name":"rangefrom"},{"name":"str"}],"output":{"name":"str"}}],[11,"slice_of","","",32,{"inputs":[{"name":"rangeto"},{"name":"str"}],"output":{"name":"str"}}],[11,"drop","url","",19,null],[11,"fmt","idna::uts46","",33,{"inputs":[{"name":"mapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"flags"}],"output":{"name":"flags"}}],[11,"fmt","","",35,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"eq","","",35,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",36,{"inputs":[{"name":"errors"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Url","hyper","A parsed URL record.",null,null],[11,"matches","language_tags","Matches language tags. The first language acts as a language range, the second one is used\nas a normal language tag. None fields in the language range are ignored. If the language\ntag has more extlangs than the range these extlangs are ignored. Matches are\ncase-insensitive. `*` in language ranges are represented using `None` values. The language\nrange `*` that matches language tags is created by the default language tag:\n`let wildcard: LanguageTag = Default::default();.`",37,{"inputs":[{"name":"languagetag"},{"name":"languagetag"}],"output":{"name":"bool"}}],[11,"is_language_range","","Checks if it is a language range, meaning that there are no extension and privateuse tags.",37,{"inputs":[{"name":"languagetag"}],"output":{"name":"bool"}}],[11,"canonicalize","","Returns the canonical version of the language tag.",37,{"inputs":[{"name":"languagetag"}],"output":{"name":"languagetag"}}],[11,"eq","","",38,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",38,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",38,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"fmt","","",38,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"languagetag"}],"output":{"name":"languagetag"}}],[11,"default","","",37,{"inputs":[],"output":{"name":"languagetag"}}],[11,"fmt","","",37,{"inputs":[{"name":"languagetag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",37,{"inputs":[{"name":"languagetag"},{"name":"languagetag"}],"output":{"name":"bool"}}],[11,"from_str","","",37,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"languagetag"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"LanguageTag","hyper","A language tag as described in [BCP47](http://tools.ietf.org/html/bcp47).",null,null],[12,"language","","Language subtags are used to indicate the language, ignoring all\nother aspects such as script, region or spefic invariants.",37,null],[12,"extlangs","","Extended language subtags are used to identify certain specially\nselected languages that, for various historical and compatibility\nreasons, are closely identified with or tagged using an existing\nprimary language subtag.",37,null],[12,"script","","Script subtags are used to indicate the script or writing system\nvariations that distinguish the written forms of a language or its\ndialects.",37,null],[12,"region","","Region subtags are used to indicate linguistic variations associated\nwith or appropriate to a specific country, territory, or region.\nTypically, a region subtag is used to indicate variations such as\nregional dialects or usage, or region-specific spelling conventions.\nIt can also be used to indicate that content is expressed in a way\nthat is appropriate for use throughout a region, for instance,\nSpanish content tailored to be useful throughout Latin America.",37,null],[12,"variants","","Variant subtags are used to indicate additional, well-recognized\nvariations that define a language or its dialects that are not\ncovered by other available subtags.",37,null],[12,"extensions","","Extensions provide a mechanism for extending language tags for use in\nvarious applications.  They are intended to identify information that\nis commonly used in association with languages or language tags but\nthat is not part of language identification.",37,null],[12,"privateuse","","Private use subtags are used to indicate distinctions in language\nthat are important in a given context by private agreement.",37,null],[0,"client","","HTTP Client",null,null],[3,"Client","hyper::client","A Client to use additional features with Requests.",null,null],[3,"RequestBuilder","","Options for an individual Request.",null,null],[4,"Body","","An enum of possible body types for a Request.",null,null],[13,"ChunkedBody","","A Reader does not necessarily know it&#39;s size, so it is chunked.",39,null],[13,"SizedBody","","For Readers that can know their size, like a `File`.",39,null],[13,"BufBody","","A String has a size, and uses Content-Length.",39,null],[4,"RedirectPolicy","","Behavior regarding how to handle redirects within a Client.",null,null],[13,"FollowNone","","Don&#39;t follow any redirects.",40,null],[13,"FollowAll","","Follow all redirects.",40,null],[13,"FollowIf","","Follow a redirect if the contained function returns true.",40,null],[0,"pool","","Client Connection Pooling",null,null],[3,"Pool","hyper::client::pool","The `NetworkConnector` that behaves as a connection pool used by hyper&#39;s `Client`.",null,null],[3,"Config","","Config options for the `Pool`.",null,null],[12,"max_idle","","The maximum idle connections *per host*.",41,null],[3,"PooledStream","","A Stream that will try to be returned to the Pool when dropped.",null,null],[11,"fmt","","",41,{"inputs":[{"name":"config"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",41,{"inputs":[],"output":{"name":"config"}}],[11,"new","","Creates a `Pool` with a `DefaultConnector`.",42,{"inputs":[{"name":"config"}],"output":{"name":"pool"}}],[11,"with_connector","","Creates a `Pool` with a specified `NetworkConnector`.",42,{"inputs":[{"name":"config"},{"name":"c"}],"output":{"name":"pool"}}],[11,"clear_idle","","Clear all idle connections from the Pool, closing them.",42,{"inputs":[{"name":"pool"}],"output":null}],[11,"connect","","",42,{"inputs":[{"name":"pool"},{"name":"str"},{"name":"u16"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"pooledstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_inner","","Take the wrapped stream out of the pool completely.",43,{"inputs":[{"name":"pooledstream"}],"output":{"name":"s"}}],[11,"read","","",43,null],[11,"write","","",43,null],[11,"flush","","",43,{"inputs":[{"name":"pooledstream"}],"output":{"name":"result"}}],[11,"peer_addr","","",43,{"inputs":[{"name":"pooledstream"}],"output":{"name":"result"}}],[11,"set_read_timeout","","",43,{"inputs":[{"name":"pooledstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",43,{"inputs":[{"name":"pooledstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"close","","",43,{"inputs":[{"name":"pooledstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"set_previous_response_expected_no_content","","",43,{"inputs":[{"name":"pooledstream"},{"name":"bool"}],"output":null}],[11,"previous_response_expected_no_content","","",43,{"inputs":[{"name":"pooledstream"}],"output":{"name":"bool"}}],[11,"drop","","",43,{"inputs":[{"name":"pooledstream"}],"output":null}],[0,"request","hyper::client","Client Requests",null,null],[3,"Request","hyper::client::request","A client request to a remote server.\nThe W type tracks the state of the request, Fresh vs Streaming.",null,null],[12,"url","","The target URI for this request.",44,null],[12,"version","","The HTTP version of this request.",44,null],[11,"headers","","Read the Request headers.",44,{"inputs":[{"name":"request"}],"output":{"name":"headers"}}],[11,"method","","Read the Request method.",44,{"inputs":[{"name":"request"}],"output":{"name":"method"}}],[11,"set_write_timeout","","Set the write timeout.",44,{"inputs":[{"name":"request"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_read_timeout","","Set the read timeout.",44,{"inputs":[{"name":"request"},{"name":"option"}],"output":{"name":"result"}}],[11,"with_message","","Create a new `Request&lt;Fresh&gt;` that will use the given `HttpMessage` for its communication\nwith the server. This implies that the given `HttpMessage` instance has already been\nproperly initialized by the caller (e.g. a TCP connection&#39;s already established).",44,{"inputs":[{"name":"method"},{"name":"url"},{"name":"box"}],"output":{"name":"result"}}],[11,"new","","Create a new client request.",44,{"inputs":[{"name":"method"},{"name":"url"}],"output":{"name":"result"}}],[11,"with_connector","","Create a new client request with a specific underlying NetworkStream.",44,{"inputs":[{"name":"method"},{"name":"url"},{"name":"c"}],"output":{"name":"result"}}],[11,"start","","Consume a Fresh Request, writing the headers and method,\nreturning a Streaming Request.",44,{"inputs":[{"name":"request"}],"output":{"name":"result"}}],[11,"headers_mut","","Get a mutable reference to the Request headers.",44,{"inputs":[{"name":"request"}],"output":{"name":"headers"}}],[11,"send","","Completes writing the request, and returns a response to read from.",44,{"inputs":[{"name":"request"}],"output":{"name":"result"}}],[11,"write","","",44,null],[11,"flush","","",44,{"inputs":[{"name":"request"}],"output":{"name":"result"}}],[0,"response","hyper::client","Client Responses",null,null],[3,"Response","hyper::client::response","A response for a client request to a remote server.",null,null],[12,"status","","The status from the server.",45,null],[12,"headers","","The headers from the server.",45,null],[12,"version","","The HTTP version of this response from the server.",45,null],[12,"url","","The final URL of this response.",45,null],[11,"fmt","","",45,{"inputs":[{"name":"response"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new response from a server.",45,{"inputs":[{"name":"url"},{"name":"box"}],"output":{"name":"result"}}],[11,"with_message","","Creates a new response received from the server on the given `HttpMessage`.",45,{"inputs":[{"name":"url"},{"name":"box"}],"output":{"name":"result"}}],[11,"status_raw","","Get the raw status code and reason.",45,{"inputs":[{"name":"response"}],"output":{"name":"rawstatus"}}],[11,"read","","",45,null],[11,"drop","","",45,{"inputs":[{"name":"response"}],"output":null}],[8,"IntoUrl","hyper::client","A helper trait to convert common objects into a Url.",null,null],[10,"into_url","","Consumes the object, trying to return a Url.",46,{"inputs":[{"name":"intourl"}],"output":{"name":"result"}}],[11,"fmt","","",47,{"inputs":[{"name":"client"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new Client.",47,{"inputs":[],"output":{"name":"client"}}],[11,"with_pool_config","","Create a new Client with a configured Pool Config.",47,{"inputs":[{"name":"config"}],"output":{"name":"client"}}],[11,"with_http_proxy","","",47,{"inputs":[{"name":"h"},{"name":"u16"}],"output":{"name":"client"}}],[11,"with_connector","","Create a new client with a specific connector.",47,{"inputs":[{"name":"c"}],"output":{"name":"client"}}],[11,"with_protocol","","Create a new client with a specific `Protocol`.",47,{"inputs":[{"name":"p"}],"output":{"name":"client"}}],[11,"set_redirect_policy","","Set the RedirectPolicy.",47,{"inputs":[{"name":"client"},{"name":"redirectpolicy"}],"output":null}],[11,"set_read_timeout","","Set the read timeout value for all requests.",47,{"inputs":[{"name":"client"},{"name":"option"}],"output":null}],[11,"set_write_timeout","","Set the write timeout value for all requests.",47,{"inputs":[{"name":"client"},{"name":"option"}],"output":null}],[11,"get","","Build a Get request.",47,{"inputs":[{"name":"client"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"head","","Build a Head request.",47,{"inputs":[{"name":"client"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"patch","","Build a Patch request.",47,{"inputs":[{"name":"client"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"post","","Build a Post request.",47,{"inputs":[{"name":"client"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"put","","Build a Put request.",47,{"inputs":[{"name":"client"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"delete","","Build a Delete request.",47,{"inputs":[{"name":"client"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"request","","Build a new request using this Client.",47,{"inputs":[{"name":"client"},{"name":"method"},{"name":"u"}],"output":{"name":"requestbuilder"}}],[11,"default","","",47,{"inputs":[],"output":{"name":"client"}}],[11,"body","","Set a request body to be sent.",48,{"inputs":[{"name":"requestbuilder"},{"name":"b"}],"output":{"name":"requestbuilder"}}],[11,"headers","","Add additional headers to the request.",48,{"inputs":[{"name":"requestbuilder"},{"name":"headers"}],"output":{"name":"requestbuilder"}}],[11,"header","","Add an individual new header to the request.",48,{"inputs":[{"name":"requestbuilder"},{"name":"h"}],"output":{"name":"requestbuilder"}}],[11,"send","","Execute this request and receive a Response back.",48,{"inputs":[{"name":"requestbuilder"}],"output":{"name":"result"}}],[11,"read","","",39,null],[11,"from","","",39,{"inputs":[{"name":"r"}],"output":{"name":"body"}}],[11,"into_url","hyper","",0,{"inputs":[{"name":"url"}],"output":{"name":"result"}}],[11,"fmt","hyper::client","",40,{"inputs":[{"name":"redirectpolicy"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"redirectpolicy"}],"output":{"name":"redirectpolicy"}}],[11,"default","","",40,{"inputs":[],"output":{"name":"redirectpolicy"}}],[0,"error","hyper","Error and Result module.",null,null],[4,"Error","hyper::error","A set of errors that can occur parsing HTTP streams.",null,null],[13,"Method","","An invalid `Method`, such as `GE,T`.",49,null],[13,"Uri","","An invalid `RequestUri`, such as `exam ple.domain`.",49,null],[13,"Version","","An invalid `HttpVersion`, such as `HTP/1.1`",49,null],[13,"Header","","An invalid `Header`.",49,null],[13,"TooLarge","","A message head is too large to be reasonable.",49,null],[13,"Status","","An invalid `Status`, such as `1337 ELITE`.",49,null],[13,"Io","","An `io::Error` that occurred while trying to read or write to a network stream.",49,null],[13,"Ssl","","An error from a SSL library.",49,null],[13,"Http2","","An HTTP/2-specific error, coming from the `solicit` library.",49,null],[13,"Utf8","","Parsing a field as string failed",49,null],[6,"Result","","Result type often returned from methods that can have hyper `Error`s.",null,null],[11,"fmt","","",49,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",49,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",49,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",49,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"from","","",49,{"inputs":[{"name":"ioerror"}],"output":{"name":"error"}}],[11,"from","","",49,{"inputs":[{"name":"parseerror"}],"output":{"name":"error"}}],[11,"from","","",49,{"inputs":[{"name":"sslerror"}],"output":{"name":"error"}}],[11,"from","","",49,{"inputs":[{"name":"utf8error"}],"output":{"name":"error"}}],[11,"from","","",49,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"error"}}],[11,"from","","",49,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",49,{"inputs":[{"name":"http2error"}],"output":{"name":"error"}}],[0,"method","hyper","The HTTP request method",null,null],[4,"Method","hyper::method","The Request Method (VERB)",null,null],[13,"Options","","OPTIONS",50,null],[13,"Get","","GET",50,null],[13,"Post","","POST",50,null],[13,"Put","","PUT",50,null],[13,"Delete","","DELETE",50,null],[13,"Head","","HEAD",50,null],[13,"Trace","","TRACE",50,null],[13,"Connect","","CONNECT",50,null],[13,"Patch","","PATCH",50,null],[13,"Extension","","Method extensions. An example would be `let m = Extension(&quot;FOO&quot;.to_string())`.",50,null],[11,"fmt","","",50,{"inputs":[{"name":"method"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",50,null],[11,"eq","","",50,{"inputs":[{"name":"method"},{"name":"method"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"method"},{"name":"method"}],"output":{"name":"bool"}}],[11,"clone","","",50,{"inputs":[{"name":"method"}],"output":{"name":"method"}}],[11,"as_ref","","",50,{"inputs":[{"name":"method"}],"output":{"name":"str"}}],[11,"safe","","Whether a method is considered &quot;safe&quot;, meaning the request is\nessentially read-only.",50,{"inputs":[{"name":"method"}],"output":{"name":"bool"}}],[11,"idempotent","","Whether a method is considered &quot;idempotent&quot;, meaning the request has\nthe same result is executed multiple times.",50,{"inputs":[{"name":"method"}],"output":{"name":"bool"}}],[11,"from_str","","",50,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",50,{"inputs":[{"name":"method"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"header","hyper","Headers container, and common header fields.",null,null],[11,"new","cookie","",51,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"cookie"}}],[11,"parse","","",51,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"pair","","",51,{"inputs":[{"name":"cookie"}],"output":{"name":"attrval"}}],[11,"new","cookie::jar","Creates a new empty cookie jar with the given signing key.",52,null],[11,"add_original","","Adds an original cookie from a request.",52,null],[11,"add","","Adds a new cookie to this cookie jar.",52,null],[11,"remove","","Removes a cookie from this cookie jar.",52,null],[11,"find","","Finds a cookie inside of this cookie jar.",52,{"inputs":[{"name":"cookiejar"},{"name":"str"}],"output":{"name":"option"}}],[11,"signed","","Creates a child signed cookie jar.",52,{"inputs":[{"name":"cookiejar"}],"output":{"name":"cookiejar"}}],[11,"encrypted","","Creates a child encrypted cookie jar.",52,{"inputs":[{"name":"cookiejar"}],"output":{"name":"cookiejar"}}],[11,"permanent","","Creates a child jar for permanent cookie storage.",52,{"inputs":[{"name":"cookiejar"}],"output":{"name":"cookiejar"}}],[11,"delta","","Calculates the changes that have occurred to this cookie jar over time,\nreturning a vector of `Set-Cookie` headers.",52,{"inputs":[{"name":"cookiejar"}],"output":{"name":"vec"}}],[11,"iter","","Return an iterator over the cookies in this jar.",52,{"inputs":[{"name":"cookiejar"}],"output":{"name":"iter"}}],[11,"next","","",53,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"fmt","cookie","",51,{"inputs":[{"name":"cookie"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"cookie"}],"output":{"name":"cookie"}}],[11,"eq","","",51,{"inputs":[{"name":"cookie"},{"name":"cookie"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"cookie"},{"name":"cookie"}],"output":{"name":"bool"}}],[11,"fmt","","",54,{"inputs":[{"name":"attrval"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",51,{"inputs":[{"name":"cookie"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",51,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[3,"CookiePair","hyper::header","",null,null],[12,"name","","",51,null],[12,"value","","",51,null],[12,"expires","","",51,null],[12,"max_age","","",51,null],[12,"domain","","",51,null],[12,"path","","",51,null],[12,"secure","","",51,null],[12,"httponly","","",51,null],[12,"custom","","",51,null],[3,"CookieJar","","A jar of cookies for managing a session",null,null],[3,"EntityTag","","An entity tag, defined in [RFC7232](https://tools.ietf.org/html/rfc7232#section-2.3)",null,null],[12,"weak","","Weakness indicator for the tag",55,null],[3,"HttpDate","","A `time::Time` with HTTP formatting and parsing",null,null],[3,"Quality","","Represents a quality used in quality values.",null,null],[3,"QualityItem","","Represents an item with a quality value as defined in\n[RFC7231](https://tools.ietf.org/html/rfc7231#section-5.3.1).",null,null],[12,"item","","The actual contents of the field.",56,null],[12,"quality","","The quality (client or server preference) for the value.",56,null],[3,"Accept","","`Accept` header, defined in [RFC7231](http://tools.ietf.org/html/rfc7231#section-5.3.2)",null,null],[3,"AccessControlAllowCredentials","","`Access-Control-Allow-Credentials` header, part of\n[CORS](http://www.w3.org/TR/cors/#access-control-allow-headers-response-header)",null,null],[3,"AccessControlAllowHeaders","","`Access-Control-Allow-Headers` header, part of\n[CORS](http://www.w3.org/TR/cors/#access-control-allow-headers-response-header)",null,null],[3,"AccessControlAllowMethods","","`Access-Control-Allow-Methods` header, part of\n[CORS](http://www.w3.org/TR/cors/#access-control-allow-methods-response-header)",null,null],[3,"AccessControlExposeHeaders","","`Access-Control-Expose-Headers` header, part of\n[CORS](http://www.w3.org/TR/cors/#access-control-expose-headers-response-header)",null,null],[3,"AccessControlMaxAge","","`Access-Control-Max-Age` header, part of\n[CORS](http://www.w3.org/TR/cors/#access-control-max-age-response-header)",null,null],[3,"AccessControlRequestHeaders","","`Access-Control-Request-Headers` header, part of\n[CORS](http://www.w3.org/TR/cors/#access-control-request-headers-request-header)",null,null],[3,"AccessControlRequestMethod","","`Access-Control-Request-Method` header, part of\n[CORS](http://www.w3.org/TR/cors/#access-control-request-method-request-header)",null,null],[3,"AcceptCharset","","`Accept-Charset` header, defined in\n[RFC7231](http://tools.ietf.org/html/rfc7231#section-5.3.3)",null,null],[3,"AcceptEncoding","","`Accept-Encoding` header, defined in\n[RFC7231](http://tools.ietf.org/html/rfc7231#section-5.3.4)",null,null],[3,"AcceptLanguage","","`Accept-Language` header, defined in\n[RFC7231](http://tools.ietf.org/html/rfc7231#section-5.3.5)",null,null],[3,"AcceptRanges","","`Accept-Ranges` header, defined in\n[RFC7233](http://tools.ietf.org/html/rfc7233#section-2.3)",null,null],[3,"Allow","","`Allow` header, defined in [RFC7231](http://tools.ietf.org/html/rfc7231#section-7.4.1)",null,null],[3,"Authorization","","`Authorization` header, defined in [RFC7235](https://tools.ietf.org/html/rfc7235#section-4.2)",null,null],[3,"Basic","","Credential holder for Basic Authentication",null,null],[12,"username","","The username as a possibly empty string",57,null],[12,"password","","The password. `None` if the `:` delimiter character was not\npart of the parsed input.",57,null],[3,"Bearer","","Token holder for Bearer Authentication, most often seen with oauth",null,null],[12,"token","","Actual bearer token as a string",58,null],[3,"CacheControl","","`Cache-Control` header, defined in [RFC7234](https://tools.ietf.org/html/rfc7234#section-5.2)",null,null],[3,"Connection","","`Connection` header, defined in\n[RFC7230](http://tools.ietf.org/html/rfc7230#section-6.1)",null,null],[3,"ContentDisposition","","A `Content-Disposition` header, (re)defined in [RFC6266](https://tools.ietf.org/html/rfc6266)",null,null],[12,"disposition","","The disposition",59,null],[12,"parameters","","Disposition parameters",59,null],[3,"ContentLength","","`Content-Length` header, defined in\n[RFC7230](http://tools.ietf.org/html/rfc7230#section-3.3.2)",null,null],[3,"ContentEncoding","","`Content-Encoding` header, defined in\n[RFC7231](http://tools.ietf.org/html/rfc7231#section-3.1.2.2)",null,null],[3,"ContentLanguage","","`Content-Language` header, defined in\n[RFC7231](https://tools.ietf.org/html/rfc7231#section-3.1.3.2)",null,null],[3,"ContentRange","","`Content-Range` header, defined in\n[RFC7233](http://tools.ietf.org/html/rfc7233#section-4.2)",null,null],[3,"ContentType","","`Content-Type` header, defined in\n[RFC7231](http://tools.ietf.org/html/rfc7231#section-3.1.1.5)",null,null],[3,"Cookie","","`Cookie` header, defined in [RFC6265](http://tools.ietf.org/html/rfc6265#section-5.4)",null,null],[3,"Date","","`Date` header, defined in [RFC7231](http://tools.ietf.org/html/rfc7231#section-7.1.1.2)",null,null],[3,"ETag","","`ETag` header, defined in [RFC7232](http://tools.ietf.org/html/rfc7232#section-2.3)",null,null],[3,"Expires","","`Expires` header, defined in [RFC7234](http://tools.ietf.org/html/rfc7234#section-5.3)",null,null],[3,"From","","`From` header, defined in [RFC7231](http://tools.ietf.org/html/rfc7231#section-5.5.1)",null,null],[3,"Host","","The `Host` header.",null,null],[12,"hostname","","The hostname, such a example.domain.",60,null],[12,"port","","An optional port number.",60,null],[3,"IfModifiedSince","","`If-Modified-Since` header, defined in\n[RFC7232](http://tools.ietf.org/html/rfc7232#section-3.3)",null,null],[3,"IfUnmodifiedSince","","`If-Unmodified-Since` header, defined in\n[RFC7232](http://tools.ietf.org/html/rfc7232#section-3.4)",null,null],[3,"LastModified","","`Last-Modified` header, defined in\n[RFC7232](http://tools.ietf.org/html/rfc7232#section-2.2)",null,null],[3,"Location","","`Location` header, defined in\n[RFC7231](http://tools.ietf.org/html/rfc7231#section-7.1.2)",null,null],[3,"Prefer","","`Prefer` header, defined in [RFC7240](http://tools.ietf.org/html/rfc7240)",null,null],[3,"PreferenceApplied","","`Preference-Applied` header, defined in [RFC7240](http://tools.ietf.org/html/rfc7240)",null,null],[3,"Referer","","`Referer` header, defined in\n[RFC7231](http://tools.ietf.org/html/rfc7231#section-5.5.2)",null,null],[3,"Server","","`Server` header, defined in [RFC7231](http://tools.ietf.org/html/rfc7231#section-7.4.2)",null,null],[3,"SetCookie","","`Set-Cookie` header, defined [RFC6265](http://tools.ietf.org/html/rfc6265#section-4.1)",null,null],[3,"StrictTransportSecurity","","`StrictTransportSecurity` header, defined in [RFC6797](https://tools.ietf.org/html/rfc6797)",null,null],[12,"include_subdomains","","Signals the UA that the HSTS Policy applies to this HSTS Host as well as\nany subdomains of the host&#39;s domain name.",61,null],[12,"max_age","","Specifies the number of seconds, after the reception of the STS header\nfield, during which the UA regards the host (from whom the message was\nreceived) as a Known HSTS Host.",61,null],[3,"TransferEncoding","","`Transfer-Encoding` header, defined in\n[RFC7230](http://tools.ietf.org/html/rfc7230#section-3.3.1)",null,null],[3,"Upgrade","","`Upgrade` header, defined in [RFC7230](http://tools.ietf.org/html/rfc7230#section-6.7)",null,null],[3,"Protocol","","Protocols that appear in the `Upgrade` header field",null,null],[12,"name","","The protocol identifier",62,null],[12,"version","","The optional version of the protocol, often in the format &quot;DIGIT.DIGIT&quot; (e.g.. &quot;1.2&quot;)",62,null],[3,"UserAgent","","`User-Agent` header, defined in\n[RFC7231](http://tools.ietf.org/html/rfc7231#section-5.5.3)",null,null],[3,"Headers","","A map of header fields on requests and responses.",null,null],[3,"HeadersItems","","An `Iterator` over the fields in a `Headers` map.",null,null],[3,"HeaderView","","Returned with the `HeadersItems` iterator.",null,null],[3,"HeaderFormatter","","A wrapper around any Header with a Display impl that calls fmt_header.",null,null],[4,"Charset","","A Mime charset.",null,null],[13,"Us_Ascii","","US ASCII",63,null],[13,"Iso_8859_1","","ISO-8859-1",63,null],[13,"Iso_8859_2","","ISO-8859-2",63,null],[13,"Iso_8859_3","","ISO-8859-3",63,null],[13,"Iso_8859_4","","ISO-8859-4",63,null],[13,"Iso_8859_5","","ISO-8859-5",63,null],[13,"Iso_8859_6","","ISO-8859-6",63,null],[13,"Iso_8859_7","","ISO-8859-7",63,null],[13,"Iso_8859_8","","ISO-8859-8",63,null],[13,"Iso_8859_9","","ISO-8859-9",63,null],[13,"Iso_8859_10","","ISO-8859-10",63,null],[13,"Shift_Jis","","Shift_JIS",63,null],[13,"Euc_Jp","","EUC-JP",63,null],[13,"Iso_2022_Kr","","ISO-2022-KR",63,null],[13,"Euc_Kr","","EUC-KR",63,null],[13,"Iso_2022_Jp","","ISO-2022-JP",63,null],[13,"Iso_2022_Jp_2","","ISO-2022-JP-2",63,null],[13,"Iso_8859_6_E","","ISO-8859-6-E",63,null],[13,"Iso_8859_6_I","","ISO-8859-6-I",63,null],[13,"Iso_8859_8_E","","ISO-8859-8-E",63,null],[13,"Iso_8859_8_I","","ISO-8859-8-I",63,null],[13,"Gb2312","","GB2312",63,null],[13,"Big5","","Big5",63,null],[13,"Koi8_R","","KOI8-R",63,null],[13,"Ext","","An arbitrary charset specified as a string",63,null],[4,"Encoding","","A value to represent an encoding used in `Transfer-Encoding`\nor `Accept-Encoding` header.",null,null],[13,"Chunked","","The `chunked` encoding.",64,null],[13,"Gzip","","The `gzip` encoding.",64,null],[13,"Deflate","","The `deflate` encoding.",64,null],[13,"Compress","","The `compress` encoding.",64,null],[13,"Identity","","The `identity` encoding.",64,null],[13,"EncodingExt","","Some other encoding that is less common, can be any String.",64,null],[4,"AccessControlAllowOrigin","","The `Access-Control-Allow-Origin` response header,\npart of [CORS](http://www.w3.org/TR/cors/#access-control-allow-origin-response-header)",null,null],[13,"Any","","Allow all origins",65,null],[13,"Null","","A hidden origin",65,null],[13,"Value","","Allow one particular origin",65,null],[4,"RangeUnit","","Range Units, described in [RFC7233](http://tools.ietf.org/html/rfc7233#section-2)",null,null],[13,"Bytes","","Indicating byte-range requests are supported.",66,null],[13,"None","","Reserved as keyword, indicating no ranges are supported.",66,null],[13,"Unregistered","","The given range unit is not registered at IANA.",66,null],[4,"CacheDirective","","`CacheControl` contains a list of these directives.",null,null],[13,"NoCache","","&quot;no-cache&quot;",67,null],[13,"NoStore","","&quot;no-store&quot;",67,null],[13,"NoTransform","","&quot;no-transform&quot;",67,null],[13,"OnlyIfCached","","&quot;only-if-cached&quot;",67,null],[13,"MaxAge","","&quot;max-age=delta&quot;",67,null],[13,"MaxStale","","&quot;max-stale=delta&quot;",67,null],[13,"MinFresh","","&quot;min-fresh=delta&quot;",67,null],[13,"MustRevalidate","","&quot;must-revalidate&quot;",67,null],[13,"Public","","&quot;public&quot;",67,null],[13,"Private","","&quot;private&quot;",67,null],[13,"ProxyRevalidate","","&quot;proxy-revalidate&quot;",67,null],[13,"SMaxAge","","&quot;s-maxage=delta&quot;",67,null],[13,"Extension","","Extension directives. Optionally include an argument.",67,null],[4,"ConnectionOption","","Values that can be in the `Connection` header.",null,null],[13,"KeepAlive","","The `keep-alive` connection value.",68,null],[13,"Close","","The `close` connection value.",68,null],[13,"ConnectionHeader","","Values in the Connection header that are supposed to be names of other Headers.",68,null],[4,"DispositionType","","The implied disposition of the content of the HTTP body",null,null],[13,"Inline","","Inline implies default processing",69,null],[13,"Attachment","","Attachment implies that the recipient should prompt the user to save the response locally,\nrather than process it normally (as per its media type).",69,null],[13,"Ext","","Extension type.  Should be handled by recipients the same way as Attachment",69,null],[4,"DispositionParam","","A parameter to the disposition type",null,null],[13,"Filename","","A Filename consisting of a Charset, an optional LanguageTag, and finally a sequence of\nbytes representing the filename",70,null],[13,"Ext","","Extension type consisting of token and value.  Recipients should ignore unrecognized\nparameters.",70,null],[4,"ContentRangeSpec","","Content-Range, described in [RFC7233](https://tools.ietf.org/html/rfc7233#section-4.2)",null,null],[13,"Bytes","","Byte range",71,null],[12,"range","hyper::header::ContentRangeSpec","First and last bytes of the range, omitted if request could not be\nsatisfied",71,null],[12,"instance_length","","Total length of the instance, can be omitted if unknown",71,null],[13,"Unregistered","hyper::header","Custom range, with unit not registered at IANA",71,null],[12,"unit","hyper::header::ContentRangeSpec","other-range-unit",71,null],[12,"resp","","other-range-resp",71,null],[4,"Expect","hyper::header","The `Expect` header.",null,null],[13,"Continue","","The value `100-continue`.",72,null],[4,"IfMatch","","`If-Match` header, defined in\n[RFC7232](https://tools.ietf.org/html/rfc7232#section-3.1)",null,null],[13,"Any","","Any value is a match",73,null],[13,"Items","","Only the listed items are a match",73,null],[4,"IfNoneMatch","","`If-None-Match` header, defined in\n[RFC7232](https://tools.ietf.org/html/rfc7232#section-3.2)",null,null],[13,"Any","","Any value is a match",74,null],[13,"Items","","Only the listed items are a match",74,null],[4,"IfRange","","`If-Range` header, defined in [RFC7233](http://tools.ietf.org/html/rfc7233#section-3.2)",null,null],[13,"EntityTag","","The entity-tag the client has of the resource",75,null],[13,"Date","","The date when the client retrieved the resource",75,null],[4,"Pragma","","The `Pragma` header defined by HTTP/1.0.",null,null],[13,"NoCache","","Corresponds to the `no-cache` value.",76,null],[13,"Ext","","Every value other than `no-cache`.",76,null],[4,"Preference","","Prefer contains a list of these preferences.",null,null],[13,"RespondAsync","","&quot;respond-async&quot;",77,null],[13,"ReturnRepresentation","","&quot;return=representation&quot;",77,null],[13,"ReturnMinimal","","&quot;return=minimal&quot;",77,null],[13,"HandlingStrict","","&quot;handling=strict&quot;",77,null],[13,"HandlingLeniant","","&quot;handling=leniant&quot;",77,null],[13,"Wait","","&quot;wait=delta&quot;",77,null],[13,"Extension","","Extension preferences. Always has a value, if none is specified it is\njust &quot;&quot;. A preference can also have a list of parameters.",77,null],[4,"Range","","`Range` header, defined in [RFC7233](https://tools.ietf.org/html/rfc7233#section-3.1)",null,null],[13,"Bytes","","Byte range",78,null],[13,"Unregistered","","Custom range, with unit not registered at IANA\n(`other-range-unit`: String , `other-range-set`: String)",78,null],[4,"ByteRangeSpec","","Each `Range::Bytes` header can contain one or more `ByteRangeSpecs`.\nEach `ByteRangeSpec` defines a range of bytes to fetch",null,null],[13,"FromTo","","Get all bytes between x and y (&quot;x-y&quot;)",79,null],[13,"AllFrom","","Get all bytes starting from x (&quot;x-&quot;)",79,null],[13,"Last","","Get last x bytes (&quot;-x&quot;)",79,null],[4,"ProtocolName","","A protocol name used to identify a spefic protocol. Names are case-sensitive\nexcept for the `WebSocket` value.",null,null],[13,"Http","","`HTTP` value, Hypertext Transfer Protocol",80,null],[13,"Tls","","`TLS` value, Transport Layer Security [RFC2817](http://tools.ietf.org/html/rfc2817)",80,null],[13,"WebSocket","","`WebSocket` value, matched case insensitively,Web Socket Protocol\n[RFC6455](http://tools.ietf.org/html/rfc6455)",80,null],[13,"H2c","","`h2c` value, HTTP/2 over cleartext TCP",80,null],[13,"Unregistered","","Any other protocol name not known to hyper",80,null],[4,"Vary","","`Vary` header, defined in [RFC7231](https://tools.ietf.org/html/rfc7231#section-7.1.4)",null,null],[13,"Any","","Any value is a match",81,null],[13,"Items","","Only the listed items are a match",81,null],[5,"qitem","","Convinience function to wrap a value in a `QualityItem`\nSets `q` to the default 1.0",null,{"inputs":[{"name":"t"}],"output":{"name":"qualityitem"}}],[5,"q","","Convenience function to create a `Quality` from a float.",null,{"inputs":[{"name":"f32"}],"output":{"name":"quality"}}],[11,"eq","","",82,{"inputs":[{"name":"accept"},{"name":"accept"}],"output":{"name":"bool"}}],[11,"ne","","",82,{"inputs":[{"name":"accept"},{"name":"accept"}],"output":{"name":"bool"}}],[11,"fmt","","",82,{"inputs":[{"name":"accept"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",82,{"inputs":[{"name":"accept"}],"output":{"name":"accept"}}],[11,"new","collections::vec","Constructs a new, empty `Vec&lt;T&gt;`.",83,{"inputs":[],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec&lt;T&gt;` with the specified capacity.",83,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec&lt;T&gt;` directly from the raw components of another vector.",83,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",83,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec&lt;T&gt;`. The collection may reserve more space to avoid\nfrequent reallocations.",83,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec&lt;T&gt;`. Does nothing if the capacity is already\nsufficient.",83,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",83,null],[11,"into_boxed_slice","","Converts the vector into Box&lt;[T]&gt;.",83,{"inputs":[{"name":"vec"}],"output":{"name":"box"}}],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",83,null],[11,"as_slice","","Extracts a slice containing the entire vector.",83,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",83,null],[11,"set_len","","Sets the length of a vector.",83,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",83,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after it to the right.",83,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after it to the left.",83,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"retain","","Retains only the elements specified by the predicate.",83,null],[11,"push","","Appends an element to the back of a collection.",83,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",83,{"inputs":[{"name":"vec"}],"output":{"name":"option"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",83,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items.",83,{"inputs":[{"name":"vec"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the vector, removing all values.",83,null],[11,"len","","Returns the number of elements in the vector.",83,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector contains no elements.",83,{"inputs":[{"name":"vec"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the collection into two at the given index.",83,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",83,null],[11,"push_all","","",83,null],[11,"extend_from_slice","","Appends all elements in a slice to the `Vec`.",83,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",83,null],[11,"clone","collections::binary_heap","",84,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"clone_from","","",84,null],[11,"default","","",84,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"fmt","","",84,{"inputs":[{"name":"binaryheap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",84,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",84,{"inputs":[{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",84,{"inputs":[{"name":"binaryheap"}],"output":{"name":"iter"}}],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",84,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",84,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",84,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",84,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",84,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",84,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"push","","Pushes an item onto the binary heap.",84,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",84,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"t"}}],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",84,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"option"}}],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",84,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",84,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of the binary heap.",84,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"is_empty","","Checks if the binary heap is empty.",84,{"inputs":[{"name":"binaryheap"}],"output":{"name":"bool"}}],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",84,{"inputs":[{"name":"binaryheap"}],"output":{"name":"drain"}}],[11,"clear","","Drops all items from the binary heap.",84,null],[11,"drop","","",85,null],[11,"clone","","",86,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",86,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",86,null],[11,"next_back","","",86,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",87,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",87,null],[11,"next_back","","",87,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",88,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",88,null],[11,"next_back","","",88,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"from","","",84,{"inputs":[{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","collections::vec","",83,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from_iter","collections::binary_heap","",84,{"inputs":[{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",84,{"inputs":[{"name":"binaryheap"}],"output":{"name":"intoiter"}}],[11,"extend","","",84,null],[11,"extend","","",84,null],[11,"new_leaf","collections::btree::node","",89,{"inputs":[],"output":{"name":"root"}}],[11,"as_ref","","",89,{"inputs":[{"name":"root"}],"output":{"name":"noderef"}}],[11,"as_mut","","",89,{"inputs":[{"name":"root"}],"output":{"name":"noderef"}}],[11,"into_ref","","",89,{"inputs":[{"name":"root"}],"output":{"name":"noderef"}}],[11,"push_level","","Add a new internal node with a single edge, pointing to the previous root, and make that\nnew node the root. This increases the height by 1 and is the opposite of `pop_level`.",89,{"inputs":[{"name":"root"}],"output":{"name":"noderef"}}],[11,"pop_level","","Remove the root node, using its first child as the new root. This cannot be called when\nthe tree consists only of a leaf node. As it is intended only to be called when the root\nhas only one edge, no cleanup is done on any of the other children are elements of the root.\nThis decreases the height by 1 and is the opposite of `push_level`.",89,null],[11,"clone","","",90,{"inputs":[{"name":"noderef"}],"output":{"name":"noderef"}}],[11,"len","","",90,{"inputs":[{"name":"noderef"}],"output":{"name":"usize"}}],[11,"forget_type","","",90,{"inputs":[{"name":"noderef"}],"output":{"name":"noderef"}}],[11,"keys","","",90,null],[11,"vals","","",90,null],[11,"ascend","","",90,{"inputs":[{"name":"noderef"}],"output":{"name":"result"}}],[11,"first_edge","","",90,{"inputs":[{"name":"noderef"}],"output":{"name":"handle"}}],[11,"last_edge","","",90,{"inputs":[{"name":"noderef"}],"output":{"name":"handle"}}],[11,"deallocate_and_ascend","","",90,{"inputs":[{"name":"noderef"}],"output":{"name":"option"}}],[11,"deallocate_and_ascend","","",90,{"inputs":[{"name":"noderef"}],"output":{"name":"option"}}],[11,"keys_mut","","",90,null],[11,"vals_mut","","",90,null],[11,"into_slices","","",90,null],[11,"into_root_mut","","",90,{"inputs":[{"name":"noderef"}],"output":{"name":"root"}}],[11,"into_slices_mut","","",90,null],[11,"push","","",90,null],[11,"push_front","","",90,null],[11,"push","","",90,null],[11,"push_front","","",90,null],[11,"pop","","",90,null],[11,"pop_front","","",90,null],[11,"force","","",90,{"inputs":[{"name":"noderef"}],"output":{"name":"forceresult"}}],[11,"clone","","",91,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"into_node","","",91,{"inputs":[{"name":"handle"}],"output":{"name":"node"}}],[11,"new_kv","","",91,{"inputs":[{"name":"noderef"},{"name":"usize"}],"output":{"name":"handle"}}],[11,"left_edge","","",91,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"right_edge","","",91,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"eq","","",91,{"inputs":[{"name":"handle"},{"name":"handle"}],"output":{"name":"bool"}}],[11,"reborrow","","",91,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"reborrow_mut","","",91,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"new_edge","","",91,{"inputs":[{"name":"noderef"},{"name":"usize"}],"output":{"name":"handle"}}],[11,"left_kv","","",91,{"inputs":[{"name":"handle"}],"output":{"name":"result"}}],[11,"right_kv","","",91,{"inputs":[{"name":"handle"}],"output":{"name":"result"}}],[11,"insert","","",91,null],[11,"insert","","",91,{"inputs":[{"name":"handle"},{"name":"k"},{"name":"v"},{"name":"root"}],"output":{"name":"insertresult"}}],[11,"descend","","",91,{"inputs":[{"name":"handle"}],"output":{"name":"noderef"}}],[11,"into_kv","","",91,null],[11,"into_kv_mut","","",91,null],[11,"kv_mut","","",91,null],[11,"split","","",91,null],[11,"remove","","",91,null],[11,"split","","",91,null],[11,"can_merge","","",91,{"inputs":[{"name":"handle"}],"output":{"name":"bool"}}],[11,"merge","","",91,{"inputs":[{"name":"handle"}],"output":{"name":"handle"}}],[11,"force","","",91,{"inputs":[{"name":"handle"}],"output":{"name":"forceresult"}}],[11,"drop","collections::btree::map","",92,null],[11,"clone","","",92,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",92,{"inputs":[],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",92,null],[11,"get","","Returns a reference to the value corresponding to the key.",92,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",92,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",92,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",92,{"inputs":[{"name":"btreemap"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",92,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",92,{"inputs":[{"name":"btreemap"},{"name":"bound"},{"name":"bound"}],"output":{"name":"range"}}],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",92,{"inputs":[{"name":"btreemap"},{"name":"bound"},{"name":"bound"}],"output":{"name":"rangemut"}}],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place manipulation.",92,{"inputs":[{"name":"btreemap"},{"name":"k"}],"output":{"name":"entry"}}],[11,"next","","",93,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",93,null],[11,"next_back","","",93,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"len","","",93,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"clone","","",93,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",94,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",94,null],[11,"next_back","","",94,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"len","","",94,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"into_iter","","",92,{"inputs":[{"name":"btreemap"}],"output":{"name":"intoiter"}}],[11,"drop","","",95,null],[11,"next","","",95,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",95,null],[11,"next_back","","",95,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"len","","",95,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",96,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",96,null],[11,"next_back","","",96,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"len","","",96,{"inputs":[{"name":"keys"}],"output":{"name":"usize"}}],[11,"clone","","",96,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"next","","",97,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",97,null],[11,"next_back","","",97,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"len","","",97,{"inputs":[{"name":"values"}],"output":{"name":"usize"}}],[11,"clone","","",97,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[11,"next","","",98,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next_back","","",98,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",98,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",99,{"inputs":[{"name":"rangemut"}],"output":{"name":"option"}}],[11,"next_back","","",99,{"inputs":[{"name":"rangemut"}],"output":{"name":"option"}}],[11,"from_iter","","",92,{"inputs":[{"name":"t"}],"output":{"name":"btreemap"}}],[11,"extend","","",92,null],[11,"extend","","",92,null],[11,"hash","","",92,null],[11,"default","","",92,{"inputs":[],"output":{"name":"btreemap"}}],[11,"eq","","",92,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",92,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"option"}}],[11,"cmp","","",92,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"ordering"}}],[11,"fmt","","",92,{"inputs":[{"name":"btreemap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",92,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"v"}}],[11,"iter","","Gets an iterator over the entries of the map, sorted by key.",92,{"inputs":[{"name":"btreemap"}],"output":{"name":"iter"}}],[11,"iter_mut","","Gets a mutable iterator over the entries of the map, sorted by key.",92,{"inputs":[{"name":"btreemap"}],"output":{"name":"itermut"}}],[11,"keys","","Gets an iterator over the keys of the map, in sorted order.",92,{"inputs":[{"name":"btreemap"}],"output":{"name":"keys"}}],[11,"values","","Gets an iterator over the values of the map, in order by key.",92,{"inputs":[{"name":"btreemap"}],"output":{"name":"values"}}],[11,"len","","Returns the number of elements in the map.",92,{"inputs":[{"name":"btreemap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",92,{"inputs":[{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",100,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",100,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry&#39;s key,\nand returns a mutable reference to it.",101,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",102,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",102,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",102,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the OccupiedEntry&#39;s key,\nand returns the entry&#39;s old value.",102,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",102,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"partial_cmp","collections::btree::set","",103,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"option"}}],[11,"lt","","",103,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"le","","",103,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"gt","","",103,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ge","","",103,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"cmp","","",103,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"ordering"}}],[11,"eq","","",103,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ne","","",103,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"hash","","",103,null],[11,"clone","","",103,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"new","","Makes a new BTreeSet with a reasonable choice of B.",103,{"inputs":[],"output":{"name":"btreeset"}}],[11,"iter","","Gets an iterator over the BTreeSet&#39;s contents.",103,{"inputs":[{"name":"btreeset"}],"output":{"name":"iter"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",103,{"inputs":[{"name":"btreeset"},{"name":"bound"},{"name":"bound"}],"output":{"name":"range"}}],[11,"difference","","Visits the values representing the difference, in ascending order.",103,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",103,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visits the values representing the intersection, in ascending order.",103,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"intersection"}}],[11,"union","","Visits the values representing the union, in ascending order.",103,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"union"}}],[11,"len","","Returns the number of elements in the set.",103,{"inputs":[{"name":"btreeset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements.",103,{"inputs":[{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"clear","","Clears the set, removing all values.",103,null],[11,"contains","","Returns `true` if the set contains a value.",103,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",103,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"option"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",103,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",103,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",103,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set.",103,{"inputs":[{"name":"btreeset"},{"name":"t"}],"output":{"name":"bool"}}],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",103,{"inputs":[{"name":"btreeset"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",103,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",103,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"option"}}],[11,"from_iter","","",103,{"inputs":[{"name":"i"}],"output":{"name":"btreeset"}}],[11,"into_iter","","Gets an iterator for moving out the BtreeSet&#39;s contents.",103,{"inputs":[{"name":"btreeset"}],"output":{"name":"intoiter"}}],[11,"extend","","",103,null],[11,"extend","","",103,null],[11,"default","","",103,{"inputs":[],"output":{"name":"btreeset"}}],[11,"fmt","","",103,{"inputs":[{"name":"btreeset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",104,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",104,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",104,null],[11,"next_back","","",104,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"len","","",104,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",105,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",105,null],[11,"next_back","","",105,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"len","","",105,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"clone","","",106,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",106,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next_back","","",106,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",107,{"inputs":[{"name":"difference"}],"output":{"name":"difference"}}],[11,"next","","",107,{"inputs":[{"name":"difference"}],"output":{"name":"option"}}],[11,"size_hint","","",107,null],[11,"clone","","",108,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"symmetricdifference"}}],[11,"next","","",108,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"option"}}],[11,"size_hint","","",108,null],[11,"clone","","",109,{"inputs":[{"name":"intersection"}],"output":{"name":"intersection"}}],[11,"next","","",109,{"inputs":[{"name":"intersection"}],"output":{"name":"option"}}],[11,"size_hint","","",109,null],[11,"clone","","",110,{"inputs":[{"name":"union"}],"output":{"name":"union"}}],[11,"next","","",110,{"inputs":[{"name":"union"}],"output":{"name":"option"}}],[11,"size_hint","","",110,null],[11,"borrow","collections::borrow","",27,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"clone","","",27,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",27,null],[11,"into_owned","","Extracts the owned data.",27,null],[11,"deref","","",27,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"cmp","","",27,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"ordering"}}],[11,"eq","","",27,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",27,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"option"}}],[11,"fmt","","",27,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",27,null],[11,"into_cow","","",27,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"as_ref","","",27,{"inputs":[{"name":"cow"}],"output":{"name":"t"}}],[11,"hash","collections::enum_set","",111,null],[11,"cmp","","",111,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",111,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"option"}}],[11,"lt","","",111,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"le","","",111,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"gt","","",111,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"ge","","",111,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"eq","","",111,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"ne","","",111,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"clone","","",111,{"inputs":[{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"fmt","","",111,{"inputs":[{"name":"enumset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns an empty `EnumSet`.",111,{"inputs":[],"output":{"name":"enumset"}}],[11,"len","","Returns the number of elements in the given `EnumSet`.",111,{"inputs":[{"name":"enumset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `EnumSet` is empty.",111,{"inputs":[{"name":"enumset"}],"output":{"name":"bool"}}],[11,"clear","","",111,null],[11,"is_disjoint","","Returns `false` if the `EnumSet` contains any enum of the given `EnumSet`.",111,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if a given `EnumSet` is included in this `EnumSet`.",111,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if this `EnumSet` is included in the given `EnumSet`.",111,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"bool"}}],[11,"union","","Returns the union of both `EnumSets`.",111,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"intersection","","Returns the intersection of both `EnumSets`.",111,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"insert","","Adds an enum to the `EnumSet`, and returns `true` if it wasn&#39;t there before",111,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"remove","","Removes an enum from the EnumSet",111,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` if an `EnumSet` contains a given enum.",111,{"inputs":[{"name":"enumset"},{"name":"e"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over an `EnumSet`.",111,{"inputs":[{"name":"enumset"}],"output":{"name":"iter"}}],[11,"sub","","",111,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitor","","",111,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitand","","",111,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"bitxor","","",111,{"inputs":[{"name":"enumset"},{"name":"enumset"}],"output":{"name":"enumset"}}],[11,"clone","","",112,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",112,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",112,null],[11,"from_iter","","",111,{"inputs":[{"name":"i"}],"output":{"name":"enumset"}}],[11,"extend","","",111,null],[11,"extend","","",111,null],[11,"clone","collections::linked_list","",113,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"clone","","",114,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"from","","",115,{"inputs":[{"name":"option"}],"output":{"name":"rawlink"}}],[11,"clone","","",115,{"inputs":[{"name":"rawlink"}],"output":{"name":"rawlink"}}],[11,"default","","",116,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",116,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",116,null],[11,"iter","","Provides a forward iterator.",116,{"inputs":[{"name":"linkedlist"}],"output":{"name":"iter"}}],[11,"iter_mut","","Provides a forward iterator with mutable references.",116,{"inputs":[{"name":"linkedlist"}],"output":{"name":"itermut"}}],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",116,{"inputs":[{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of the `LinkedList`.",116,{"inputs":[{"name":"linkedlist"}],"output":{"name":"usize"}}],[11,"clear","","Removes all elements from the `LinkedList`.",116,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",116,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",116,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",116,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",116,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_front","","Adds an element first in the list.",116,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",116,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_back","","Appends an element to the back of a list",116,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",116,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",116,{"inputs":[{"name":"linkedlist"},{"name":"usize"}],"output":{"name":"linkedlist"}}],[11,"front_place","","Returns a place for insertion at the front of the list.",116,{"inputs":[{"name":"linkedlist"}],"output":{"name":"frontplace"}}],[11,"back_place","","Returns a place for insertion at the back of the list.",116,{"inputs":[{"name":"linkedlist"}],"output":{"name":"backplace"}}],[11,"drop","","",116,null],[11,"next","","",113,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",113,null],[11,"next_back","","",113,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",117,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",117,null],[11,"next_back","","",117,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",117,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",117,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",114,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",114,null],[11,"next_back","","",114,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","",116,{"inputs":[{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",116,{"inputs":[{"name":"linkedlist"}],"output":{"name":"intoiter"}}],[11,"extend","","",116,null],[11,"extend","","",116,null],[11,"eq","","",116,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"ne","","",116,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",116,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"cmp","","",116,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"ordering"}}],[11,"clone","","",116,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"fmt","","",116,{"inputs":[{"name":"linkedlist"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",116,null],[11,"make_place","","",118,{"inputs":[{"name":"frontplace"}],"output":{"name":"frontplace"}}],[11,"pointer","","",118,null],[11,"finalize","","",118,null],[11,"make_place","","",119,{"inputs":[{"name":"backplace"}],"output":{"name":"backplace"}}],[11,"pointer","","",119,null],[11,"finalize","","",119,null],[11,"start","core::ops","",31,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"end","","",32,{"inputs":[{"name":"rangeto"}],"output":{"name":"option"}}],[11,"start","","",30,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"end","","",30,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"borrow","collections::vec","",83,null],[11,"borrow_mut","","",83,null],[11,"clone","collections::str","",120,{"inputs":[{"name":"encodeutf16"}],"output":{"name":"encodeutf16"}}],[11,"next","","",120,{"inputs":[{"name":"encodeutf16"}],"output":{"name":"option"}}],[11,"size_hint","","",120,null],[11,"borrow","collections::string","",18,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"fmt","core::str::pattern","",121,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",121,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",121,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",121,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",122,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[11,"into_searcher","","",123,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",122,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",122,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",122,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",124,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",124,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",124,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",124,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",124,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",124,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",124,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",124,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",125,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",125,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",125,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",125,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",125,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",125,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",125,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",125,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",126,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",126,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",126,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",126,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",126,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",126,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",126,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",126,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",127,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",127,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",128,{"inputs":[{"name":"strsearcherimpl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",128,{"inputs":[{"name":"strsearcherimpl"}],"output":{"name":"strsearcherimpl"}}],[11,"fmt","","",129,{"inputs":[{"name":"emptyneedle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",129,{"inputs":[{"name":"emptyneedle"}],"output":{"name":"emptyneedle"}}],[11,"haystack","","",127,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",127,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",127,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",127,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",127,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",130,{"inputs":[{"name":"twowaysearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",130,{"inputs":[{"name":"twowaysearcher"}],"output":{"name":"twowaysearcher"}}],[11,"use_early_reject","","",131,{"inputs":[],"output":{"name":"bool"}}],[11,"rejecting","","",131,null],[11,"matching","","",131,null],[11,"use_early_reject","","",132,{"inputs":[],"output":{"name":"bool"}}],[11,"rejecting","","",132,null],[11,"matching","","",132,null],[11,"cmp","collections::string","",18,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",18,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"option"}}],[11,"lt","","",18,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"le","","",18,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"gt","","",18,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ge","","",18,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"fmt","","",133,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",134,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new empty `String`.",18,{"inputs":[],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",18,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",18,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",18,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `Err`\nif `v` contains any invalid data.",18,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",18,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",18,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.",18,{"inputs":[{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",18,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"as_str","","Extracts a string slice containing the entire string.",18,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"as_mut_str","","Extracts a string slice containing the entire string.",18,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"push_str","","Appends a given string slice onto the end of this `String`.",18,null],[11,"capacity","","Returns this `String`&#39;s capacity, in bytes.",18,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"reserve","","Ensures that this `String`&#39;s capacity is at least `additional` bytes\nlarger than its length.",18,null],[11,"reserve_exact","","Ensures that this `String`&#39;s capacity is `additional` bytes\nlarger than its length.",18,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",18,null],[11,"push","","Appends the given `char` to the end of this `String`.",18,null],[11,"as_bytes","","Returns a byte slice of this `String`&#39;s contents.",18,null],[11,"truncate","","Shortens this `String` to the specified length.",18,null],[11,"pop","","Removes the last character from the string buffer and returns it.",18,{"inputs":[{"name":"string"}],"output":{"name":"option"}}],[11,"remove","","Removes a `char` from this `String` at a byte position and returns it.",18,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"char"}}],[11,"insert","","Inserts a character into this `String` at a byte position.",18,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",18,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of this `String`, in bytes.",18,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",18,{"inputs":[{"name":"string"}],"output":{"name":"bool"}}],[11,"clear","","Truncates this `String`, removing all contents.",18,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars.",18,{"inputs":[{"name":"string"},{"name":"r"}],"output":{"name":"drain"}}],[11,"into_boxed_str","","Converts this `String` into a `Box&lt;str&gt;`.",18,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",133,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"vec"}}],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",133,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"utf8error"}}],[11,"fmt","","",133,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",134,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"clone_from","","",18,null],[11,"from_iter","","",18,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",18,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",18,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",18,null],[11,"extend","","",18,null],[11,"extend","","",18,null],[11,"extend","","",18,null],[11,"eq","","",18,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",18,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",18,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",27,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",27,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",27,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",18,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"string"}}],[11,"fmt","","",18,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",18,null],[11,"add","","",18,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"index","","",18,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index","","",18,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",18,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",18,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index_mut","","",18,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index_mut","","",18,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index_mut","","",18,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index_mut","","",18,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"deref","","",18,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"deref_mut","","",18,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"from_str","","",18,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",135,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"fmt","","",135,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",135,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",135,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"as_ref","","",18,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"as_ref","","",18,null],[11,"from","","",18,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",27,{"inputs":[{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",27,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",18,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"into_cow","","",18,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"write_str","","",18,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",18,{"inputs":[{"name":"string"},{"name":"char"}],"output":{"name":"result"}}],[11,"drop","","",136,null],[11,"next","","",136,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",136,null],[11,"next_back","","",136,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"clone","collections::vec","",83,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"clone_from","","",83,null],[11,"hash","","",83,null],[11,"index","","",83,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",83,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",83,null],[11,"index","","",83,null],[11,"index","","",83,null],[11,"index","","",83,null],[11,"index_mut","","",83,null],[11,"index_mut","","",83,null],[11,"index_mut","","",83,null],[11,"index_mut","","",83,null],[11,"deref","","",83,null],[11,"deref_mut","","",83,null],[11,"from_iter","","",83,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",83,{"inputs":[{"name":"vec"}],"output":{"name":"intoiter"}}],[11,"extend","","",83,null],[11,"extend","","",83,null],[11,"eq","","",83,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","collections::borrow","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"eq","","",27,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","collections::vec","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"partial_cmp","","",83,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"option"}}],[11,"cmp","","",83,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"ordering"}}],[11,"drop","","",83,null],[11,"default","","",83,{"inputs":[],"output":{"name":"vec"}}],[11,"fmt","","",83,{"inputs":[{"name":"vec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",83,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_mut","","",83,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_ref","","",83,null],[11,"as_mut","","",83,null],[11,"from","","",83,null],[11,"from","","",83,{"inputs":[{"name":"str"}],"output":{"name":"vec"}}],[11,"from","collections::borrow","",27,null],[11,"from","","",27,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"from_iter","","",27,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"into_cow","collections::vec","",83,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"next","","",137,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",137,null],[11,"count","","",137,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next_back","","",137,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"clone","","",137,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"drop","","",137,null],[11,"next","","",138,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",138,null],[11,"next_back","","",138,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"drop","","",138,null],[11,"clone","collections::vec_deque","",139,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"drop","","",139,null],[11,"default","","",139,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",139,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",139,{"inputs":[{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",139,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",139,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap","","Swaps elements at indices `i` and `j`.",139,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",139,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",139,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",139,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",139,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",139,null],[11,"iter","","Returns a front-to-back iterator.",139,{"inputs":[{"name":"vecdeque"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",139,{"inputs":[{"name":"vecdeque"}],"output":{"name":"itermut"}}],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",139,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",139,null],[11,"len","","Returns the number of elements in the `VecDeque`.",139,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the buffer contains no elements",139,{"inputs":[{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"drain","","Create a draining iterator that removes the specified range in the\n`VecDeque` and yields the removed items.",139,{"inputs":[{"name":"vecdeque"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the buffer, removing all values.",139,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",139,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",139,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",139,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",139,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",139,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"push_front","","Inserts an element first in the sequence.",139,null],[11,"push_back","","Appends an element to the back of a buffer",139,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",139,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",139,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",139,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",139,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",139,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"split_off","","Splits the collection into two at the given index.",139,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",139,null],[11,"retain","","Retains only the elements specified by the predicate.",139,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",139,null],[11,"clone","","",140,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",140,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",140,null],[11,"next_back","","",140,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",141,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",141,null],[11,"next_back","","",141,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",142,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",142,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",142,null],[11,"next_back","","",142,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",143,null],[11,"next","","",143,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",143,null],[11,"next_back","","",143,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"eq","","",139,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",139,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"cmp","","",139,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"ordering"}}],[11,"hash","","",139,null],[11,"index","","",139,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"index_mut","","",139,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"from_iter","","",139,{"inputs":[{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",139,{"inputs":[{"name":"vecdeque"}],"output":{"name":"intoiter"}}],[11,"extend","","",139,null],[11,"extend","","",139,null],[11,"fmt","","",139,{"inputs":[{"name":"vecdeque"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","collections","",144,{"inputs":[{"name":"bound"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"ne","","",144,{"inputs":[{"name":"bound"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"hash","","",144,null],[11,"fmt","","",144,{"inputs":[{"name":"bound"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",144,{"inputs":[{"name":"bound"}],"output":{"name":"bound"}}],[11,"clone","alloc::boxed","",145,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"exchangeheapsingleton"}}],[11,"pointer","","",146,null],[11,"make_place","","",146,{"inputs":[],"output":{"name":"intermediatebox"}}],[11,"finalize","","",146,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"finalize","","",147,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",145,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"intermediatebox"}}],[11,"drop","","",146,null],[11,"new","","Allocates memory on the heap and then places `x` into it.",147,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",147,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",147,null],[11,"default","","",147,{"inputs":[],"output":{"name":"box"}}],[11,"default","","",147,{"inputs":[],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box&#39;s contents.",147,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone_from","","Copies `source`&#39;s contents into `self` without creating a new allocation.",147,null],[11,"clone","","",147,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"eq","","",147,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ne","","",147,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",147,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"option"}}],[11,"lt","","",147,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"le","","",147,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ge","","",147,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"gt","","",147,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"cmp","","",147,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"ordering"}}],[11,"hash","","",147,null],[11,"from","","",147,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",147,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",147,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"fmt","","",147,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",147,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",147,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",147,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"deref_mut","","",147,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"next","","",147,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"size_hint","","",147,null],[11,"next_back","","",147,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"call_once","","",147,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"call_once","","",147,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"clone","","",147,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"borrow","","",147,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"borrow_mut","","",147,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"as_ref","","",147,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"as_mut","","",147,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"deref","hyper::header","",82,{"inputs":[{"name":"accept"}],"output":{"name":"vec"}}],[11,"deref_mut","","",82,{"inputs":[{"name":"accept"}],"output":{"name":"vec"}}],[11,"header_name","","",82,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",82,null],[11,"fmt_header","","",82,{"inputs":[{"name":"accept"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",82,{"inputs":[{"name":"accept"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",148,{"inputs":[{"name":"accesscontrolallowcredentials"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",148,{"inputs":[{"name":"accesscontrolallowcredentials"},{"name":"accesscontrolallowcredentials"}],"output":{"name":"bool"}}],[11,"ne","","",148,{"inputs":[{"name":"accesscontrolallowcredentials"},{"name":"accesscontrolallowcredentials"}],"output":{"name":"bool"}}],[11,"clone","","",148,{"inputs":[{"name":"accesscontrolallowcredentials"}],"output":{"name":"accesscontrolallowcredentials"}}],[11,"header_name","","",148,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",148,null],[11,"fmt_header","","",148,{"inputs":[{"name":"accesscontrolallowcredentials"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",148,{"inputs":[{"name":"accesscontrolallowcredentials"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",149,{"inputs":[{"name":"accesscontrolallowheaders"},{"name":"accesscontrolallowheaders"}],"output":{"name":"bool"}}],[11,"ne","","",149,{"inputs":[{"name":"accesscontrolallowheaders"},{"name":"accesscontrolallowheaders"}],"output":{"name":"bool"}}],[11,"fmt","","",149,{"inputs":[{"name":"accesscontrolallowheaders"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",149,{"inputs":[{"name":"accesscontrolallowheaders"}],"output":{"name":"accesscontrolallowheaders"}}],[11,"deref","","",149,{"inputs":[{"name":"accesscontrolallowheaders"}],"output":{"name":"vec"}}],[11,"deref_mut","","",149,{"inputs":[{"name":"accesscontrolallowheaders"}],"output":{"name":"vec"}}],[11,"header_name","","",149,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",149,null],[11,"fmt_header","","",149,{"inputs":[{"name":"accesscontrolallowheaders"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",149,{"inputs":[{"name":"accesscontrolallowheaders"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",150,{"inputs":[{"name":"accesscontrolallowmethods"},{"name":"accesscontrolallowmethods"}],"output":{"name":"bool"}}],[11,"ne","","",150,{"inputs":[{"name":"accesscontrolallowmethods"},{"name":"accesscontrolallowmethods"}],"output":{"name":"bool"}}],[11,"fmt","","",150,{"inputs":[{"name":"accesscontrolallowmethods"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",150,{"inputs":[{"name":"accesscontrolallowmethods"}],"output":{"name":"accesscontrolallowmethods"}}],[11,"deref","","",150,{"inputs":[{"name":"accesscontrolallowmethods"}],"output":{"name":"vec"}}],[11,"deref_mut","","",150,{"inputs":[{"name":"accesscontrolallowmethods"}],"output":{"name":"vec"}}],[11,"header_name","","",150,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",150,null],[11,"fmt_header","","",150,{"inputs":[{"name":"accesscontrolallowmethods"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",150,{"inputs":[{"name":"accesscontrolallowmethods"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",65,{"inputs":[{"name":"accesscontrolalloworigin"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",65,{"inputs":[{"name":"accesscontrolalloworigin"},{"name":"accesscontrolalloworigin"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"accesscontrolalloworigin"},{"name":"accesscontrolalloworigin"}],"output":{"name":"bool"}}],[11,"clone","","",65,{"inputs":[{"name":"accesscontrolalloworigin"}],"output":{"name":"accesscontrolalloworigin"}}],[11,"header_name","","",65,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",65,null],[11,"fmt_header","","",65,{"inputs":[{"name":"accesscontrolalloworigin"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",65,{"inputs":[{"name":"accesscontrolalloworigin"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",151,{"inputs":[{"name":"accesscontrolexposeheaders"},{"name":"accesscontrolexposeheaders"}],"output":{"name":"bool"}}],[11,"ne","","",151,{"inputs":[{"name":"accesscontrolexposeheaders"},{"name":"accesscontrolexposeheaders"}],"output":{"name":"bool"}}],[11,"fmt","","",151,{"inputs":[{"name":"accesscontrolexposeheaders"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",151,{"inputs":[{"name":"accesscontrolexposeheaders"}],"output":{"name":"accesscontrolexposeheaders"}}],[11,"deref","","",151,{"inputs":[{"name":"accesscontrolexposeheaders"}],"output":{"name":"vec"}}],[11,"deref_mut","","",151,{"inputs":[{"name":"accesscontrolexposeheaders"}],"output":{"name":"vec"}}],[11,"header_name","","",151,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",151,null],[11,"fmt_header","","",151,{"inputs":[{"name":"accesscontrolexposeheaders"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",151,{"inputs":[{"name":"accesscontrolexposeheaders"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",152,{"inputs":[{"name":"accesscontrolmaxage"},{"name":"accesscontrolmaxage"}],"output":{"name":"bool"}}],[11,"ne","","",152,{"inputs":[{"name":"accesscontrolmaxage"},{"name":"accesscontrolmaxage"}],"output":{"name":"bool"}}],[11,"fmt","","",152,{"inputs":[{"name":"accesscontrolmaxage"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",152,{"inputs":[{"name":"accesscontrolmaxage"}],"output":{"name":"accesscontrolmaxage"}}],[11,"deref","","",152,{"inputs":[{"name":"accesscontrolmaxage"}],"output":{"name":"u32"}}],[11,"deref_mut","","",152,{"inputs":[{"name":"accesscontrolmaxage"}],"output":{"name":"u32"}}],[11,"header_name","","",152,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",152,null],[11,"fmt_header","","",152,{"inputs":[{"name":"accesscontrolmaxage"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",152,{"inputs":[{"name":"accesscontrolmaxage"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",153,{"inputs":[{"name":"accesscontrolrequestheaders"},{"name":"accesscontrolrequestheaders"}],"output":{"name":"bool"}}],[11,"ne","","",153,{"inputs":[{"name":"accesscontrolrequestheaders"},{"name":"accesscontrolrequestheaders"}],"output":{"name":"bool"}}],[11,"fmt","","",153,{"inputs":[{"name":"accesscontrolrequestheaders"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",153,{"inputs":[{"name":"accesscontrolrequestheaders"}],"output":{"name":"accesscontrolrequestheaders"}}],[11,"deref","","",153,{"inputs":[{"name":"accesscontrolrequestheaders"}],"output":{"name":"vec"}}],[11,"deref_mut","","",153,{"inputs":[{"name":"accesscontrolrequestheaders"}],"output":{"name":"vec"}}],[11,"header_name","","",153,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",153,null],[11,"fmt_header","","",153,{"inputs":[{"name":"accesscontrolrequestheaders"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",153,{"inputs":[{"name":"accesscontrolrequestheaders"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",154,{"inputs":[{"name":"accesscontrolrequestmethod"},{"name":"accesscontrolrequestmethod"}],"output":{"name":"bool"}}],[11,"ne","","",154,{"inputs":[{"name":"accesscontrolrequestmethod"},{"name":"accesscontrolrequestmethod"}],"output":{"name":"bool"}}],[11,"fmt","","",154,{"inputs":[{"name":"accesscontrolrequestmethod"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",154,{"inputs":[{"name":"accesscontrolrequestmethod"}],"output":{"name":"accesscontrolrequestmethod"}}],[11,"deref","","",154,{"inputs":[{"name":"accesscontrolrequestmethod"}],"output":{"name":"method"}}],[11,"deref_mut","","",154,{"inputs":[{"name":"accesscontrolrequestmethod"}],"output":{"name":"method"}}],[11,"header_name","","",154,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",154,null],[11,"fmt_header","","",154,{"inputs":[{"name":"accesscontrolrequestmethod"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"accesscontrolrequestmethod"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",155,{"inputs":[{"name":"acceptcharset"},{"name":"acceptcharset"}],"output":{"name":"bool"}}],[11,"ne","","",155,{"inputs":[{"name":"acceptcharset"},{"name":"acceptcharset"}],"output":{"name":"bool"}}],[11,"fmt","","",155,{"inputs":[{"name":"acceptcharset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",155,{"inputs":[{"name":"acceptcharset"}],"output":{"name":"acceptcharset"}}],[11,"deref","","",155,{"inputs":[{"name":"acceptcharset"}],"output":{"name":"vec"}}],[11,"deref_mut","","",155,{"inputs":[{"name":"acceptcharset"}],"output":{"name":"vec"}}],[11,"header_name","","",155,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",155,null],[11,"fmt_header","","",155,{"inputs":[{"name":"acceptcharset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",155,{"inputs":[{"name":"acceptcharset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",156,{"inputs":[{"name":"acceptencoding"},{"name":"acceptencoding"}],"output":{"name":"bool"}}],[11,"ne","","",156,{"inputs":[{"name":"acceptencoding"},{"name":"acceptencoding"}],"output":{"name":"bool"}}],[11,"fmt","","",156,{"inputs":[{"name":"acceptencoding"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",156,{"inputs":[{"name":"acceptencoding"}],"output":{"name":"acceptencoding"}}],[11,"deref","","",156,{"inputs":[{"name":"acceptencoding"}],"output":{"name":"vec"}}],[11,"deref_mut","","",156,{"inputs":[{"name":"acceptencoding"}],"output":{"name":"vec"}}],[11,"header_name","","",156,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",156,null],[11,"fmt_header","","",156,{"inputs":[{"name":"acceptencoding"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",156,{"inputs":[{"name":"acceptencoding"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",157,{"inputs":[{"name":"acceptlanguage"},{"name":"acceptlanguage"}],"output":{"name":"bool"}}],[11,"ne","","",157,{"inputs":[{"name":"acceptlanguage"},{"name":"acceptlanguage"}],"output":{"name":"bool"}}],[11,"fmt","","",157,{"inputs":[{"name":"acceptlanguage"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",157,{"inputs":[{"name":"acceptlanguage"}],"output":{"name":"acceptlanguage"}}],[11,"deref","","",157,{"inputs":[{"name":"acceptlanguage"}],"output":{"name":"vec"}}],[11,"deref_mut","","",157,{"inputs":[{"name":"acceptlanguage"}],"output":{"name":"vec"}}],[11,"header_name","","",157,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",157,null],[11,"fmt_header","","",157,{"inputs":[{"name":"acceptlanguage"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",157,{"inputs":[{"name":"acceptlanguage"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",158,{"inputs":[{"name":"acceptranges"},{"name":"acceptranges"}],"output":{"name":"bool"}}],[11,"ne","","",158,{"inputs":[{"name":"acceptranges"},{"name":"acceptranges"}],"output":{"name":"bool"}}],[11,"fmt","","",158,{"inputs":[{"name":"acceptranges"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",158,{"inputs":[{"name":"acceptranges"}],"output":{"name":"acceptranges"}}],[11,"deref","","",158,{"inputs":[{"name":"acceptranges"}],"output":{"name":"vec"}}],[11,"deref_mut","","",158,{"inputs":[{"name":"acceptranges"}],"output":{"name":"vec"}}],[11,"header_name","","",158,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",158,null],[11,"fmt_header","","",158,{"inputs":[{"name":"acceptranges"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",158,{"inputs":[{"name":"acceptranges"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",66,{"inputs":[{"name":"rangeunit"},{"name":"rangeunit"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"rangeunit"},{"name":"rangeunit"}],"output":{"name":"bool"}}],[11,"fmt","","",66,{"inputs":[{"name":"rangeunit"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",66,{"inputs":[{"name":"rangeunit"}],"output":{"name":"rangeunit"}}],[11,"from_str","","",66,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",66,{"inputs":[{"name":"rangeunit"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",159,{"inputs":[{"name":"allow"},{"name":"allow"}],"output":{"name":"bool"}}],[11,"ne","","",159,{"inputs":[{"name":"allow"},{"name":"allow"}],"output":{"name":"bool"}}],[11,"fmt","","",159,{"inputs":[{"name":"allow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",159,{"inputs":[{"name":"allow"}],"output":{"name":"allow"}}],[11,"deref","","",159,{"inputs":[{"name":"allow"}],"output":{"name":"vec"}}],[11,"deref_mut","","",159,{"inputs":[{"name":"allow"}],"output":{"name":"vec"}}],[11,"header_name","","",159,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",159,null],[11,"fmt_header","","",159,{"inputs":[{"name":"allow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",159,{"inputs":[{"name":"allow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",160,{"inputs":[{"name":"authorization"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",160,{"inputs":[{"name":"authorization"},{"name":"authorization"}],"output":{"name":"bool"}}],[11,"ne","","",160,{"inputs":[{"name":"authorization"},{"name":"authorization"}],"output":{"name":"bool"}}],[11,"clone","","",160,{"inputs":[{"name":"authorization"}],"output":{"name":"authorization"}}],[11,"deref","","",160,{"inputs":[{"name":"authorization"}],"output":{"name":"s"}}],[11,"deref_mut","","",160,{"inputs":[{"name":"authorization"}],"output":{"name":"s"}}],[11,"header_name","","",160,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",160,null],[11,"fmt_header","","",160,{"inputs":[{"name":"authorization"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"scheme","collections::string","",18,{"inputs":[],"output":{"name":"option"}}],[11,"fmt_scheme","","",18,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","hyper::header","",57,{"inputs":[{"name":"basic"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",57,{"inputs":[{"name":"basic"},{"name":"basic"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"basic"},{"name":"basic"}],"output":{"name":"bool"}}],[11,"clone","","",57,{"inputs":[{"name":"basic"}],"output":{"name":"basic"}}],[11,"scheme","","",57,{"inputs":[],"output":{"name":"option"}}],[11,"fmt_scheme","","",57,{"inputs":[{"name":"basic"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",57,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",58,{"inputs":[{"name":"bearer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",58,{"inputs":[{"name":"bearer"},{"name":"bearer"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"bearer"},{"name":"bearer"}],"output":{"name":"bool"}}],[11,"clone","","",58,{"inputs":[{"name":"bearer"}],"output":{"name":"bearer"}}],[11,"scheme","","",58,{"inputs":[],"output":{"name":"option"}}],[11,"fmt_scheme","","",58,{"inputs":[{"name":"bearer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",58,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",161,{"inputs":[{"name":"cachecontrol"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",161,{"inputs":[{"name":"cachecontrol"}],"output":{"name":"cachecontrol"}}],[11,"eq","","",161,{"inputs":[{"name":"cachecontrol"},{"name":"cachecontrol"}],"output":{"name":"bool"}}],[11,"ne","","",161,{"inputs":[{"name":"cachecontrol"},{"name":"cachecontrol"}],"output":{"name":"bool"}}],[11,"deref","","",161,{"inputs":[{"name":"cachecontrol"}],"output":{"name":"vec"}}],[11,"deref_mut","","",161,{"inputs":[{"name":"cachecontrol"}],"output":{"name":"vec"}}],[11,"header_name","","",161,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",161,null],[11,"fmt_header","","",161,{"inputs":[{"name":"cachecontrol"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",67,{"inputs":[{"name":"cachedirective"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"cachedirective"}],"output":{"name":"cachedirective"}}],[11,"eq","","",67,{"inputs":[{"name":"cachedirective"},{"name":"cachedirective"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"cachedirective"},{"name":"cachedirective"}],"output":{"name":"bool"}}],[11,"fmt","","",67,{"inputs":[{"name":"cachedirective"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",67,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",162,{"inputs":[{"name":"cookie"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",162,{"inputs":[{"name":"cookie"},{"name":"cookie"}],"output":{"name":"bool"}}],[11,"ne","","",162,{"inputs":[{"name":"cookie"},{"name":"cookie"}],"output":{"name":"bool"}}],[11,"clone","","",162,{"inputs":[{"name":"cookie"}],"output":{"name":"cookie"}}],[11,"deref","","",162,{"inputs":[{"name":"cookie"}],"output":{"name":"vec"}}],[11,"deref_mut","","",162,{"inputs":[{"name":"cookie"}],"output":{"name":"vec"}}],[11,"header_name","","",162,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",162,null],[11,"fmt_header","","",162,{"inputs":[{"name":"cookie"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_cookie_jar","","This method can be used to create CookieJar that can be used\nto manipulate cookies and create a corresponding `SetCookie` header afterwards.",162,null],[11,"from_cookie_jar","","Extracts all cookies from `CookieJar` and creates Cookie header.\nUseful for clients.",162,{"inputs":[{"name":"cookiejar"}],"output":{"name":"cookie"}}],[11,"fmt","","",68,{"inputs":[{"name":"connectionoption"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",68,{"inputs":[{"name":"connectionoption"},{"name":"connectionoption"}],"output":{"name":"bool"}}],[11,"ne","","",68,{"inputs":[{"name":"connectionoption"},{"name":"connectionoption"}],"output":{"name":"bool"}}],[11,"clone","","",68,{"inputs":[{"name":"connectionoption"}],"output":{"name":"connectionoption"}}],[11,"from_str","","",68,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",68,{"inputs":[{"name":"connectionoption"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",163,{"inputs":[{"name":"connection"},{"name":"connection"}],"output":{"name":"bool"}}],[11,"ne","","",163,{"inputs":[{"name":"connection"},{"name":"connection"}],"output":{"name":"bool"}}],[11,"fmt","","",163,{"inputs":[{"name":"connection"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",163,{"inputs":[{"name":"connection"}],"output":{"name":"connection"}}],[11,"deref","","",163,{"inputs":[{"name":"connection"}],"output":{"name":"vec"}}],[11,"deref_mut","","",163,{"inputs":[{"name":"connection"}],"output":{"name":"vec"}}],[11,"header_name","","",163,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",163,null],[11,"fmt_header","","",163,{"inputs":[{"name":"connection"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",163,{"inputs":[{"name":"connection"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"close","","A constructor to easily create a `Connection: close` header.",163,{"inputs":[],"output":{"name":"connection"}}],[11,"keep_alive","","A constructor to easily create a `Connection: keep-alive` header.",163,{"inputs":[],"output":{"name":"connection"}}],[11,"eq","","",69,{"inputs":[{"name":"dispositiontype"},{"name":"dispositiontype"}],"output":{"name":"bool"}}],[11,"ne","","",69,{"inputs":[{"name":"dispositiontype"},{"name":"dispositiontype"}],"output":{"name":"bool"}}],[11,"fmt","","",69,{"inputs":[{"name":"dispositiontype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",69,{"inputs":[{"name":"dispositiontype"}],"output":{"name":"dispositiontype"}}],[11,"eq","","",70,{"inputs":[{"name":"dispositionparam"},{"name":"dispositionparam"}],"output":{"name":"bool"}}],[11,"ne","","",70,{"inputs":[{"name":"dispositionparam"},{"name":"dispositionparam"}],"output":{"name":"bool"}}],[11,"fmt","","",70,{"inputs":[{"name":"dispositionparam"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",70,{"inputs":[{"name":"dispositionparam"}],"output":{"name":"dispositionparam"}}],[11,"eq","","",59,{"inputs":[{"name":"contentdisposition"},{"name":"contentdisposition"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"contentdisposition"},{"name":"contentdisposition"}],"output":{"name":"bool"}}],[11,"fmt","","",59,{"inputs":[{"name":"contentdisposition"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"contentdisposition"}],"output":{"name":"contentdisposition"}}],[11,"header_name","","",59,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",59,null],[11,"fmt_header","","",59,{"inputs":[{"name":"contentdisposition"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"contentdisposition"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",164,{"inputs":[{"name":"contentencoding"},{"name":"contentencoding"}],"output":{"name":"bool"}}],[11,"ne","","",164,{"inputs":[{"name":"contentencoding"},{"name":"contentencoding"}],"output":{"name":"bool"}}],[11,"fmt","","",164,{"inputs":[{"name":"contentencoding"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",164,{"inputs":[{"name":"contentencoding"}],"output":{"name":"contentencoding"}}],[11,"deref","","",164,{"inputs":[{"name":"contentencoding"}],"output":{"name":"vec"}}],[11,"deref_mut","","",164,{"inputs":[{"name":"contentencoding"}],"output":{"name":"vec"}}],[11,"header_name","","",164,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",164,null],[11,"fmt_header","","",164,{"inputs":[{"name":"contentencoding"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",164,{"inputs":[{"name":"contentencoding"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",165,{"inputs":[{"name":"contentlanguage"},{"name":"contentlanguage"}],"output":{"name":"bool"}}],[11,"ne","","",165,{"inputs":[{"name":"contentlanguage"},{"name":"contentlanguage"}],"output":{"name":"bool"}}],[11,"fmt","","",165,{"inputs":[{"name":"contentlanguage"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",165,{"inputs":[{"name":"contentlanguage"}],"output":{"name":"contentlanguage"}}],[11,"deref","","",165,{"inputs":[{"name":"contentlanguage"}],"output":{"name":"vec"}}],[11,"deref_mut","","",165,{"inputs":[{"name":"contentlanguage"}],"output":{"name":"vec"}}],[11,"header_name","","",165,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",165,null],[11,"fmt_header","","",165,{"inputs":[{"name":"contentlanguage"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",165,{"inputs":[{"name":"contentlanguage"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",166,{"inputs":[{"name":"contentlength"},{"name":"contentlength"}],"output":{"name":"bool"}}],[11,"ne","","",166,{"inputs":[{"name":"contentlength"},{"name":"contentlength"}],"output":{"name":"bool"}}],[11,"fmt","","",166,{"inputs":[{"name":"contentlength"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",166,{"inputs":[{"name":"contentlength"}],"output":{"name":"contentlength"}}],[11,"header_name","","",166,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",166,null],[11,"fmt_header","","",166,{"inputs":[{"name":"contentlength"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",166,{"inputs":[{"name":"contentlength"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",166,{"inputs":[{"name":"contentlength"}],"output":{"name":"u64"}}],[11,"deref_mut","","",166,{"inputs":[{"name":"contentlength"}],"output":{"name":"u64"}}],[11,"eq","","",167,{"inputs":[{"name":"contentrange"},{"name":"contentrange"}],"output":{"name":"bool"}}],[11,"ne","","",167,{"inputs":[{"name":"contentrange"},{"name":"contentrange"}],"output":{"name":"bool"}}],[11,"fmt","","",167,{"inputs":[{"name":"contentrange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",167,{"inputs":[{"name":"contentrange"}],"output":{"name":"contentrange"}}],[11,"deref","","",167,{"inputs":[{"name":"contentrange"}],"output":{"name":"contentrangespec"}}],[11,"deref_mut","","",167,{"inputs":[{"name":"contentrange"}],"output":{"name":"contentrangespec"}}],[11,"header_name","","",167,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",167,null],[11,"fmt_header","","",167,{"inputs":[{"name":"contentrange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",167,{"inputs":[{"name":"contentrange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",71,{"inputs":[{"name":"contentrangespec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",71,{"inputs":[{"name":"contentrangespec"}],"output":{"name":"contentrangespec"}}],[11,"eq","","",71,{"inputs":[{"name":"contentrangespec"},{"name":"contentrangespec"}],"output":{"name":"bool"}}],[11,"ne","","",71,{"inputs":[{"name":"contentrangespec"},{"name":"contentrangespec"}],"output":{"name":"bool"}}],[11,"from_str","","",71,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",71,{"inputs":[{"name":"contentrangespec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",168,{"inputs":[{"name":"contenttype"},{"name":"contenttype"}],"output":{"name":"bool"}}],[11,"ne","","",168,{"inputs":[{"name":"contenttype"},{"name":"contenttype"}],"output":{"name":"bool"}}],[11,"fmt","","",168,{"inputs":[{"name":"contenttype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",168,{"inputs":[{"name":"contenttype"}],"output":{"name":"contenttype"}}],[11,"get_param","mime","",169,{"inputs":[{"name":"mime"},{"name":"a"}],"output":{"name":"option"}}],[11,"hash","","",169,null],[11,"fmt","","",169,{"inputs":[{"name":"mime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",169,{"inputs":[{"name":"mime"}],"output":{"name":"mime"}}],[11,"eq","","",169,{"inputs":[{"name":"mime"},{"name":"mime"}],"output":{"name":"bool"}}],[11,"hash","","",170,null],[11,"fmt","","",170,{"inputs":[{"name":"toplevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",170,{"inputs":[{"name":"toplevel"}],"output":{"name":"toplevel"}}],[11,"as_str","","",170,{"inputs":[{"name":"toplevel"}],"output":{"name":"str"}}],[11,"deref","","",170,{"inputs":[{"name":"toplevel"}],"output":{"name":"str"}}],[11,"eq","","",170,{"inputs":[{"name":"toplevel"},{"name":"toplevel"}],"output":{"name":"bool"}}],[11,"eq","","",170,{"inputs":[{"name":"toplevel"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",170,{"inputs":[{"name":"toplevel"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",170,{"inputs":[{"name":"toplevel"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",18,{"inputs":[{"name":"string"},{"name":"toplevel"}],"output":{"name":"bool"}}],[11,"fmt","mime","",170,{"inputs":[{"name":"toplevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",170,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"hash","","",171,null],[11,"fmt","","",171,{"inputs":[{"name":"sublevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",171,{"inputs":[{"name":"sublevel"}],"output":{"name":"sublevel"}}],[11,"as_str","","",171,{"inputs":[{"name":"sublevel"}],"output":{"name":"str"}}],[11,"deref","","",171,{"inputs":[{"name":"sublevel"}],"output":{"name":"str"}}],[11,"eq","","",171,{"inputs":[{"name":"sublevel"},{"name":"sublevel"}],"output":{"name":"bool"}}],[11,"eq","","",171,{"inputs":[{"name":"sublevel"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",171,{"inputs":[{"name":"sublevel"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",171,{"inputs":[{"name":"sublevel"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",18,{"inputs":[{"name":"string"},{"name":"sublevel"}],"output":{"name":"bool"}}],[11,"fmt","mime","",171,{"inputs":[{"name":"sublevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",171,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"hash","","",172,null],[11,"fmt","","",172,{"inputs":[{"name":"attr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",172,{"inputs":[{"name":"attr"}],"output":{"name":"attr"}}],[11,"as_str","","",172,{"inputs":[{"name":"attr"}],"output":{"name":"str"}}],[11,"deref","","",172,{"inputs":[{"name":"attr"}],"output":{"name":"str"}}],[11,"eq","","",172,{"inputs":[{"name":"attr"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"eq","","",172,{"inputs":[{"name":"attr"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",172,{"inputs":[{"name":"attr"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",172,{"inputs":[{"name":"attr"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",18,{"inputs":[{"name":"string"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"fmt","mime","",172,{"inputs":[{"name":"attr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",172,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"hash","","",173,null],[11,"fmt","","",173,{"inputs":[{"name":"value"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",173,{"inputs":[{"name":"value"}],"output":{"name":"value"}}],[11,"as_str","","",173,{"inputs":[{"name":"value"}],"output":{"name":"str"}}],[11,"deref","","",173,{"inputs":[{"name":"value"}],"output":{"name":"str"}}],[11,"eq","","",173,{"inputs":[{"name":"value"},{"name":"value"}],"output":{"name":"bool"}}],[11,"eq","","",173,{"inputs":[{"name":"value"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",173,{"inputs":[{"name":"value"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",173,{"inputs":[{"name":"value"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",18,{"inputs":[{"name":"string"},{"name":"value"}],"output":{"name":"bool"}}],[11,"fmt","mime","",173,{"inputs":[{"name":"value"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",173,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",169,{"inputs":[{"name":"mime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",169,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"deref","hyper::header","",168,{"inputs":[{"name":"contenttype"}],"output":{"name":"mime"}}],[11,"deref_mut","","",168,{"inputs":[{"name":"contenttype"}],"output":{"name":"mime"}}],[11,"header_name","","",168,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",168,null],[11,"fmt_header","","",168,{"inputs":[{"name":"contenttype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",168,{"inputs":[{"name":"contenttype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"json","","A constructor  to easily create a `Content-Type: application/json` header.",168,{"inputs":[],"output":{"name":"contenttype"}}],[11,"plaintext","","A constructor  to easily create a `Content-Type: text/plain; charset=utf-8` header.",168,{"inputs":[],"output":{"name":"contenttype"}}],[11,"html","","A constructor  to easily create a `Content-Type: text/html; charset=utf-8` header.",168,{"inputs":[],"output":{"name":"contenttype"}}],[11,"form_url_encoded","","A constructor  to easily create a `Content-Type: application/www-form-url-encoded` header.",168,{"inputs":[],"output":{"name":"contenttype"}}],[11,"jpeg","","A constructor  to easily create a `Content-Type: image/jpeg` header.",168,{"inputs":[],"output":{"name":"contenttype"}}],[11,"png","","A constructor  to easily create a `Content-Type: image/png` header.",168,{"inputs":[],"output":{"name":"contenttype"}}],[11,"eq","","",174,{"inputs":[{"name":"date"},{"name":"date"}],"output":{"name":"bool"}}],[11,"ne","","",174,{"inputs":[{"name":"date"},{"name":"date"}],"output":{"name":"bool"}}],[11,"fmt","","",174,{"inputs":[{"name":"date"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",174,{"inputs":[{"name":"date"}],"output":{"name":"date"}}],[11,"deref","","",174,{"inputs":[{"name":"date"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",174,{"inputs":[{"name":"date"}],"output":{"name":"httpdate"}}],[11,"header_name","","",174,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",174,null],[11,"fmt_header","","",174,{"inputs":[{"name":"date"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",174,{"inputs":[{"name":"date"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",175,{"inputs":[{"name":"etag"},{"name":"etag"}],"output":{"name":"bool"}}],[11,"ne","","",175,{"inputs":[{"name":"etag"},{"name":"etag"}],"output":{"name":"bool"}}],[11,"fmt","","",175,{"inputs":[{"name":"etag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",175,{"inputs":[{"name":"etag"}],"output":{"name":"etag"}}],[11,"deref","","",175,{"inputs":[{"name":"etag"}],"output":{"name":"entitytag"}}],[11,"deref_mut","","",175,{"inputs":[{"name":"etag"}],"output":{"name":"entitytag"}}],[11,"header_name","","",175,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",175,null],[11,"fmt_header","","",175,{"inputs":[{"name":"etag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",175,{"inputs":[{"name":"etag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",72,{"inputs":[{"name":"expect"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",72,{"inputs":[{"name":"expect"},{"name":"expect"}],"output":{"name":"bool"}}],[11,"ne","","",72,{"inputs":[{"name":"expect"},{"name":"expect"}],"output":{"name":"bool"}}],[11,"clone","","",72,{"inputs":[{"name":"expect"}],"output":{"name":"expect"}}],[11,"header_name","","",72,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",72,null],[11,"fmt_header","","",72,{"inputs":[{"name":"expect"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",176,{"inputs":[{"name":"expires"},{"name":"expires"}],"output":{"name":"bool"}}],[11,"ne","","",176,{"inputs":[{"name":"expires"},{"name":"expires"}],"output":{"name":"bool"}}],[11,"fmt","","",176,{"inputs":[{"name":"expires"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",176,{"inputs":[{"name":"expires"}],"output":{"name":"expires"}}],[11,"deref","","",176,{"inputs":[{"name":"expires"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",176,{"inputs":[{"name":"expires"}],"output":{"name":"httpdate"}}],[11,"header_name","","",176,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",176,null],[11,"fmt_header","","",176,{"inputs":[{"name":"expires"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",176,{"inputs":[{"name":"expires"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",177,{"inputs":[{"name":"from"},{"name":"from"}],"output":{"name":"bool"}}],[11,"ne","","",177,{"inputs":[{"name":"from"},{"name":"from"}],"output":{"name":"bool"}}],[11,"fmt","","",177,{"inputs":[{"name":"from"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",177,{"inputs":[{"name":"from"}],"output":{"name":"from"}}],[11,"deref","","",177,{"inputs":[{"name":"from"}],"output":{"name":"string"}}],[11,"deref_mut","","",177,{"inputs":[{"name":"from"}],"output":{"name":"string"}}],[11,"header_name","","",177,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",177,null],[11,"fmt_header","","",177,{"inputs":[{"name":"from"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",177,{"inputs":[{"name":"from"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"host"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",60,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"clone","","",60,{"inputs":[{"name":"host"}],"output":{"name":"host"}}],[11,"header_name","","",60,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",60,null],[11,"fmt_header","","",60,{"inputs":[{"name":"host"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",73,{"inputs":[{"name":"ifmatch"},{"name":"ifmatch"}],"output":{"name":"bool"}}],[11,"ne","","",73,{"inputs":[{"name":"ifmatch"},{"name":"ifmatch"}],"output":{"name":"bool"}}],[11,"fmt","","",73,{"inputs":[{"name":"ifmatch"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",73,{"inputs":[{"name":"ifmatch"}],"output":{"name":"ifmatch"}}],[11,"header_name","","",73,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",73,null],[11,"fmt_header","","",73,{"inputs":[{"name":"ifmatch"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",73,{"inputs":[{"name":"ifmatch"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",178,{"inputs":[{"name":"ifmodifiedsince"},{"name":"ifmodifiedsince"}],"output":{"name":"bool"}}],[11,"ne","","",178,{"inputs":[{"name":"ifmodifiedsince"},{"name":"ifmodifiedsince"}],"output":{"name":"bool"}}],[11,"fmt","","",178,{"inputs":[{"name":"ifmodifiedsince"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",178,{"inputs":[{"name":"ifmodifiedsince"}],"output":{"name":"ifmodifiedsince"}}],[11,"deref","","",178,{"inputs":[{"name":"ifmodifiedsince"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",178,{"inputs":[{"name":"ifmodifiedsince"}],"output":{"name":"httpdate"}}],[11,"header_name","","",178,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",178,null],[11,"fmt_header","","",178,{"inputs":[{"name":"ifmodifiedsince"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",178,{"inputs":[{"name":"ifmodifiedsince"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",74,{"inputs":[{"name":"ifnonematch"},{"name":"ifnonematch"}],"output":{"name":"bool"}}],[11,"ne","","",74,{"inputs":[{"name":"ifnonematch"},{"name":"ifnonematch"}],"output":{"name":"bool"}}],[11,"fmt","","",74,{"inputs":[{"name":"ifnonematch"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",74,{"inputs":[{"name":"ifnonematch"}],"output":{"name":"ifnonematch"}}],[11,"header_name","","",74,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",74,null],[11,"fmt_header","","",74,{"inputs":[{"name":"ifnonematch"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",74,{"inputs":[{"name":"ifnonematch"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",75,{"inputs":[{"name":"ifrange"},{"name":"ifrange"}],"output":{"name":"bool"}}],[11,"ne","","",75,{"inputs":[{"name":"ifrange"},{"name":"ifrange"}],"output":{"name":"bool"}}],[11,"fmt","","",75,{"inputs":[{"name":"ifrange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",75,{"inputs":[{"name":"ifrange"}],"output":{"name":"ifrange"}}],[11,"header_name","","",75,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",75,null],[11,"fmt_header","","",75,{"inputs":[{"name":"ifrange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",75,{"inputs":[{"name":"ifrange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",179,{"inputs":[{"name":"ifunmodifiedsince"},{"name":"ifunmodifiedsince"}],"output":{"name":"bool"}}],[11,"ne","","",179,{"inputs":[{"name":"ifunmodifiedsince"},{"name":"ifunmodifiedsince"}],"output":{"name":"bool"}}],[11,"fmt","","",179,{"inputs":[{"name":"ifunmodifiedsince"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",179,{"inputs":[{"name":"ifunmodifiedsince"}],"output":{"name":"ifunmodifiedsince"}}],[11,"deref","","",179,{"inputs":[{"name":"ifunmodifiedsince"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",179,{"inputs":[{"name":"ifunmodifiedsince"}],"output":{"name":"httpdate"}}],[11,"header_name","","",179,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",179,null],[11,"fmt_header","","",179,{"inputs":[{"name":"ifunmodifiedsince"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",179,{"inputs":[{"name":"ifunmodifiedsince"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",180,{"inputs":[{"name":"lastmodified"},{"name":"lastmodified"}],"output":{"name":"bool"}}],[11,"ne","","",180,{"inputs":[{"name":"lastmodified"},{"name":"lastmodified"}],"output":{"name":"bool"}}],[11,"fmt","","",180,{"inputs":[{"name":"lastmodified"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",180,{"inputs":[{"name":"lastmodified"}],"output":{"name":"lastmodified"}}],[11,"deref","","",180,{"inputs":[{"name":"lastmodified"}],"output":{"name":"httpdate"}}],[11,"deref_mut","","",180,{"inputs":[{"name":"lastmodified"}],"output":{"name":"httpdate"}}],[11,"header_name","","",180,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",180,null],[11,"fmt_header","","",180,{"inputs":[{"name":"lastmodified"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",180,{"inputs":[{"name":"lastmodified"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",181,{"inputs":[{"name":"location"},{"name":"location"}],"output":{"name":"bool"}}],[11,"ne","","",181,{"inputs":[{"name":"location"},{"name":"location"}],"output":{"name":"bool"}}],[11,"fmt","","",181,{"inputs":[{"name":"location"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",181,{"inputs":[{"name":"location"}],"output":{"name":"location"}}],[11,"deref","","",181,{"inputs":[{"name":"location"}],"output":{"name":"string"}}],[11,"deref_mut","","",181,{"inputs":[{"name":"location"}],"output":{"name":"string"}}],[11,"header_name","","",181,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",181,null],[11,"fmt_header","","",181,{"inputs":[{"name":"location"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",181,{"inputs":[{"name":"location"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",76,{"inputs":[{"name":"pragma"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",76,{"inputs":[{"name":"pragma"},{"name":"pragma"}],"output":{"name":"bool"}}],[11,"ne","","",76,{"inputs":[{"name":"pragma"},{"name":"pragma"}],"output":{"name":"bool"}}],[11,"clone","","",76,{"inputs":[{"name":"pragma"}],"output":{"name":"pragma"}}],[11,"header_name","","",76,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",76,null],[11,"fmt_header","","",76,{"inputs":[{"name":"pragma"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",182,{"inputs":[{"name":"prefer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",182,{"inputs":[{"name":"prefer"}],"output":{"name":"prefer"}}],[11,"eq","","",182,{"inputs":[{"name":"prefer"},{"name":"prefer"}],"output":{"name":"bool"}}],[11,"ne","","",182,{"inputs":[{"name":"prefer"},{"name":"prefer"}],"output":{"name":"bool"}}],[11,"deref","","",182,{"inputs":[{"name":"prefer"}],"output":{"name":"vec"}}],[11,"deref_mut","","",182,{"inputs":[{"name":"prefer"}],"output":{"name":"vec"}}],[11,"header_name","","",182,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",182,null],[11,"fmt_header","","",182,{"inputs":[{"name":"prefer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",77,{"inputs":[{"name":"preference"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",77,{"inputs":[{"name":"preference"}],"output":{"name":"preference"}}],[11,"eq","","",77,{"inputs":[{"name":"preference"},{"name":"preference"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"preference"},{"name":"preference"}],"output":{"name":"bool"}}],[11,"fmt","","",77,{"inputs":[{"name":"preference"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",77,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",183,{"inputs":[{"name":"preferenceapplied"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",183,{"inputs":[{"name":"preferenceapplied"}],"output":{"name":"preferenceapplied"}}],[11,"eq","","",183,{"inputs":[{"name":"preferenceapplied"},{"name":"preferenceapplied"}],"output":{"name":"bool"}}],[11,"ne","","",183,{"inputs":[{"name":"preferenceapplied"},{"name":"preferenceapplied"}],"output":{"name":"bool"}}],[11,"deref","","",183,{"inputs":[{"name":"preferenceapplied"}],"output":{"name":"vec"}}],[11,"deref_mut","","",183,{"inputs":[{"name":"preferenceapplied"}],"output":{"name":"vec"}}],[11,"header_name","","",183,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",183,null],[11,"fmt_header","","",183,{"inputs":[{"name":"preferenceapplied"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",78,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",78,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"eq","","",78,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",78,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"fmt","","",79,{"inputs":[{"name":"byterangespec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",79,{"inputs":[{"name":"byterangespec"}],"output":{"name":"byterangespec"}}],[11,"eq","","",79,{"inputs":[{"name":"byterangespec"},{"name":"byterangespec"}],"output":{"name":"bool"}}],[11,"ne","","",79,{"inputs":[{"name":"byterangespec"},{"name":"byterangespec"}],"output":{"name":"bool"}}],[11,"bytes","","Get the most common byte range header (&quot;bytes=from-to&quot;)",78,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"range"}}],[11,"bytes_multi","","Get byte range header with multiple subranges\n(&quot;bytes=from1-to1,from2-to2,fromX-toX&quot;)",78,{"inputs":[{"name":"vec"}],"output":{"name":"range"}}],[11,"fmt","","",79,{"inputs":[{"name":"byterangespec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",78,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",78,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",79,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"header_name","","",78,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",78,null],[11,"fmt_header","","",78,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",184,{"inputs":[{"name":"referer"},{"name":"referer"}],"output":{"name":"bool"}}],[11,"ne","","",184,{"inputs":[{"name":"referer"},{"name":"referer"}],"output":{"name":"bool"}}],[11,"fmt","","",184,{"inputs":[{"name":"referer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",184,{"inputs":[{"name":"referer"}],"output":{"name":"referer"}}],[11,"deref","","",184,{"inputs":[{"name":"referer"}],"output":{"name":"string"}}],[11,"deref_mut","","",184,{"inputs":[{"name":"referer"}],"output":{"name":"string"}}],[11,"header_name","","",184,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",184,null],[11,"fmt_header","","",184,{"inputs":[{"name":"referer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",184,{"inputs":[{"name":"referer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",185,{"inputs":[{"name":"server"},{"name":"server"}],"output":{"name":"bool"}}],[11,"ne","","",185,{"inputs":[{"name":"server"},{"name":"server"}],"output":{"name":"bool"}}],[11,"fmt","","",185,{"inputs":[{"name":"server"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",185,{"inputs":[{"name":"server"}],"output":{"name":"server"}}],[11,"deref","","",185,{"inputs":[{"name":"server"}],"output":{"name":"string"}}],[11,"deref_mut","","",185,{"inputs":[{"name":"server"}],"output":{"name":"string"}}],[11,"header_name","","",185,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",185,null],[11,"fmt_header","","",185,{"inputs":[{"name":"server"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",185,{"inputs":[{"name":"server"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",186,{"inputs":[{"name":"setcookie"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",186,{"inputs":[{"name":"setcookie"},{"name":"setcookie"}],"output":{"name":"bool"}}],[11,"ne","","",186,{"inputs":[{"name":"setcookie"},{"name":"setcookie"}],"output":{"name":"bool"}}],[11,"clone","","",186,{"inputs":[{"name":"setcookie"}],"output":{"name":"setcookie"}}],[11,"deref","","",186,{"inputs":[{"name":"setcookie"}],"output":{"name":"vec"}}],[11,"deref_mut","","",186,{"inputs":[{"name":"setcookie"}],"output":{"name":"vec"}}],[11,"header_name","","",186,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",186,null],[11,"fmt_header","","",186,{"inputs":[{"name":"setcookie"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_cookie_jar","","Use this to create SetCookie header from CookieJar using\ncalculated delta.",186,{"inputs":[{"name":"cookiejar"}],"output":{"name":"setcookie"}}],[11,"apply_to_cookie_jar","","Use this on client to apply changes from SetCookie to CookieJar.\nNote that this will `panic!` if `CookieJar` is not root.",186,{"inputs":[{"name":"setcookie"},{"name":"cookiejar"}],"output":null}],[11,"fmt","","",61,{"inputs":[{"name":"stricttransportsecurity"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",61,{"inputs":[{"name":"stricttransportsecurity"},{"name":"stricttransportsecurity"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"stricttransportsecurity"},{"name":"stricttransportsecurity"}],"output":{"name":"bool"}}],[11,"clone","","",61,{"inputs":[{"name":"stricttransportsecurity"}],"output":{"name":"stricttransportsecurity"}}],[11,"including_subdomains","","Create an STS header that includes subdomains",61,{"inputs":[{"name":"u64"}],"output":{"name":"stricttransportsecurity"}}],[11,"excluding_subdomains","","Create an STS header that excludes subdomains",61,{"inputs":[{"name":"u64"}],"output":{"name":"stricttransportsecurity"}}],[11,"from_str","","",61,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"header_name","","",61,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",61,null],[11,"fmt_header","","",61,{"inputs":[{"name":"stricttransportsecurity"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",187,{"inputs":[{"name":"transferencoding"},{"name":"transferencoding"}],"output":{"name":"bool"}}],[11,"ne","","",187,{"inputs":[{"name":"transferencoding"},{"name":"transferencoding"}],"output":{"name":"bool"}}],[11,"fmt","","",187,{"inputs":[{"name":"transferencoding"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",187,{"inputs":[{"name":"transferencoding"}],"output":{"name":"transferencoding"}}],[11,"deref","","",187,{"inputs":[{"name":"transferencoding"}],"output":{"name":"vec"}}],[11,"deref_mut","","",187,{"inputs":[{"name":"transferencoding"}],"output":{"name":"vec"}}],[11,"header_name","","",187,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",187,null],[11,"fmt_header","","",187,{"inputs":[{"name":"transferencoding"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",187,{"inputs":[{"name":"transferencoding"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",188,{"inputs":[{"name":"upgrade"},{"name":"upgrade"}],"output":{"name":"bool"}}],[11,"ne","","",188,{"inputs":[{"name":"upgrade"},{"name":"upgrade"}],"output":{"name":"bool"}}],[11,"fmt","","",188,{"inputs":[{"name":"upgrade"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",188,{"inputs":[{"name":"upgrade"}],"output":{"name":"upgrade"}}],[11,"deref","","",188,{"inputs":[{"name":"upgrade"}],"output":{"name":"vec"}}],[11,"deref_mut","","",188,{"inputs":[{"name":"upgrade"}],"output":{"name":"vec"}}],[11,"header_name","","",188,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",188,null],[11,"fmt_header","","",188,{"inputs":[{"name":"upgrade"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",188,{"inputs":[{"name":"upgrade"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",80,{"inputs":[{"name":"protocolname"},{"name":"protocolname"}],"output":{"name":"bool"}}],[11,"ne","","",80,{"inputs":[{"name":"protocolname"},{"name":"protocolname"}],"output":{"name":"bool"}}],[11,"fmt","","",80,{"inputs":[{"name":"protocolname"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",80,{"inputs":[{"name":"protocolname"}],"output":{"name":"protocolname"}}],[11,"from_str","","",80,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",80,{"inputs":[{"name":"protocolname"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",62,{"inputs":[{"name":"protocol"},{"name":"protocol"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"protocol"},{"name":"protocol"}],"output":{"name":"bool"}}],[11,"fmt","","",62,{"inputs":[{"name":"protocol"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",62,{"inputs":[{"name":"protocol"}],"output":{"name":"protocol"}}],[11,"new","","Creates a new Protocol with the given name and version",62,{"inputs":[{"name":"protocolname"},{"name":"option"}],"output":{"name":"protocol"}}],[11,"from_str","","",62,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",62,{"inputs":[{"name":"protocol"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",189,{"inputs":[{"name":"useragent"},{"name":"useragent"}],"output":{"name":"bool"}}],[11,"ne","","",189,{"inputs":[{"name":"useragent"},{"name":"useragent"}],"output":{"name":"bool"}}],[11,"fmt","","",189,{"inputs":[{"name":"useragent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",189,{"inputs":[{"name":"useragent"}],"output":{"name":"useragent"}}],[11,"deref","","",189,{"inputs":[{"name":"useragent"}],"output":{"name":"string"}}],[11,"deref_mut","","",189,{"inputs":[{"name":"useragent"}],"output":{"name":"string"}}],[11,"header_name","","",189,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",189,null],[11,"fmt_header","","",189,{"inputs":[{"name":"useragent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",189,{"inputs":[{"name":"useragent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",81,{"inputs":[{"name":"vary"},{"name":"vary"}],"output":{"name":"bool"}}],[11,"ne","","",81,{"inputs":[{"name":"vary"},{"name":"vary"}],"output":{"name":"bool"}}],[11,"fmt","","",81,{"inputs":[{"name":"vary"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",81,{"inputs":[{"name":"vary"}],"output":{"name":"vary"}}],[11,"header_name","","",81,{"inputs":[],"output":{"name":"str"}}],[11,"parse_header","","",81,null],[11,"fmt_header","","",81,{"inputs":[{"name":"vary"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",81,{"inputs":[{"name":"vary"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_some","core::option","Returns `true` if the option is a `Some` value",190,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",190,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",190,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",190,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",190,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",190,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",190,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",190,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",190,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",190,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",190,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",190,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",190,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",190,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",190,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",190,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",190,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",190,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",190,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",190,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",190,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",190,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"default","core::num","",191,{"inputs":[],"output":{"name":"wrapping"}}],[11,"fmt","","",191,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",191,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"cmp","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"option"}}],[11,"lt","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"eq","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"shl","","",191,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",191,null],[11,"shr","","",191,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",191,null],[11,"shl","","",191,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",191,null],[11,"shr","","",191,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",191,null],[11,"shl","","",191,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",191,null],[11,"shr","","",191,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",191,null],[11,"shl","","",191,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",191,null],[11,"shr","","",191,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",191,null],[11,"shl","","",191,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",191,null],[11,"shr","","",191,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",191,null],[11,"shl","","",191,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",191,null],[11,"shr","","",191,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",191,null],[11,"shl","","",191,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",191,null],[11,"shr","","",191,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",191,null],[11,"shl","","",191,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",191,null],[11,"shr","","",191,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",191,null],[11,"shl","","",191,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",191,null],[11,"shr","","",191,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",191,null],[11,"shl","","",191,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",191,null],[11,"shr","","",191,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",191,null],[11,"add","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",191,null],[11,"sub","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",191,null],[11,"mul","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",191,null],[11,"div","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",191,null],[11,"rem","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",191,null],[11,"not","","",191,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",191,null],[11,"bitor","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",191,null],[11,"bitand","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",191,null],[11,"add","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",191,null],[11,"sub","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",191,null],[11,"mul","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",191,null],[11,"div","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",191,null],[11,"rem","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",191,null],[11,"not","","",191,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",191,null],[11,"bitor","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",191,null],[11,"bitand","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",191,null],[11,"add","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",191,null],[11,"sub","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",191,null],[11,"mul","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",191,null],[11,"div","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",191,null],[11,"rem","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",191,null],[11,"not","","",191,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",191,null],[11,"bitor","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",191,null],[11,"bitand","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",191,null],[11,"add","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",191,null],[11,"sub","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",191,null],[11,"mul","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",191,null],[11,"div","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",191,null],[11,"rem","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",191,null],[11,"not","","",191,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",191,null],[11,"bitor","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",191,null],[11,"bitand","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",191,null],[11,"add","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",191,null],[11,"sub","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",191,null],[11,"mul","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",191,null],[11,"div","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",191,null],[11,"rem","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",191,null],[11,"not","","",191,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",191,null],[11,"bitor","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",191,null],[11,"bitand","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",191,null],[11,"add","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",191,null],[11,"sub","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",191,null],[11,"mul","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",191,null],[11,"div","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",191,null],[11,"rem","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",191,null],[11,"not","","",191,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",191,null],[11,"bitor","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",191,null],[11,"bitand","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",191,null],[11,"add","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",191,null],[11,"sub","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",191,null],[11,"mul","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",191,null],[11,"div","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",191,null],[11,"rem","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",191,null],[11,"not","","",191,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",191,null],[11,"bitor","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",191,null],[11,"bitand","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",191,null],[11,"add","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",191,null],[11,"sub","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",191,null],[11,"mul","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",191,null],[11,"div","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",191,null],[11,"rem","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",191,null],[11,"not","","",191,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",191,null],[11,"bitor","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",191,null],[11,"bitand","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",191,null],[11,"add","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",191,null],[11,"sub","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",191,null],[11,"mul","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",191,null],[11,"div","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",191,null],[11,"rem","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",191,null],[11,"not","","",191,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",191,null],[11,"bitor","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",191,null],[11,"bitand","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",191,null],[11,"add","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",191,null],[11,"sub","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",191,null],[11,"mul","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",191,null],[11,"div","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",191,null],[11,"rem","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",191,null],[11,"not","","",191,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",191,null],[11,"bitor","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",191,null],[11,"bitand","","",191,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",191,null],[11,"fmt","","",192,{"inputs":[{"name":"fpcategory"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",192,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"ne","","",192,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"clone","","",192,{"inputs":[{"name":"fpcategory"}],"output":{"name":"fpcategory"}}],[11,"eq","","",193,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",193,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"clone","","",193,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parseinterror"}}],[11,"fmt","","",193,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",194,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",194,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",194,{"inputs":[{"name":"interrorkind"}],"output":{"name":"interrorkind"}}],[11,"fmt","","",194,{"inputs":[{"name":"interrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",193,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::nonzero","",195,null],[11,"fmt","","",195,{"inputs":[{"name":"nonzero"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",195,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"option"}}],[11,"lt","","",195,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"le","","",195,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"gt","","",195,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ge","","",195,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"cmp","","",195,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"ordering"}}],[11,"eq","","",195,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ne","","",195,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"clone","","",195,{"inputs":[{"name":"nonzero"}],"output":{"name":"nonzero"}}],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually &quot;non-zero&quot;.",195,{"inputs":[{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",195,{"inputs":[{"name":"nonzero"}],"output":{"name":"t"}}],[11,"new","core::ptr","Creates a new `Unique`.",196,null],[11,"get","","Dereferences the content.",196,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",196,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"deref","","",196,null],[11,"fmt","","",196,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Shared`.",197,null],[11,"clone","","",197,{"inputs":[{"name":"shared"}],"output":{"name":"shared"}}],[11,"deref","","",197,null],[11,"fmt","","",197,{"inputs":[{"name":"shared"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::marker","",198,null],[11,"eq","","",198,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",198,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",198,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",198,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"default","","",198,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",199,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"ne","","",199,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"clone","","",199,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"fmt","","",199,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"fmt","","",30,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"clone","","",31,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"fmt","","",31,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"clone","","",32,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"fmt","","",32,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cmp","",200,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",200,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"ne","","",200,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"clone","","",200,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",200,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","","",200,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",200,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"fmt","hyper::header::internals","",201,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",201,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns true if the boxed type is the same as `T`",201,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",201,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",201,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",201,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",201,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",201,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"hash","core::any","",202,null],[11,"fmt","","",202,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",202,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",202,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"clone","","",202,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",202,{"inputs":[],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",203,{"inputs":[],"output":{"name":"atomicbool"}}],[11,"default","","",204,{"inputs":[],"output":{"name":"atomicisize"}}],[11,"default","","",205,{"inputs":[],"output":{"name":"atomicusize"}}],[11,"default","","",206,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"clone","","",207,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new `AtomicBool`.",203,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",203,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",203,null],[11,"swap","","Stores a value into the bool, returning the old value.",203,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",203,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",203,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",203,null],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",203,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",203,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",203,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",203,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicIsize`.",204,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",204,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",204,null],[11,"swap","","Stores a value into the isize, returning the old value.",204,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the `isize` if the current value is the same as the `current` value.",204,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_exchange","","Stores a value into the `isize` if the current value is the same as the `current` value.",204,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_exchange_weak","","Stores a value into the `isize if the current value is the same as the `current` value.",204,null],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",204,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",204,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",204,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",204,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",204,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","Creates a new `AtomicUsize`.",205,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",205,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",205,null],[11,"swap","","Stores a value into the usize, returning the old value.",205,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the `usize` if the current value is the same as the `current` value.",205,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_exchange","","Stores a value into the `usize` if the current value is the same as the `current` value.",205,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_exchange_weak","","Stores a value into the `usize` if the current value is the same as the `current` value.",205,null],[11,"fetch_add","","Add to the current usize, returning the previous value.",205,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",205,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",205,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",205,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",205,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"new","","Creates a new `AtomicPtr`.",206,null],[11,"load","","Loads a value from the pointer.",206,null],[11,"store","","Stores a value into the pointer.",206,null],[11,"swap","","Stores a value into the pointer, returning the old value.",206,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",206,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",206,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",206,null],[11,"fmt","","",205,{"inputs":[{"name":"atomicusize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",204,{"inputs":[{"name":"atomicisize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",203,{"inputs":[{"name":"atomicbool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",206,{"inputs":[{"name":"atomicptr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","core::cell","Creates a new `Cell` containing the given value.",208,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",208,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",208,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",208,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",208,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"default","","",208,{"inputs":[],"output":{"name":"cell"}}],[11,"eq","","",208,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"fmt","","",209,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",209,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"ne","","",209,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"clone","","",209,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"new","","Creates a new `RefCell` containing `value`.",210,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",210,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",210,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",210,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",210,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",210,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",210,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"default","","",210,{"inputs":[],"output":{"name":"refcell"}}],[11,"eq","","",210,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"drop","","",211,null],[11,"clone","","",211,{"inputs":[{"name":"borrowref"}],"output":{"name":"borrowref"}}],[11,"deref","","",212,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",212,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",212,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",212,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",213,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",213,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"drop","","",214,null],[11,"deref","","",213,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",213,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",215,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",215,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",215,null],[11,"clone","core::char","",216,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"escapeunicode"}}],[11,"clone","","",217,{"inputs":[{"name":"escapeunicodestate"}],"output":{"name":"escapeunicodestate"}}],[11,"next","","",216,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"option"}}],[11,"size_hint","","",216,null],[11,"clone","","",218,{"inputs":[{"name":"escapedefault"}],"output":{"name":"escapedefault"}}],[11,"clone","","",219,{"inputs":[{"name":"escapedefaultstate"}],"output":{"name":"escapedefaultstate"}}],[11,"next","","",218,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",218,null],[11,"count","","",218,{"inputs":[{"name":"escapedefault"}],"output":{"name":"usize"}}],[11,"nth","","",218,{"inputs":[{"name":"escapedefault"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",218,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"clone","core::iter","",220,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"next","","",220,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",220,null],[11,"next_back","","",220,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"clone","","",221,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"next","","",221,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",221,null],[11,"next_back","","",221,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"clone","","",222,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"next","","",222,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",222,null],[11,"clone","","",223,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"clone","","",224,{"inputs":[{"name":"chainstate"}],"output":{"name":"chainstate"}}],[11,"next","","",223,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",223,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",223,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",223,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",223,null],[11,"next_back","","",223,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"clone","","",225,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"next","","",225,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",225,null],[11,"next_back","","",225,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"clone","","",226,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"next","","",226,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",226,null],[11,"next_back","","",226,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"clone","","",227,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"next","","",227,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",227,null],[11,"next_back","","",227,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"clone","","",228,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"next","","",228,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",228,null],[11,"next_back","","",228,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"clone","","",229,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"next","","# Overflow Behavior",229,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",229,null],[11,"nth","","",229,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",229,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"next_back","","",229,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"clone","","",230,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"next","","",230,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",230,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",230,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",230,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",230,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",230,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks if the iterator has finished iterating.",230,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"clone","","",231,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"next","","",231,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",231,null],[11,"clone","","",232,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"next","","",232,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",232,null],[11,"clone","","",233,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",233,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",233,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",233,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",233,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",233,null],[11,"clone","","",234,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"next","","",234,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",234,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",234,null],[11,"clone","","",235,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[11,"next","","",235,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",235,null],[11,"clone","","",236,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"next","","",236,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",236,null],[11,"next_back","","",236,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"clone","","",237,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"next","","",237,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",237,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",237,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",237,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",237,null],[11,"next_back","","",237,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"clone","","",238,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"next","","",238,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",238,null],[11,"next_back","","",238,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"clone","","",239,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",31,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",30,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","core::iter","",239,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",239,null],[11,"clone","","",240,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",240,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",240,null],[11,"next_back","","",240,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"next","","",239,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",239,null],[11,"next","core::ops","",30,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",30,null],[11,"next_back","","",30,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",31,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"clone","core::iter","",241,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"next","","",241,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",241,null],[11,"next_back","","",241,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"next","","",242,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",242,null],[11,"next_back","","",242,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"len","","",242,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"clone","","",242,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"default","","",242,{"inputs":[],"output":{"name":"empty"}}],[11,"clone","","",243,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"next","","",243,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",243,null],[11,"next_back","","",243,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"len","","",243,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"hash","core::option","",190,null],[11,"fmt","","",190,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",190,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",190,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",190,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",190,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",190,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",190,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",190,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",190,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",190,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"default","","",190,{"inputs":[],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",190,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"clone","","",244,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[11,"next","","",244,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"size_hint","","",244,null],[11,"next_back","","",244,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"next","","",245,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",245,null],[11,"next_back","","",245,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",245,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",246,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",246,null],[11,"next_back","","",246,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",247,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",247,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",247,null],[11,"next_back","","",247,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",190,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",248,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"clone","","",249,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[11,"hash","core::result","",250,null],[11,"fmt","","",250,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",250,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",250,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",250,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",250,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",250,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",250,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","","",250,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",250,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"clone","","",250,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"is_ok","","Returns true if the result is `Ok`",250,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",250,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",250,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",250,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",250,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",250,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",250,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",250,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",250,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",250,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",250,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",250,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",250,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",250,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",250,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",250,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",250,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",250,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",250,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",250,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"next","","",251,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",251,null],[11,"next_back","","",251,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",251,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",252,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",252,null],[11,"next_back","","",252,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",253,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",253,null],[11,"next_back","","",253,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",250,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"as_slice","core::slice","View the underlying data as a subslice of the original data.",254,null],[11,"next","","",254,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",254,null],[11,"count","","",254,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"nth","","",254,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",254,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",254,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",254,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"into_slice","","View the underlying data as a subslice of the original data.",255,null],[11,"next","","",255,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",255,null],[11,"count","","",255,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"nth","","",255,{"inputs":[{"name":"itermut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",255,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next_back","","",255,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",256,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",256,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"size_hint","","",256,null],[11,"next_back","","",256,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",256,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",257,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",257,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"size_hint","","",257,null],[11,"next_back","","",257,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",258,{"inputs":[{"name":"genericsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",258,null],[11,"next","","",259,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"size_hint","","",259,null],[11,"next","","",260,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",260,null],[11,"next","","",261,{"inputs":[{"name":"splitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",261,null],[11,"next","","",262,{"inputs":[{"name":"rsplitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",262,null],[11,"clone","","",263,{"inputs":[{"name":"windows"}],"output":{"name":"windows"}}],[11,"next","","",263,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"size_hint","","",263,null],[11,"count","","",263,{"inputs":[{"name":"windows"}],"output":{"name":"usize"}}],[11,"nth","","",263,{"inputs":[{"name":"windows"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",263,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"next_back","","",263,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"clone","","",264,{"inputs":[{"name":"chunks"}],"output":{"name":"chunks"}}],[11,"next","","",264,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"size_hint","","",264,null],[11,"count","","",264,{"inputs":[{"name":"chunks"}],"output":{"name":"usize"}}],[11,"nth","","",264,{"inputs":[{"name":"chunks"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",264,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next_back","","",264,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next","","",265,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"size_hint","","",265,null],[11,"count","","",265,{"inputs":[{"name":"chunksmut"}],"output":{"name":"usize"}}],[11,"nth","","",265,{"inputs":[{"name":"chunksmut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",265,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"next_back","","",265,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"eq","core::str","",266,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",266,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"clone","","",266,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"parseboolerror"}}],[11,"fmt","","",266,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",266,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",267,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",267,{"inputs":[{"name":"utf8error"}],"output":{"name":"utf8error"}}],[11,"eq","","",267,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",267,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",267,{"inputs":[{"name":"utf8error"}],"output":{"name":"usize"}}],[11,"fmt","","",267,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",268,{"inputs":[{"name":"chars"}],"output":{"name":"chars"}}],[11,"next","","",268,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"size_hint","","",268,null],[11,"next_back","","",268,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",268,{"inputs":[{"name":"chars"}],"output":{"name":"str"}}],[11,"clone","","",269,{"inputs":[{"name":"charindices"}],"output":{"name":"charindices"}}],[11,"next","","",269,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"size_hint","","",269,null],[11,"next_back","","",269,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",269,{"inputs":[{"name":"charindices"}],"output":{"name":"str"}}],[11,"clone","","",270,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"next","","",270,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"size_hint","","",270,null],[11,"count","","",270,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"last","","",270,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"nth","","",270,{"inputs":[{"name":"bytes"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next_back","","",270,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"len","","",270,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"clone","","",271,{"inputs":[{"name":"splitinternal"}],"output":{"name":"splitinternal"}}],[11,"next","","",272,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"clone","","",272,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",273,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"clone","","",273,{"inputs":[{"name":"rsplit"}],"output":{"name":"rsplit"}}],[11,"next_back","","",272,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next_back","","",273,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"next","","",274,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"clone","","",274,{"inputs":[{"name":"splitterminator"}],"output":{"name":"splitterminator"}}],[11,"next","","",275,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",275,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"rsplitterminator"}}],[11,"next_back","","",274,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"next_back","","",275,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",276,{"inputs":[{"name":"splitninternal"}],"output":{"name":"splitninternal"}}],[11,"next","","",277,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"clone","","",277,{"inputs":[{"name":"splitn"}],"output":{"name":"splitn"}}],[11,"next","","",278,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"clone","","",278,{"inputs":[{"name":"rsplitn"}],"output":{"name":"rsplitn"}}],[11,"clone","","",279,{"inputs":[{"name":"matchindicesinternal"}],"output":{"name":"matchindicesinternal"}}],[11,"next","","",280,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"clone","","",280,{"inputs":[{"name":"matchindices"}],"output":{"name":"matchindices"}}],[11,"next","","",281,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",281,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"rmatchindices"}}],[11,"next_back","","",280,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"next_back","","",281,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",282,{"inputs":[{"name":"matchesinternal"}],"output":{"name":"matchesinternal"}}],[11,"next","","",283,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"clone","","",283,{"inputs":[{"name":"matches"}],"output":{"name":"matches"}}],[11,"next","","",284,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",284,{"inputs":[{"name":"rmatches"}],"output":{"name":"rmatches"}}],[11,"next_back","","",283,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"next_back","","",284,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",285,{"inputs":[{"name":"lines"}],"output":{"name":"lines"}}],[11,"next","","",285,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"size_hint","","",285,null],[11,"next_back","","",285,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"clone","","",286,{"inputs":[{"name":"linesany"}],"output":{"name":"linesany"}}],[11,"clone","","",287,{"inputs":[{"name":"linesanymap"}],"output":{"name":"linesanymap"}}],[11,"call","","",287,null],[11,"call_mut","","",287,null],[11,"call_once","","",287,null],[11,"next","","",286,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"size_hint","","",286,null],[11,"next_back","","",286,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"clone","","",288,{"inputs":[{"name":"charrange"}],"output":{"name":"charrange"}}],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",289,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",289,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",289,null],[11,"finish","","",289,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"clone","","",289,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"default","","",289,{"inputs":[],"output":{"name":"siphasher"}}],[11,"build_hasher","core::hash","",290,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"h"}}],[11,"clone","","",290,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"buildhasherdefault"}}],[11,"default","","",290,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"eq","core::fmt::num","",291,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"ne","","",291,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"clone","","",291,{"inputs":[{"name":"binary"}],"output":{"name":"binary"}}],[11,"eq","","",292,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"ne","","",292,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"clone","","",292,{"inputs":[{"name":"octal"}],"output":{"name":"octal"}}],[11,"eq","","",293,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",293,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"clone","","",293,{"inputs":[{"name":"decimal"}],"output":{"name":"decimal"}}],[11,"eq","","",294,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"ne","","",294,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"clone","","",294,{"inputs":[{"name":"lowerhex"}],"output":{"name":"lowerhex"}}],[11,"eq","","",295,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"ne","","",295,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"clone","","",295,{"inputs":[{"name":"upperhex"}],"output":{"name":"upperhex"}}],[11,"eq","","",296,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"ne","","",296,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"clone","","",296,{"inputs":[{"name":"radix"}],"output":{"name":"radix"}}],[11,"clone","","",297,{"inputs":[{"name":"radixfmt"}],"output":{"name":"radixfmt"}}],[11,"fmt","","",297,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",297,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",297,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",297,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",297,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",297,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",297,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",297,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",297,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",297,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",297,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",297,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",297,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",297,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",297,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",297,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",297,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",297,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",297,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",297,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_str","core::fmt::builders","",298,{"inputs":[{"name":"padadapter"},{"name":"str"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated struct output.",299,{"inputs":[{"name":"debugstruct"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",299,{"inputs":[{"name":"debugstruct"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated tuple struct output.",300,{"inputs":[{"name":"debugtuple"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",300,{"inputs":[{"name":"debugtuple"}],"output":{"name":"result"}}],[11,"formatter","","Returns the wrapped `Formatter`.",300,{"inputs":[{"name":"debugtuple"}],"output":{"name":"formatter"}}],[11,"finish","","",301,null],[11,"entry","","Adds a new entry to the set output.",302,{"inputs":[{"name":"debugset"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",302,{"inputs":[{"name":"debugset"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",302,{"inputs":[{"name":"debugset"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the list output.",303,{"inputs":[{"name":"debuglist"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",303,{"inputs":[{"name":"debuglist"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",303,{"inputs":[{"name":"debuglist"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the map output.",304,{"inputs":[{"name":"debugmap"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",304,{"inputs":[{"name":"debugmap"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",304,{"inputs":[{"name":"debugmap"}],"output":{"name":"result"}}],[11,"fmt","core::fmt","",305,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",305,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"clone","","",306,{"inputs":[{"name":"argumentv1"}],"output":{"name":"argumentv1"}}],[11,"clone","","",307,{"inputs":[{"name":"flagv1"}],"output":{"name":"flagv1"}}],[11,"clone","","",308,{"inputs":[{"name":"arguments"}],"output":{"name":"arguments"}}],[11,"fmt","","",308,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",308,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",309,{"inputs":[{"name":"formatter"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",309,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",309,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",309,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting (packed version of rt::Flag)",309,{"inputs":[{"name":"formatter"}],"output":{"name":"u32"}}],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",309,{"inputs":[{"name":"formatter"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",309,{"inputs":[{"name":"formatter"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",309,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",309,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",309,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",309,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",309,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",309,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",309,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",309,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",309,{"inputs":[{"name":"formatter"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",309,{"inputs":[{"name":"formatter"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",309,{"inputs":[{"name":"formatter"}],"output":{"name":"debugmap"}}],[11,"write_str","","",309,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",309,{"inputs":[{"name":"formatter"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",309,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"fmt","","",305,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::marker","",198,{"inputs":[{"name":"phantomdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cell","",208,{"inputs":[{"name":"cell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",210,{"inputs":[{"name":"refcell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",212,{"inputs":[{"name":"ref"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",213,{"inputs":[{"name":"refmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","hyper::header","",63,{"inputs":[{"name":"charset"},{"name":"charset"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"charset"},{"name":"charset"}],"output":{"name":"bool"}}],[11,"fmt","","",63,{"inputs":[{"name":"charset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",63,{"inputs":[{"name":"charset"}],"output":{"name":"charset"}}],[11,"fmt","","",63,{"inputs":[{"name":"charset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",63,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",64,{"inputs":[{"name":"encoding"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",64,{"inputs":[{"name":"encoding"},{"name":"encoding"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"encoding"},{"name":"encoding"}],"output":{"name":"bool"}}],[11,"clone","","",64,{"inputs":[{"name":"encoding"}],"output":{"name":"encoding"}}],[11,"fmt","","",64,{"inputs":[{"name":"encoding"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",64,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",55,{"inputs":[{"name":"entitytag"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"entitytag"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"fmt","","",55,{"inputs":[{"name":"entitytag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",55,{"inputs":[{"name":"entitytag"}],"output":{"name":"entitytag"}}],[11,"new","","Constructs a new EntityTag.\n# Panics\nIf the tag contains invalid characters.",55,{"inputs":[{"name":"bool"},{"name":"string"}],"output":{"name":"entitytag"}}],[11,"weak","","Constructs a new weak EntityTag.\n# Panics\nIf the tag contains invalid characters.",55,{"inputs":[{"name":"string"}],"output":{"name":"entitytag"}}],[11,"strong","","Constructs a new strong EntityTag.\n# Panics\nIf the tag contains invalid characters.",55,{"inputs":[{"name":"string"}],"output":{"name":"entitytag"}}],[11,"tag","","Get the tag.",55,{"inputs":[{"name":"entitytag"}],"output":{"name":"str"}}],[11,"set_tag","","Set the tag.\n# Panics\nIf the tag contains invalid characters.",55,{"inputs":[{"name":"entitytag"},{"name":"string"}],"output":null}],[11,"strong_eq","","For strong comparison two entity-tags are equivalent if both are not weak and their\nopaque-tags match character-by-character.",55,{"inputs":[{"name":"entitytag"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"weak_eq","","For weak comparison two entity-tags are equivalent if their\nopaque-tags match character-by-character, regardless of either or\nboth being tagged as &quot;weak&quot;.",55,{"inputs":[{"name":"entitytag"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"strong_ne","","The inverse of `EntityTag.strong_eq()`.",55,{"inputs":[{"name":"entitytag"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"weak_ne","","The inverse of `EntityTag.weak_eq()`.",55,{"inputs":[{"name":"entitytag"},{"name":"entitytag"}],"output":{"name":"bool"}}],[11,"fmt","","",55,{"inputs":[{"name":"entitytag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",55,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"cmp","","",310,{"inputs":[{"name":"httpdate"},{"name":"httpdate"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",310,{"inputs":[{"name":"httpdate"},{"name":"httpdate"}],"output":{"name":"option"}}],[11,"lt","","",310,{"inputs":[{"name":"httpdate"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"le","","",310,{"inputs":[{"name":"httpdate"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"gt","","",310,{"inputs":[{"name":"httpdate"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"ge","","",310,{"inputs":[{"name":"httpdate"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"eq","","",310,{"inputs":[{"name":"httpdate"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"ne","","",310,{"inputs":[{"name":"httpdate"},{"name":"httpdate"}],"output":{"name":"bool"}}],[11,"fmt","","",310,{"inputs":[{"name":"httpdate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",310,{"inputs":[{"name":"httpdate"}],"output":{"name":"httpdate"}}],[11,"from_str","","",310,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",310,{"inputs":[{"name":"httpdate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",311,{"inputs":[{"name":"quality"},{"name":"quality"}],"output":{"name":"option"}}],[11,"lt","","",311,{"inputs":[{"name":"quality"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"le","","",311,{"inputs":[{"name":"quality"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"gt","","",311,{"inputs":[{"name":"quality"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"ge","","",311,{"inputs":[{"name":"quality"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"eq","","",311,{"inputs":[{"name":"quality"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"ne","","",311,{"inputs":[{"name":"quality"},{"name":"quality"}],"output":{"name":"bool"}}],[11,"cmp","","",311,{"inputs":[{"name":"quality"},{"name":"quality"}],"output":{"name":"ordering"}}],[11,"fmt","","",311,{"inputs":[{"name":"quality"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",311,{"inputs":[{"name":"quality"}],"output":{"name":"quality"}}],[11,"fmt","","",311,{"inputs":[{"name":"quality"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",311,{"inputs":[],"output":{"name":"quality"}}],[11,"fmt","","",56,{"inputs":[{"name":"qualityitem"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",56,{"inputs":[{"name":"qualityitem"},{"name":"qualityitem"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"qualityitem"},{"name":"qualityitem"}],"output":{"name":"bool"}}],[11,"clone","","",56,{"inputs":[{"name":"qualityitem"}],"output":{"name":"qualityitem"}}],[11,"new","","Creates a new `QualityItem` from an item and a quality.\nThe item can be of any type.\nThe quality should be a value in the range [0, 1].",56,{"inputs":[{"name":"t"},{"name":"quality"}],"output":{"name":"qualityitem"}}],[11,"partial_cmp","","",56,{"inputs":[{"name":"qualityitem"},{"name":"qualityitem"}],"output":{"name":"option"}}],[11,"fmt","","",56,{"inputs":[{"name":"qualityitem"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",56,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[0,"parsing","","Utility functions for Header implementations.",null,null],[3,"ExtendedValue","hyper::header::parsing","An extended header parameter value (i.e., tagged with a character set and optionally,\na language), as defined in [RFC 5987](https://tools.ietf.org/html/rfc5987#section-3.2).",null,null],[12,"charset","","The character set that is used to encode the `value` to a string.",312,null],[12,"language_tag","","The human language details of the `value`, if available.",312,null],[12,"value","","The parameter value, as expressed in octets.",312,null],[3,"HTTP_VALUE","","This encode set is used for HTTP header values and is defined at\nhttps://tools.ietf.org/html/rfc5987#section-3.2",null,null],[5,"from_one_raw_str","","Reads a single raw string when parsing a header.",null,null],[5,"from_raw_str","","Reads a raw string into a value.",null,null],[5,"from_comma_delimited","","Reads a comma-delimited raw header into a Vec.",null,null],[5,"fmt_comma_delimited","","Format an array into a comma-delimited string.",null,null],[5,"parse_extended_value","","Parses extended header parameter values (`ext-value`), as defined in\n[RFC 5987](https://tools.ietf.org/html/rfc5987#section-3.2).",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",312,{"inputs":[{"name":"extendedvalue"},{"name":"extendedvalue"}],"output":{"name":"bool"}}],[11,"ne","","",312,{"inputs":[{"name":"extendedvalue"},{"name":"extendedvalue"}],"output":{"name":"bool"}}],[11,"fmt","","",312,{"inputs":[{"name":"extendedvalue"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",312,{"inputs":[{"name":"extendedvalue"}],"output":{"name":"extendedvalue"}}],[11,"clone","","",313,{"inputs":[{"name":"http_value"}],"output":{"name":"http_value"}}],[11,"contains","","",313,{"inputs":[{"name":"http_value"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"fmt","","",312,{"inputs":[{"name":"extendedvalue"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Scheme","hyper::header","An Authorization scheme to be used in the header.",null,null],[10,"scheme","","An optional Scheme name.",314,{"inputs":[],"output":{"name":"option"}}],[10,"fmt_scheme","","Format the Scheme data into a header value.",314,{"inputs":[{"name":"scheme"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Header","","A trait for any object that will represent a header field and value.",null,null],[10,"header_name","","Returns the name of the header field this belongs to.",315,{"inputs":[],"output":{"name":"str"}}],[10,"parse_header","","Parse a header from a raw stream of bytes.",315,null],[8,"HeaderFormat","","A trait for any object that will represent a header field and value.",null,null],[10,"fmt_header","","Format a header to be output into a TcpStream.",316,{"inputs":[{"name":"headerformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","alloc::boxed","",147,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone","hyper::header","",317,{"inputs":[{"name":"headers"}],"output":{"name":"headers"}}],[11,"new","","Creates a new, empty headers map.",317,{"inputs":[],"output":{"name":"headers"}}],[11,"set","","Set a header field to the corresponding value.",317,{"inputs":[{"name":"headers"},{"name":"h"}],"output":null}],[11,"get_raw","","Access the raw value of a header.",317,{"inputs":[{"name":"headers"},{"name":"str"}],"output":{"name":"option"}}],[11,"set_raw","","Set the raw value of a header, bypassing any typed headers.",317,{"inputs":[{"name":"headers"},{"name":"k"},{"name":"vec"}],"output":null}],[11,"remove_raw","","Remove a header set by set_raw",317,{"inputs":[{"name":"headers"},{"name":"str"}],"output":null}],[11,"get","","Get a reference to the header field&#39;s value, if it exists.",317,{"inputs":[{"name":"headers"}],"output":{"name":"option"}}],[11,"get_mut","","Get a mutable reference to the header field&#39;s value, if it exists.",317,{"inputs":[{"name":"headers"}],"output":{"name":"option"}}],[11,"has","","Returns a boolean of whether a certain header is in the map.",317,{"inputs":[{"name":"headers"}],"output":{"name":"bool"}}],[11,"remove","","Removes a header from the map, if one existed.\nReturns true if a header has been removed.",317,{"inputs":[{"name":"headers"}],"output":{"name":"bool"}}],[11,"iter","","Returns an iterator over the header fields.",317,{"inputs":[{"name":"headers"}],"output":{"name":"headersitems"}}],[11,"len","","Returns the number of headers in the map.",317,{"inputs":[{"name":"headers"}],"output":{"name":"usize"}}],[11,"clear","","Remove all headers from the map.",317,{"inputs":[{"name":"headers"}],"output":null}],[11,"eq","","",317,{"inputs":[{"name":"headers"},{"name":"headers"}],"output":{"name":"bool"}}],[11,"fmt","","",317,{"inputs":[{"name":"headers"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",317,{"inputs":[{"name":"headers"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",318,{"inputs":[{"name":"headersitems"}],"output":{"name":"option"}}],[11,"is","","Check if a HeaderView is a certain Header.",319,{"inputs":[{"name":"headerview"}],"output":{"name":"bool"}}],[11,"name","","Get the Header name as a slice.",319,{"inputs":[{"name":"headerview"}],"output":{"name":"str"}}],[11,"value","","Cast the value to a certain Header type.",319,{"inputs":[{"name":"headerview"}],"output":{"name":"option"}}],[11,"value_string","","Get just the header value as a String.",319,{"inputs":[{"name":"headerview"}],"output":{"name":"string"}}],[11,"fmt","","",319,{"inputs":[{"name":"headerview"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",319,{"inputs":[{"name":"headerview"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"extend","","",317,{"inputs":[{"name":"headers"},{"name":"i"}],"output":null}],[11,"from_iter","","",317,{"inputs":[{"name":"i"}],"output":{"name":"headers"}}],[11,"fmt","","",320,{"inputs":[{"name":"headerformatter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",320,{"inputs":[{"name":"headerformatter"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"http","hyper","Pieces pertaining to the HTTP message protocol.",null,null],[3,"RawStatus","hyper::http","The raw status code and reason-phrase.",null,null],[5,"should_keep_alive","","Checks if a connection should be kept alive.",null,{"inputs":[{"name":"httpversion"},{"name":"headers"}],"output":{"name":"bool"}}],[0,"h1","","Adapts the HTTP/1.1 implementation into the `HttpMessage` API.",null,null],[3,"Http11Message","hyper::http::h1","An implementation of the `HttpMessage` trait for HTTP/1.1.",null,null],[3,"Http11Protocol","","The `Protocol` implementation provides HTTP/1.1 messages.",null,null],[3,"EndError","","",null,null],[3,"Incoming","","An Incoming Message head. Includes request/status line, and headers.",null,null],[12,"version","","HTTP version of the message.",321,null],[12,"subject","","Subject (request line or status line) of Incoming message.",321,null],[12,"headers","","Headers of the Incoming message.",321,null],[4,"HttpReader","","Readers to handle different Transfer-Encodings.",null,null],[13,"SizedReader","","A Reader used when a Content-Length header is passed with a positive integer.",322,null],[13,"ChunkedReader","","A Reader used when Transfer-Encoding is `chunked`.",322,null],[13,"EofReader","","A Reader used for responses that don&#39;t indicate a length or chunked.",322,null],[13,"EmptyReader","","A Reader used for messages that should never have a body.",322,null],[4,"HttpWriter","","Writers to handle different Transfer-Encodings.",null,null],[13,"ThroughWriter","","A no-op Writer, used initially before Transfer-Encoding is determined.",323,null],[13,"ChunkedWriter","","A Writer for when Transfer-Encoding includes `chunked`.",323,null],[13,"SizedWriter","","A Writer for when Content-Length is set.",323,null],[13,"EmptyWriter","","A writer that should not write any body.",323,null],[5,"parse_request","","Parses a request into an Incoming message head.",null,{"inputs":[{"name":"bufreader"}],"output":{"name":"result"}}],[5,"parse_response","","Parses a response into an Incoming message head.",null,{"inputs":[{"name":"bufreader"}],"output":{"name":"result"}}],[17,"CR","","The `\\r` byte.",null,null],[17,"LF","","The `\\n` byte.",null,null],[17,"LINE_ENDING","","The bytes `\\r\\n`.",null,null],[11,"fmt","","",324,{"inputs":[{"name":"http11message"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write","","",324,null],[11,"flush","","",324,{"inputs":[{"name":"http11message"}],"output":{"name":"result"}}],[11,"read","","",324,null],[11,"set_outgoing","","",324,{"inputs":[{"name":"http11message"},{"name":"requesthead"}],"output":{"name":"result"}}],[11,"get_incoming","","",324,{"inputs":[{"name":"http11message"}],"output":{"name":"result"}}],[11,"has_body","","",324,{"inputs":[{"name":"http11message"}],"output":{"name":"bool"}}],[11,"set_read_timeout","","",324,{"inputs":[{"name":"http11message"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",324,{"inputs":[{"name":"http11message"},{"name":"option"}],"output":{"name":"result"}}],[11,"close_connection","","",324,{"inputs":[{"name":"http11message"}],"output":{"name":"result"}}],[11,"set_proxied","","",324,{"inputs":[{"name":"http11message"},{"name":"bool"}],"output":null}],[11,"into_inner","","Consumes the `Http11Message` and returns the underlying `NetworkStream`.",324,{"inputs":[{"name":"http11message"}],"output":{"name":"box"}}],[11,"get_ref","","Gets a mutable reference to the underlying `NetworkStream`, regardless of the state of the\n`Http11Message`.",324,{"inputs":[{"name":"http11message"}],"output":{"name":"networkstream"}}],[11,"get_mut","","Gets a mutable reference to the underlying `NetworkStream`, regardless of the state of the\n`Http11Message`.",324,{"inputs":[{"name":"http11message"}],"output":{"name":"networkstream"}}],[11,"with_stream","","Creates a new `Http11Message` that will use the given `NetworkStream` for communicating to\nthe peer.",324,{"inputs":[{"name":"box"}],"output":{"name":"http11message"}}],[11,"flush_outgoing","","Flushes the current outgoing content and moves the stream into the `stream` property.",324,{"inputs":[{"name":"http11message"}],"output":{"name":"result"}}],[11,"new_message","","",325,{"inputs":[{"name":"http11protocol"},{"name":"str"},{"name":"u16"},{"name":"str"}],"output":{"name":"result"}}],[11,"with_connector","","Creates a new `Http11Protocol` instance that will use the given `NetworkConnector` for\nestablishing HTTP connections.",325,{"inputs":[{"name":"c"}],"output":{"name":"http11protocol"}}],[11,"into_inner","","Unwraps this HttpReader and returns the underlying Reader.",322,{"inputs":[{"name":"httpreader"}],"output":{"name":"r"}}],[11,"get_ref","","Gets a borrowed reference to the underlying Reader.",322,{"inputs":[{"name":"httpreader"}],"output":{"name":"r"}}],[11,"get_mut","","Gets a mutable reference to the underlying Reader.",322,{"inputs":[{"name":"httpreader"}],"output":{"name":"r"}}],[11,"fmt","","",322,{"inputs":[{"name":"httpreader"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",322,null],[11,"into_inner","","Unwraps the HttpWriter and returns the underlying Writer.",323,{"inputs":[{"name":"httpwriter"}],"output":{"name":"w"}}],[11,"get_ref","","Access the inner Writer.",323,{"inputs":[{"name":"httpwriter"}],"output":{"name":"w"}}],[11,"get_mut","","Access the inner Writer mutably.",323,{"inputs":[{"name":"httpwriter"}],"output":{"name":"w"}}],[11,"end","","Ends the HttpWriter, and returns the underlying Writer.",323,{"inputs":[{"name":"httpwriter"}],"output":{"name":"result"}}],[11,"fmt","","",326,{"inputs":[{"name":"enderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","std::io::error","",327,{"inputs":[{"name":"enderror"}],"output":{"name":"error"}}],[11,"write","hyper::http::h1","",323,null],[11,"flush","","",323,{"inputs":[{"name":"httpwriter"}],"output":{"name":"result"}}],[11,"fmt","","",323,{"inputs":[{"name":"httpwriter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",321,{"inputs":[{"name":"incoming"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"h2","hyper::http","Adapts the `solicit`-provided HTTP/2 implementation into the `HttpMessage` API.",null,null],[3,"Http2Protocol","hyper::http::h2","The `Protocol` implementation that provides HTTP/2 messages (i.e. `Http2Message`).",null,null],[3,"Http2Message","","An implementation of the `HttpMessage` trait for HTTP/2.",null,null],[5,"new_protocol","","A convenience method that creates a default `Http2Protocol` that uses a `net::HttpConnector`\n(which produces an `HttpStream` for the underlying transport layer).",null,{"inputs":[],"output":{"name":"http2protocol"}}],[8,"CloneableStream","","A trait alias representing all types that are both `NetworkStream` and `Clone`.",null,null],[11,"with_connector","","Create a new `Http2Protocol` that will use the given `NetworkConnector` to establish TCP\nconnections to the server.",328,{"inputs":[{"name":"c"}],"output":{"name":"http2protocol"}}],[11,"new_message","","",328,{"inputs":[{"name":"http2protocol"},{"name":"str"},{"name":"u16"},{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",329,{"inputs":[{"name":"http2message"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write","","",329,null],[11,"flush","","",329,{"inputs":[{"name":"http2message"}],"output":{"name":"result"}}],[11,"read","","",329,null],[11,"set_outgoing","","",329,{"inputs":[{"name":"http2message"},{"name":"requesthead"}],"output":{"name":"result"}}],[11,"get_incoming","","",329,{"inputs":[{"name":"http2message"}],"output":{"name":"result"}}],[11,"has_body","","",329,{"inputs":[{"name":"http2message"}],"output":{"name":"bool"}}],[11,"set_read_timeout","","",329,{"inputs":[{"name":"http2message"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",329,{"inputs":[{"name":"http2message"},{"name":"option"}],"output":{"name":"result"}}],[11,"close_connection","","",329,{"inputs":[{"name":"http2message"}],"output":{"name":"result"}}],[0,"message","hyper::http","Defines the `HttpMessage` trait that serves to encapsulate the operations of a single\nrequest-response cycle on any HTTP connection.",null,null],[3,"RequestHead","hyper::http::message","Describes a request.",null,null],[12,"headers","","The headers of the request",330,null],[12,"method","","The method of the request",330,null],[12,"url","","The URL of the request",330,null],[3,"ResponseHead","","Describes a response.",null,null],[12,"headers","","The headers of the reponse",331,null],[12,"raw_status","","The raw status line of the response",331,null],[12,"version","","The HTTP/2 version which generated the response",331,null],[8,"Protocol","","The trait provides an API for creating new `HttpMessage`s depending on the underlying HTTP\nprotocol.",null,null],[10,"new_message","","Creates a fresh `HttpMessage` bound to the given host, based on the given protocol scheme.",332,{"inputs":[{"name":"protocol"},{"name":"str"},{"name":"u16"},{"name":"str"}],"output":{"name":"result"}}],[8,"HttpMessage","","The trait provides an API for sending an receiving HTTP messages.",null,null],[10,"set_outgoing","","Initiates a new outgoing request.",333,{"inputs":[{"name":"httpmessage"},{"name":"requesthead"}],"output":{"name":"result"}}],[10,"get_incoming","","Obtains the incoming response and returns its head (i.e. the `ResponseHead` struct)",333,{"inputs":[{"name":"httpmessage"}],"output":{"name":"result"}}],[10,"set_read_timeout","","Set the read timeout duration for this message.",333,{"inputs":[{"name":"httpmessage"},{"name":"option"}],"output":{"name":"result"}}],[10,"set_write_timeout","","Set the write timeout duration for this message.",333,{"inputs":[{"name":"httpmessage"},{"name":"option"}],"output":{"name":"result"}}],[10,"close_connection","","Closes the underlying HTTP connection.",333,{"inputs":[{"name":"httpmessage"}],"output":{"name":"result"}}],[10,"has_body","","Returns whether the incoming message has a body.",333,{"inputs":[{"name":"httpmessage"}],"output":{"name":"bool"}}],[11,"set_proxied","","Called when the Client wishes to use a Proxy.",333,{"inputs":[{"name":"httpmessage"},{"name":"bool"}],"output":null}],[11,"fmt","","",330,{"inputs":[{"name":"requesthead"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",330,{"inputs":[{"name":"requesthead"}],"output":{"name":"requesthead"}}],[11,"fmt","","",331,{"inputs":[{"name":"responsehead"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",331,{"inputs":[{"name":"responsehead"}],"output":{"name":"responsehead"}}],[11,"is","hyper::http","Is the underlying type in this trait object a T?",333,{"inputs":[{"name":"httpmessage"}],"output":{"name":"bool"}}],[11,"downcast_ref","","If the underlying type is T, get a reference to the contained data.",333,{"inputs":[{"name":"httpmessage"}],"output":{"name":"option"}}],[11,"downcast_mut","","If the underlying type is T, get a mutable reference to the contained\ndata.",333,{"inputs":[{"name":"httpmessage"}],"output":{"name":"option"}}],[11,"downcast","","If the underlying type is T, extract it.",333,{"inputs":[{"name":"httpmessage"}],"output":{"name":"result"}}],[11,"fmt","","",334,{"inputs":[{"name":"rawstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",334,{"inputs":[{"name":"rawstatus"},{"name":"rawstatus"}],"output":{"name":"bool"}}],[11,"ne","","",334,{"inputs":[{"name":"rawstatus"},{"name":"rawstatus"}],"output":{"name":"bool"}}],[11,"clone","","",334,{"inputs":[{"name":"rawstatus"}],"output":{"name":"rawstatus"}}],[0,"net","hyper","A collection of traits abstracting over Listeners and Streams.",null,null],[3,"Openssl","hyper::net","An implementation of `Ssl` for OpenSSL.",null,null],[12,"context","","The `SslContext` from openssl crate.",335,null],[3,"OpensslClient","","A client-specific implementation of OpenSSL.",null,null],[3,"NetworkConnections","","An iterator wrapper over a `NetworkAcceptor`.",null,null],[3,"HttpListener","","A `NetworkListener` for `HttpStream`s.",null,null],[3,"HttpStream","","A wrapper around a `TcpStream`.",null,null],[3,"HttpConnector","","A connector that will produce HttpStreams.",null,null],[3,"HttpsListener","","A Http Listener over SSL.",null,null],[3,"HttpsConnector","","A connector that can protect HTTP streams using SSL.",null,null],[4,"Fresh","","The write-status indicating headers have not been written.",null,null],[4,"Streaming","","The write-status indicating headers have been written.",null,null],[4,"HttpsStream","","A stream over the HTTP protocol, possibly protected by SSL.",null,null],[13,"Http","","A plain text stream.",336,null],[13,"Https","","A stream protected by SSL.",336,null],[11,"clone","","",335,{"inputs":[{"name":"openssl"}],"output":{"name":"openssl"}}],[11,"fmt","","",335,{"inputs":[{"name":"openssl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",337,{"inputs":[{"name":"opensslclient"}],"output":{"name":"opensslclient"}}],[11,"fmt","","",337,{"inputs":[{"name":"opensslclient"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",337,{"inputs":[],"output":{"name":"opensslclient"}}],[11,"new","","Creates a new OpensslClient with a custom SslContext",337,{"inputs":[{"name":"sslcontext"}],"output":{"name":"opensslclient"}}],[11,"wrap_client","","",337,{"inputs":[{"name":"opensslclient"},{"name":"t"},{"name":"str"}],"output":{"name":"result"}}],[11,"default","","",335,{"inputs":[],"output":{"name":"openssl"}}],[11,"with_cert_and_key","","Ease creating an `Openssl` with a certificate and key.",335,{"inputs":[{"name":"c"},{"name":"k"}],"output":{"name":"result"}}],[11,"wrap_client","","",335,{"inputs":[{"name":"openssl"},{"name":"httpstream"},{"name":"str"}],"output":{"name":"result"}}],[11,"wrap_server","","",335,{"inputs":[{"name":"openssl"},{"name":"httpstream"}],"output":{"name":"result"}}],[11,"peer_addr","openssl::ssl","",338,{"inputs":[{"name":"sslstream"}],"output":{"name":"result"}}],[11,"set_read_timeout","","",338,{"inputs":[{"name":"sslstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",338,{"inputs":[{"name":"sslstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"close","","",338,{"inputs":[{"name":"sslstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[8,"NetworkListener","hyper::net","An abstraction to listen for connections on a certain port.",null,null],[16,"Stream","","The stream produced for each connection.",339,null],[10,"accept","","Returns an iterator of streams.",339,{"inputs":[{"name":"networklistener"}],"output":{"name":"result"}}],[10,"local_addr","","Get the address this Listener ended up listening on.",339,{"inputs":[{"name":"networklistener"}],"output":{"name":"result"}}],[11,"incoming","","Returns an iterator over incoming connections.",339,{"inputs":[{"name":"networklistener"}],"output":{"name":"networkconnections"}}],[8,"NetworkStream","","An abstraction over streams that a `Server` can utilize.",null,null],[10,"peer_addr","","Get the remote address of the underlying connection.",340,{"inputs":[{"name":"networkstream"}],"output":{"name":"result"}}],[10,"set_read_timeout","","Set the maximum time to wait for a read to complete.",340,{"inputs":[{"name":"networkstream"},{"name":"option"}],"output":{"name":"result"}}],[10,"set_write_timeout","","Set the maximum time to wait for a write to complete.",340,{"inputs":[{"name":"networkstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"close","","This will be called when Stream should no longer be kept alive.",340,{"inputs":[{"name":"networkstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[8,"NetworkConnector","","A connector creates a NetworkStream.",null,null],[16,"Stream","","Type of `Stream` to create",341,null],[10,"connect","","Connect to a remote address.",341,{"inputs":[{"name":"networkconnector"},{"name":"str"},{"name":"u16"},{"name":"str"}],"output":{"name":"result"}}],[8,"Ssl","","Deprecated",null,null],[16,"Stream","","The protected stream.",342,null],[10,"wrap_client","","Wrap a client stream with SSL.",342,{"inputs":[{"name":"ssl"},{"name":"httpstream"},{"name":"str"}],"output":{"name":"result"}}],[10,"wrap_server","","Wrap a server stream with SSL.",342,{"inputs":[{"name":"ssl"},{"name":"httpstream"}],"output":{"name":"result"}}],[8,"SslClient","","An abstraction to allow any SSL implementation to be used with client-side HttpsStreams.",null,null],[16,"Stream","","The protected stream.",343,null],[10,"wrap_client","","Wrap a client stream with SSL.",343,{"inputs":[{"name":"sslclient"},{"name":"t"},{"name":"str"}],"output":{"name":"result"}}],[8,"SslServer","","An abstraction to allow any SSL implementation to be used with server-side HttpsStreams.",null,null],[16,"Stream","","The protected stream.",344,null],[10,"wrap_server","","Wrap a server stream with SSL.",344,{"inputs":[{"name":"sslserver"},{"name":"t"}],"output":{"name":"result"}}],[11,"next","","",345,{"inputs":[{"name":"networkconnections"}],"output":{"name":"option"}}],[11,"from","alloc::boxed","",147,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"fmt","","",147,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","hyper","Is the underlying type in this trait object a `T`?",340,{"inputs":[{"name":"networkstream"}],"output":{"name":"bool"}}],[11,"downcast_ref","","If the underlying type is `T`, get a reference to the contained data.",340,{"inputs":[{"name":"networkstream"}],"output":{"name":"option"}}],[11,"downcast_mut","","If the underlying type is `T`, get a mutable reference to the contained\ndata.",340,{"inputs":[{"name":"networkstream"}],"output":{"name":"option"}}],[11,"downcast","","If the underlying type is `T`, extract it.",340,{"inputs":[{"name":"networkstream"}],"output":{"name":"result"}}],[11,"is","","Is the underlying type in this trait object a `T`?",340,{"inputs":[{"name":"networkstream"}],"output":{"name":"bool"}}],[11,"downcast_ref","","If the underlying type is `T`, get a reference to the contained data.",340,{"inputs":[{"name":"networkstream"}],"output":{"name":"option"}}],[11,"downcast_mut","","If the underlying type is `T`, get a mutable reference to the contained\ndata.",340,{"inputs":[{"name":"networkstream"}],"output":{"name":"option"}}],[11,"downcast","","If the underlying type is `T`, extract it.",340,{"inputs":[{"name":"networkstream"}],"output":{"name":"result"}}],[11,"clone","hyper::net","",346,{"inputs":[{"name":"httplistener"}],"output":{"name":"httplistener"}}],[11,"from","","",346,{"inputs":[{"name":"tcplistener"}],"output":{"name":"httplistener"}}],[11,"new","","Start listening to an address over HTTP.",346,{"inputs":[{"name":"to"}],"output":{"name":"result"}}],[11,"accept","","",346,{"inputs":[{"name":"httplistener"}],"output":{"name":"result"}}],[11,"local_addr","","",346,{"inputs":[{"name":"httplistener"}],"output":{"name":"result"}}],[11,"as_raw_fd","","",346,{"inputs":[{"name":"httplistener"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",346,{"inputs":[{"name":"rawfd"}],"output":{"name":"httplistener"}}],[11,"clone","","",347,{"inputs":[{"name":"httpstream"}],"output":{"name":"httpstream"}}],[11,"fmt","","",347,{"inputs":[{"name":"httpstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",347,null],[11,"write","","",347,null],[11,"flush","","",347,{"inputs":[{"name":"httpstream"}],"output":{"name":"result"}}],[11,"as_raw_fd","","",347,{"inputs":[{"name":"httpstream"}],"output":{"name":"rawfd"}}],[11,"from_raw_fd","","",347,{"inputs":[{"name":"rawfd"}],"output":{"name":"httpstream"}}],[11,"peer_addr","","",347,{"inputs":[{"name":"httpstream"}],"output":{"name":"result"}}],[11,"set_read_timeout","","",347,{"inputs":[{"name":"httpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",347,{"inputs":[{"name":"httpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"close","","",347,{"inputs":[{"name":"httpstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"default","","",348,{"inputs":[],"output":{"name":"httpconnector"}}],[11,"clone","","",348,{"inputs":[{"name":"httpconnector"}],"output":{"name":"httpconnector"}}],[11,"fmt","","",348,{"inputs":[{"name":"httpconnector"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"connect","","",348,{"inputs":[{"name":"httpconnector"},{"name":"str"},{"name":"u16"},{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",336,{"inputs":[{"name":"httpsstream"}],"output":{"name":"httpsstream"}}],[11,"fmt","","",336,{"inputs":[{"name":"httpsstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",336,null],[11,"write","","",336,null],[11,"flush","","",336,{"inputs":[{"name":"httpsstream"}],"output":{"name":"result"}}],[11,"peer_addr","","",336,{"inputs":[{"name":"httpsstream"}],"output":{"name":"result"}}],[11,"set_read_timeout","","",336,{"inputs":[{"name":"httpsstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",336,{"inputs":[{"name":"httpsstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"close","","",336,{"inputs":[{"name":"httpsstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"clone","","",349,{"inputs":[{"name":"httpslistener"}],"output":{"name":"httpslistener"}}],[11,"new","","Start listening to an address over HTTPS.",349,{"inputs":[{"name":"to"},{"name":"s"}],"output":{"name":"result"}}],[11,"with_listener","","Construct an HttpsListener from a bound `TcpListener`.",349,{"inputs":[{"name":"httplistener"},{"name":"s"}],"output":{"name":"httpslistener"}}],[11,"accept","","",349,{"inputs":[{"name":"httpslistener"}],"output":{"name":"result"}}],[11,"local_addr","","",349,{"inputs":[{"name":"httpslistener"}],"output":{"name":"result"}}],[11,"default","","",350,{"inputs":[],"output":{"name":"httpsconnector"}}],[11,"fmt","","",350,{"inputs":[{"name":"httpsconnector"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new connector using the provided SSL implementation.",350,{"inputs":[{"name":"s"}],"output":{"name":"httpsconnector"}}],[11,"with_connector","","Create a new connector using the provided SSL implementation.",350,{"inputs":[{"name":"s"},{"name":"c"}],"output":{"name":"httpsconnector"}}],[11,"connect","","",350,{"inputs":[{"name":"httpsconnector"},{"name":"str"},{"name":"u16"},{"name":"str"}],"output":{"name":"result"}}],[0,"server","hyper","HTTP Server",null,null],[3,"Server","hyper::server","A server can listen on a TCP socket.",null,null],[3,"Listening","","A listening server, which can later be closed.",null,null],[12,"socket","","The socket addresses that the server is bound to.",351,null],[0,"request","","Server Requests",null,null],[3,"Request","hyper::server::request","A request bundles several parts of an incoming `NetworkStream`, given to a `Handler`.",null,null],[12,"remote_addr","","The IP address of the remote connection.",352,null],[12,"method","","The `Method`, such as `Get`, `Post`, etc.",352,null],[12,"headers","","The headers of the incoming request.",352,null],[12,"uri","","The target request-uri for this request.",352,null],[12,"version","","The version of HTTP for this request.",352,null],[11,"new","","Create a new Request, reading the StartLine and Headers so they are\nimmediately useful.",352,{"inputs":[{"name":"bufreader"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"set_read_timeout","","Set the read timeout of the underlying NetworkStream.",352,{"inputs":[{"name":"request"},{"name":"option"}],"output":{"name":"result"}}],[11,"downcast_ref","","Get a reference to the underlying `NetworkStream`.",352,{"inputs":[{"name":"request"}],"output":{"name":"option"}}],[11,"ssl","","Get a reference to the underlying Ssl stream, if connected\nover HTTPS.",352,{"inputs":[{"name":"request"}],"output":{"name":"option"}}],[11,"deconstruct","","Deconstruct a Request into its constituent parts.",352,null],[11,"read","","",352,null],[0,"response","hyper::server","Server Responses",null,null],[3,"Response","hyper::server::response","The outgoing half for a Tcp connection, created by a `Server` and given to a `Handler`.",null,null],[12,"version","","The HTTP version of this response.",353,null],[11,"fmt","","",353,{"inputs":[{"name":"response"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"status","","The status of this response.",353,{"inputs":[{"name":"response"}],"output":{"name":"statuscode"}}],[11,"headers","","The headers of this response.",353,{"inputs":[{"name":"response"}],"output":{"name":"headers"}}],[11,"construct","","Construct a Response from its constituent parts.",353,{"inputs":[{"name":"httpversion"},{"name":"httpwriter"},{"name":"statuscode"},{"name":"headers"}],"output":{"name":"response"}}],[11,"deconstruct","","Deconstruct this Response into its constituent parts.",353,null],[11,"new","","Creates a new Response that can be used to write to a network stream.",353,{"inputs":[{"name":"write"},{"name":"headers"}],"output":{"name":"response"}}],[11,"send","","Writes the body and ends the response.",353,null],[11,"start","","Consume this Response&lt;Fresh&gt;, writing the Headers and Status and\ncreating a Response&lt;Streaming&gt;",353,{"inputs":[{"name":"response"}],"output":{"name":"result"}}],[11,"status_mut","","Get a mutable reference to the status.",353,{"inputs":[{"name":"response"}],"output":{"name":"statuscode"}}],[11,"headers_mut","","Get a mutable reference to the Headers.",353,{"inputs":[{"name":"response"}],"output":{"name":"headers"}}],[11,"end","","Flushes all writing of a response to the client.",353,{"inputs":[{"name":"response"}],"output":{"name":"result"}}],[11,"write","","",353,null],[11,"flush","","",353,{"inputs":[{"name":"response"}],"output":{"name":"result"}}],[11,"drop","","",353,{"inputs":[{"name":"response"}],"output":null}],[8,"Handler","hyper::server","A handler that can handle incoming requests for a server.",null,null],[10,"handle","","Receives a `Request`/`Response` pair, and should perform some action on them.",354,{"inputs":[{"name":"handler"},{"name":"request"},{"name":"response"}],"output":null}],[11,"check_continue","","Called when a Request includes a `Expect: 100-continue` header.",354,null],[11,"on_connection_start","","This is run after a connection is received, on a per-connection basis (not a\nper-request basis, as a connection with keep-alive may handle multiple\nrequests)",354,{"inputs":[{"name":"handler"}],"output":null}],[11,"on_connection_end","","This is run before a connection is closed, on a per-connection basis (not a\nper-request basis, as a connection with keep-alive may handle multiple\nrequests)",354,{"inputs":[{"name":"handler"}],"output":null}],[11,"fmt","","",355,{"inputs":[{"name":"server"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new server with the provided handler.",355,{"inputs":[{"name":"l"}],"output":{"name":"server"}}],[11,"keep_alive","","Controls keep-alive for this server.",355,{"inputs":[{"name":"server"},{"name":"option"}],"output":null}],[11,"set_read_timeout","","Sets the read timeout for all Request reads.",355,{"inputs":[{"name":"server"},{"name":"option"}],"output":null}],[11,"set_write_timeout","","Sets the write timeout for all Response writes.",355,{"inputs":[{"name":"server"},{"name":"option"}],"output":null}],[11,"http","","Creates a new server that will handle `HttpStream`s.",355,{"inputs":[{"name":"to"}],"output":{"name":"result"}}],[11,"https","","Creates a new server that will handle `HttpStream`s over SSL.",355,{"inputs":[{"name":"a"},{"name":"s"}],"output":{"name":"result"}}],[11,"handle","","Binds to a socket and starts handling connections.",355,{"inputs":[{"name":"server"},{"name":"h"}],"output":{"name":"result"}}],[11,"handle_threads","","Binds to a socket and starts handling connections with the provided\nnumber of threads.",355,{"inputs":[{"name":"server"},{"name":"h"},{"name":"usize"}],"output":{"name":"result"}}],[11,"fmt","","",351,{"inputs":[{"name":"listening"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",351,{"inputs":[{"name":"listening"}],"output":null}],[11,"close","","Warning: This function doesn&#39;t work. The server remains listening after you called\nit. See https://github.com/hyperium/hyper/issues/338 for more details.",351,{"inputs":[{"name":"listening"}],"output":{"name":"result"}}],[0,"status","hyper","HTTP status codes",null,null],[4,"StatusCode","hyper::status","An HTTP status code (`status-code` in RFC 7230 et al.).",null,null],[13,"Continue","","100 Continue\n[[RFC7231, Section 6.2.1](https://tools.ietf.org/html/rfc7231#section-6.2.1)]",356,null],[13,"SwitchingProtocols","","101 Switching Protocols\n[[RFC7231, Section 6.2.2](https://tools.ietf.org/html/rfc7231#section-6.2.2)]",356,null],[13,"Processing","","102 Processing\n[[RFC2518](https://tools.ietf.org/html/rfc2518)]",356,null],[13,"Ok","","200 OK\n[[RFC7231, Section 6.3.1](https://tools.ietf.org/html/rfc7231#section-6.3.1)]",356,null],[13,"Created","","201 Created\n[[RFC7231, Section 6.3.2](https://tools.ietf.org/html/rfc7231#section-6.3.2)]",356,null],[13,"Accepted","","202 Accepted\n[[RFC7231, Section 6.3.3](https://tools.ietf.org/html/rfc7231#section-6.3.3)]",356,null],[13,"NonAuthoritativeInformation","","203 Non-Authoritative Information\n[[RFC7231, Section 6.3.4](https://tools.ietf.org/html/rfc7231#section-6.3.4)]",356,null],[13,"NoContent","","204 No Content\n[[RFC7231, Section 6.3.5](https://tools.ietf.org/html/rfc7231#section-6.3.5)]",356,null],[13,"ResetContent","","205 Reset Content\n[[RFC7231, Section 6.3.6](https://tools.ietf.org/html/rfc7231#section-6.3.6)]",356,null],[13,"PartialContent","","206 Partial Content\n[[RFC7233, Section 4.1](https://tools.ietf.org/html/rfc7233#section-4.1)]",356,null],[13,"MultiStatus","","207 Multi-Status\n[[RFC4918](https://tools.ietf.org/html/rfc4918)]",356,null],[13,"AlreadyReported","","208 Already Reported\n[[RFC5842](https://tools.ietf.org/html/rfc5842)]",356,null],[13,"ImUsed","","226 IM Used\n[[RFC3229](https://tools.ietf.org/html/rfc3229)]",356,null],[13,"MultipleChoices","","300 Multiple Choices\n[[RFC7231, Section 6.4.1](https://tools.ietf.org/html/rfc7231#section-6.4.1)]",356,null],[13,"MovedPermanently","","301 Moved Permanently\n[[RFC7231, Section 6.4.2](https://tools.ietf.org/html/rfc7231#section-6.4.2)]",356,null],[13,"Found","","302 Found\n[[RFC7231, Section 6.4.3](https://tools.ietf.org/html/rfc7231#section-6.4.3)]",356,null],[13,"SeeOther","","303 See Other\n[[RFC7231, Section 6.4.4](https://tools.ietf.org/html/rfc7231#section-6.4.4)]",356,null],[13,"NotModified","","304 Not Modified\n[[RFC7232, Section 4.1](https://tools.ietf.org/html/rfc7232#section-4.1)]",356,null],[13,"UseProxy","","305 Use Proxy\n[[RFC7231, Section 6.4.5](https://tools.ietf.org/html/rfc7231#section-6.4.5)]",356,null],[13,"TemporaryRedirect","","307 Temporary Redirect\n[[RFC7231, Section 6.4.7](https://tools.ietf.org/html/rfc7231#section-6.4.7)]",356,null],[13,"PermanentRedirect","","308 Permanent Redirect\n[[RFC7238](https://tools.ietf.org/html/rfc7238)]",356,null],[13,"BadRequest","","400 Bad Request\n[[RFC7231, Section 6.5.1](https://tools.ietf.org/html/rfc7231#section-6.5.1)]",356,null],[13,"Unauthorized","","401 Unauthorized\n[[RFC7235, Section 3.1](https://tools.ietf.org/html/rfc7235#section-3.1)]",356,null],[13,"PaymentRequired","","402 Payment Required\n[[RFC7231, Section 6.5.2](https://tools.ietf.org/html/rfc7231#section-6.5.2)]",356,null],[13,"Forbidden","","403 Forbidden\n[[RFC7231, Section 6.5.3](https://tools.ietf.org/html/rfc7231#section-6.5.3)]",356,null],[13,"NotFound","","404 Not Found\n[[RFC7231, Section 6.5.4](https://tools.ietf.org/html/rfc7231#section-6.5.4)]",356,null],[13,"MethodNotAllowed","","405 Method Not Allowed\n[[RFC7231, Section 6.5.5](https://tools.ietf.org/html/rfc7231#section-6.5.5)]",356,null],[13,"NotAcceptable","","406 Not Acceptable\n[[RFC7231, Section 6.5.6](https://tools.ietf.org/html/rfc7231#section-6.5.6)]",356,null],[13,"ProxyAuthenticationRequired","","407 Proxy Authentication Required\n[[RFC7235, Section 3.2](https://tools.ietf.org/html/rfc7235#section-3.2)]",356,null],[13,"RequestTimeout","","408 Request Timeout\n[[RFC7231, Section 6.5.7](https://tools.ietf.org/html/rfc7231#section-6.5.7)]",356,null],[13,"Conflict","","409 Conflict\n[[RFC7231, Section 6.5.8](https://tools.ietf.org/html/rfc7231#section-6.5.8)]",356,null],[13,"Gone","","410 Gone\n[[RFC7231, Section 6.5.9](https://tools.ietf.org/html/rfc7231#section-6.5.9)]",356,null],[13,"LengthRequired","","411 Length Required\n[[RFC7231, Section 6.5.10](https://tools.ietf.org/html/rfc7231#section-6.5.10)]",356,null],[13,"PreconditionFailed","","412 Precondition Failed\n[[RFC7232, Section 4.2](https://tools.ietf.org/html/rfc7232#section-4.2)]",356,null],[13,"PayloadTooLarge","","413 Payload Too Large\n[[RFC7231, Section 6.5.11](https://tools.ietf.org/html/rfc7231#section-6.5.11)]",356,null],[13,"UriTooLong","","414 URI Too Long\n[[RFC7231, Section 6.5.12](https://tools.ietf.org/html/rfc7231#section-6.5.12)]",356,null],[13,"UnsupportedMediaType","","415 Unsupported Media Type\n[[RFC7231, Section 6.5.13](https://tools.ietf.org/html/rfc7231#section-6.5.13)]",356,null],[13,"RangeNotSatisfiable","","416 Range Not Satisfiable\n[[RFC7233, Section 4.4](https://tools.ietf.org/html/rfc7233#section-4.4)]",356,null],[13,"ExpectationFailed","","417 Expectation Failed\n[[RFC7231, Section 6.5.14](https://tools.ietf.org/html/rfc7231#section-6.5.14)]",356,null],[13,"ImATeapot","","418 I&#39;m a teapot\n[curiously, not registered by IANA, but [RFC2324](https://tools.ietf.org/html/rfc2324)]",356,null],[13,"MisdirectedRequest","","421 Misdirected Request\n[RFC7540, Section 9.1.2](http://tools.ietf.org/html/rfc7540#section-9.1.2)",356,null],[13,"UnprocessableEntity","","422 Unprocessable Entity\n[[RFC4918](https://tools.ietf.org/html/rfc4918)]",356,null],[13,"Locked","","423 Locked\n[[RFC4918](https://tools.ietf.org/html/rfc4918)]",356,null],[13,"FailedDependency","","424 Failed Dependency\n[[RFC4918](https://tools.ietf.org/html/rfc4918)]",356,null],[13,"UpgradeRequired","","426 Upgrade Required\n[[RFC7231, Section 6.5.15](https://tools.ietf.org/html/rfc7231#section-6.5.15)]",356,null],[13,"PreconditionRequired","","428 Precondition Required\n[[RFC6585](https://tools.ietf.org/html/rfc6585)]",356,null],[13,"TooManyRequests","","429 Too Many Requests\n[[RFC6585](https://tools.ietf.org/html/rfc6585)]",356,null],[13,"RequestHeaderFieldsTooLarge","","431 Request Header Fields Too Large\n[[RFC6585](https://tools.ietf.org/html/rfc6585)]",356,null],[13,"UnavailableForLegalReasons","","451 Unavailable For Legal Reasons\n[[RFC7725](http://tools.ietf.org/html/rfc7725)]",356,null],[13,"InternalServerError","","500 Internal Server Error\n[[RFC7231, Section 6.6.1](https://tools.ietf.org/html/rfc7231#section-6.6.1)]",356,null],[13,"NotImplemented","","501 Not Implemented\n[[RFC7231, Section 6.6.2](https://tools.ietf.org/html/rfc7231#section-6.6.2)]",356,null],[13,"BadGateway","","502 Bad Gateway\n[[RFC7231, Section 6.6.3](https://tools.ietf.org/html/rfc7231#section-6.6.3)]",356,null],[13,"ServiceUnavailable","","503 Service Unavailable\n[[RFC7231, Section 6.6.4](https://tools.ietf.org/html/rfc7231#section-6.6.4)]",356,null],[13,"GatewayTimeout","","504 Gateway Timeout\n[[RFC7231, Section 6.6.5](https://tools.ietf.org/html/rfc7231#section-6.6.5)]",356,null],[13,"HttpVersionNotSupported","","505 HTTP Version Not Supported\n[[RFC7231, Section 6.6.6](https://tools.ietf.org/html/rfc7231#section-6.6.6)]",356,null],[13,"VariantAlsoNegotiates","","506 Variant Also Negotiates\n[[RFC2295](https://tools.ietf.org/html/rfc2295)]",356,null],[13,"InsufficientStorage","","507 Insufficient Storage\n[[RFC4918](https://tools.ietf.org/html/rfc4918)]",356,null],[13,"LoopDetected","","508 Loop Detected\n[[RFC5842](https://tools.ietf.org/html/rfc5842)]",356,null],[13,"NotExtended","","510 Not Extended\n[[RFC2774](https://tools.ietf.org/html/rfc2774)]",356,null],[13,"NetworkAuthenticationRequired","","511 Network Authentication Required\n[[RFC6585](https://tools.ietf.org/html/rfc6585)]",356,null],[13,"Unregistered","","A status code not in the IANA HTTP status code registry or very well known",356,null],[4,"StatusClass","","The class of an HTTP `status-code`.",null,null],[13,"Informational","","1xx (Informational): The request was received, continuing process",357,null],[13,"Success","","2xx (Success): The request was successfully received, understood, and accepted",357,null],[13,"Redirection","","3xx (Redirection): Further action needs to be taken in order to complete the request",357,null],[13,"ClientError","","4xx (Client Error): The request contains bad syntax or cannot be fulfilled",357,null],[13,"ServerError","","5xx (Server Error): The server failed to fulfill an apparently valid request",357,null],[13,"NoClass","","A status code lower than 100 or higher than 599. These codes do no belong to any class.",357,null],[11,"hash","","",356,null],[11,"fmt","","",356,{"inputs":[{"name":"statuscode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"canonical_reason","","Get the standardised `reason-phrase` for this status code.",356,{"inputs":[{"name":"statuscode"}],"output":{"name":"option"}}],[11,"class","","Determine the class of a status code, based on its first digit.",356,{"inputs":[{"name":"statuscode"}],"output":{"name":"statusclass"}}],[11,"is_informational","","Check if class is Informational.",356,{"inputs":[{"name":"statuscode"}],"output":{"name":"bool"}}],[11,"is_success","","Check if class is Success.",356,{"inputs":[{"name":"statuscode"}],"output":{"name":"bool"}}],[11,"is_redirection","","Check if class is Redirection.",356,{"inputs":[{"name":"statuscode"}],"output":{"name":"bool"}}],[11,"is_client_error","","Check if class is ClientError.",356,{"inputs":[{"name":"statuscode"}],"output":{"name":"bool"}}],[11,"is_server_error","","Check if class is ServerError.",356,{"inputs":[{"name":"statuscode"}],"output":{"name":"bool"}}],[11,"is_strange_status","","Check if class is NoClass",356,{"inputs":[{"name":"statuscode"}],"output":{"name":"bool"}}],[11,"fmt","","",356,{"inputs":[{"name":"statuscode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",356,{"inputs":[{"name":"statuscode"},{"name":"statuscode"}],"output":{"name":"bool"}}],[11,"clone","","",356,{"inputs":[{"name":"statuscode"}],"output":{"name":"statuscode"}}],[11,"partial_cmp","","",356,{"inputs":[{"name":"statuscode"},{"name":"statuscode"}],"output":{"name":"option"}}],[11,"cmp","","",356,{"inputs":[{"name":"statuscode"},{"name":"statuscode"}],"output":{"name":"ordering"}}],[11,"cmp","","",357,{"inputs":[{"name":"statusclass"},{"name":"statusclass"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",357,{"inputs":[{"name":"statusclass"},{"name":"statusclass"}],"output":{"name":"option"}}],[11,"lt","","",357,{"inputs":[{"name":"statusclass"},{"name":"statusclass"}],"output":{"name":"bool"}}],[11,"le","","",357,{"inputs":[{"name":"statusclass"},{"name":"statusclass"}],"output":{"name":"bool"}}],[11,"gt","","",357,{"inputs":[{"name":"statusclass"},{"name":"statusclass"}],"output":{"name":"bool"}}],[11,"ge","","",357,{"inputs":[{"name":"statusclass"},{"name":"statusclass"}],"output":{"name":"bool"}}],[11,"eq","","",357,{"inputs":[{"name":"statusclass"},{"name":"statusclass"}],"output":{"name":"bool"}}],[11,"ne","","",357,{"inputs":[{"name":"statusclass"},{"name":"statusclass"}],"output":{"name":"bool"}}],[11,"clone","","",357,{"inputs":[{"name":"statusclass"}],"output":{"name":"statusclass"}}],[11,"fmt","","",357,{"inputs":[{"name":"statusclass"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default_code","","Get the default status code for the class.",357,{"inputs":[{"name":"statusclass"}],"output":{"name":"statuscode"}}],[0,"uri","hyper","HTTP RequestUris",null,null],[4,"RequestUri","hyper::uri","The Request-URI of a Request&#39;s StartLine.",null,null],[13,"AbsolutePath","","The most common request target, an absolute path and optional query.",358,null],[13,"AbsoluteUri","","An absolute URI. Used in conjunction with proxies.",358,null],[13,"Authority","","The authority form is only for use with `CONNECT` requests.",358,null],[13,"Star","","The star is used to target the entire server, instead of a specific resource.",358,null],[11,"clone","","",358,{"inputs":[{"name":"requesturi"}],"output":{"name":"requesturi"}}],[11,"eq","","",358,{"inputs":[{"name":"requesturi"},{"name":"requesturi"}],"output":{"name":"bool"}}],[11,"ne","","",358,{"inputs":[{"name":"requesturi"},{"name":"requesturi"}],"output":{"name":"bool"}}],[11,"fmt","","",358,{"inputs":[{"name":"requesturi"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",358,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",358,{"inputs":[{"name":"requesturi"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"version","hyper","HTTP Versions enum",null,null],[4,"HttpVersion","hyper::version","Represents a version of the HTTP spec.",null,null],[13,"Http09","","`HTTP/0.9`",359,null],[13,"Http10","","`HTTP/1.0`",359,null],[13,"Http11","","`HTTP/1.1`",359,null],[13,"Http20","","`HTTP/2.0`",359,null],[11,"fmt","","",359,{"inputs":[{"name":"httpversion"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",359,null],[11,"cmp","","",359,{"inputs":[{"name":"httpversion"},{"name":"httpversion"}],"output":{"name":"ordering"}}],[11,"clone","","",359,{"inputs":[{"name":"httpversion"}],"output":{"name":"httpversion"}}],[11,"partial_cmp","","",359,{"inputs":[{"name":"httpversion"},{"name":"httpversion"}],"output":{"name":"option"}}],[11,"lt","","",359,{"inputs":[{"name":"httpversion"},{"name":"httpversion"}],"output":{"name":"bool"}}],[11,"le","","",359,{"inputs":[{"name":"httpversion"},{"name":"httpversion"}],"output":{"name":"bool"}}],[11,"gt","","",359,{"inputs":[{"name":"httpversion"},{"name":"httpversion"}],"output":{"name":"bool"}}],[11,"ge","","",359,{"inputs":[{"name":"httpversion"},{"name":"httpversion"}],"output":{"name":"bool"}}],[11,"eq","","",359,{"inputs":[{"name":"httpversion"},{"name":"httpversion"}],"output":{"name":"bool"}}],[11,"ne","","",359,{"inputs":[{"name":"httpversion"},{"name":"httpversion"}],"output":{"name":"bool"}}],[11,"fmt","","",359,{"inputs":[{"name":"httpversion"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"mime","hyper","Re-exporting the mime crate, for convenience.",null,null],[14,"header!","","",null,null]],"paths":[[3,"Url"],[3,"EncodingOverride"],[4,"HostInternal"],[4,"Host"],[3,"HostAndPort"],[3,"SocketAddrs"],[4,"Origin"],[3,"OpaqueOrigin"],[3,"PathSegmentsMut"],[4,"ParseError"],[4,"SchemeType"],[3,"Input"],[4,"Context"],[3,"Parser"],[4,"Position"],[3,"Parse"],[3,"ParseIntoOwned"],[3,"ByteSerialize"],[3,"String"],[3,"UrlQuery"],[3,"Serializer"],[3,"SIMPLE_ENCODE_SET"],[3,"QUERY_ENCODE_SET"],[3,"DEFAULT_ENCODE_SET"],[3,"PATH_SEGMENT_ENCODE_SET"],[3,"USERINFO_ENCODE_SET"],[3,"PercentEncode"],[4,"Cow"],[3,"PercentDecode"],[3,"ParseOptions"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"Mapping"],[3,"Flags"],[4,"Error"],[3,"Errors"],[3,"LanguageTag"],[4,"Error"],[4,"Body"],[4,"RedirectPolicy"],[3,"Config"],[3,"Pool"],[3,"PooledStream"],[3,"Request"],[3,"Response"],[8,"IntoUrl"],[3,"Client"],[3,"RequestBuilder"],[4,"Error"],[4,"Method"],[3,"CookiePair"],[3,"CookieJar"],[3,"Iter"],[3,"AttrVal"],[3,"EntityTag"],[3,"QualityItem"],[3,"Basic"],[3,"Bearer"],[3,"ContentDisposition"],[3,"Host"],[3,"StrictTransportSecurity"],[3,"Protocol"],[4,"Charset"],[4,"Encoding"],[4,"AccessControlAllowOrigin"],[4,"RangeUnit"],[4,"CacheDirective"],[4,"ConnectionOption"],[4,"DispositionType"],[4,"DispositionParam"],[4,"ContentRangeSpec"],[4,"Expect"],[4,"IfMatch"],[4,"IfNoneMatch"],[4,"IfRange"],[4,"Pragma"],[4,"Preference"],[4,"Range"],[4,"ByteRangeSpec"],[4,"ProtocolName"],[4,"Vary"],[3,"Accept"],[3,"Vec"],[3,"BinaryHeap"],[3,"Hole"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Root"],[3,"NodeRef"],[3,"Handle"],[3,"BTreeMap"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Range"],[3,"RangeMut"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"BTreeSet"],[3,"Iter"],[3,"IntoIter"],[3,"Range"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[3,"EnumSet"],[3,"Iter"],[3,"Iter"],[3,"IntoIter"],[3,"Rawlink"],[3,"LinkedList"],[3,"IterMut"],[3,"FrontPlace"],[3,"BackPlace"],[3,"EncodeUtf16"],[4,"SearchStep"],[3,"CharEqSearcher"],[3,"CharEqPattern"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[4,"StrSearcherImpl"],[3,"EmptyNeedle"],[3,"TwoWaySearcher"],[4,"MatchOnly"],[4,"RejectAndMatch"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[4,"ParseError"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[4,"Bound"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"Box"],[3,"AccessControlAllowCredentials"],[3,"AccessControlAllowHeaders"],[3,"AccessControlAllowMethods"],[3,"AccessControlExposeHeaders"],[3,"AccessControlMaxAge"],[3,"AccessControlRequestHeaders"],[3,"AccessControlRequestMethod"],[3,"AcceptCharset"],[3,"AcceptEncoding"],[3,"AcceptLanguage"],[3,"AcceptRanges"],[3,"Allow"],[3,"Authorization"],[3,"CacheControl"],[3,"Cookie"],[3,"Connection"],[3,"ContentEncoding"],[3,"ContentLanguage"],[3,"ContentLength"],[3,"ContentRange"],[3,"ContentType"],[3,"Mime"],[4,"TopLevel"],[4,"SubLevel"],[4,"Attr"],[4,"Value"],[3,"Date"],[3,"ETag"],[3,"Expires"],[3,"From"],[3,"IfModifiedSince"],[3,"IfUnmodifiedSince"],[3,"LastModified"],[3,"Location"],[3,"Prefer"],[3,"PreferenceApplied"],[3,"Referer"],[3,"Server"],[3,"SetCookie"],[3,"TransferEncoding"],[3,"Upgrade"],[3,"UserAgent"],[4,"Option"],[3,"Wrapping"],[4,"FpCategory"],[3,"ParseIntError"],[4,"IntErrorKind"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[4,"Ordering"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"RefMut"],[3,"BorrowRefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[4,"EscapeUnicodeState"],[3,"EscapeDefault"],[4,"EscapeDefaultState"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[4,"ChainState"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"StepBy"],[3,"RangeInclusive"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"GenericSplitN"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"SplitInternal"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitNInternal"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndicesInternal"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"MatchesInternal"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"LinesAnyMap"],[3,"CharRange"],[3,"SipHasher"],[3,"BuildHasherDefault"],[3,"Binary"],[3,"Octal"],[3,"Decimal"],[3,"LowerHex"],[3,"UpperHex"],[3,"Radix"],[3,"RadixFmt"],[3,"PadAdapter"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugInner"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Error"],[3,"ArgumentV1"],[4,"FlagV1"],[3,"Arguments"],[3,"Formatter"],[3,"HttpDate"],[3,"Quality"],[3,"ExtendedValue"],[3,"HTTP_VALUE"],[8,"Scheme"],[8,"Header"],[8,"HeaderFormat"],[3,"Headers"],[3,"HeadersItems"],[3,"HeaderView"],[3,"HeaderFormatter"],[3,"Incoming"],[4,"HttpReader"],[4,"HttpWriter"],[3,"Http11Message"],[3,"Http11Protocol"],[3,"EndError"],[3,"Error"],[3,"Http2Protocol"],[3,"Http2Message"],[3,"RequestHead"],[3,"ResponseHead"],[8,"Protocol"],[8,"HttpMessage"],[3,"RawStatus"],[3,"Openssl"],[4,"HttpsStream"],[3,"OpensslClient"],[3,"SslStream"],[8,"NetworkListener"],[8,"NetworkStream"],[8,"NetworkConnector"],[8,"Ssl"],[8,"SslClient"],[8,"SslServer"],[3,"NetworkConnections"],[3,"HttpListener"],[3,"HttpStream"],[3,"HttpConnector"],[3,"HttpsListener"],[3,"HttpsConnector"],[3,"Listening"],[3,"Request"],[3,"Response"],[8,"Handler"],[3,"Server"],[4,"StatusCode"],[4,"StatusClass"],[4,"RequestUri"],[4,"HttpVersion"]]};
searchIndex["cookie"] = {"doc":"","items":[[3,"CookieJar","cookie","A jar of cookies for managing a session",null,null],[3,"Cookie","","",null,null],[12,"name","","",0,null],[12,"value","","",0,null],[12,"expires","","",0,null],[12,"max_age","","",0,null],[12,"domain","","",0,null],[12,"path","","",0,null],[12,"secure","","",0,null],[12,"httponly","","",0,null],[12,"custom","","",0,null],[3,"AttrVal","","",null,null],[11,"new","","Creates a new empty cookie jar with the given signing key.",1,null],[11,"add_original","","Adds an original cookie from a request.",1,{"inputs":[{"name":"cookiejar"},{"name":"cookie"}],"output":null}],[11,"add","","Adds a new cookie to this cookie jar.",1,{"inputs":[{"name":"cookiejar"},{"name":"cookie"}],"output":null}],[11,"remove","","Removes a cookie from this cookie jar.",1,{"inputs":[{"name":"cookiejar"},{"name":"str"}],"output":null}],[11,"find","","Finds a cookie inside of this cookie jar.",1,{"inputs":[{"name":"cookiejar"},{"name":"str"}],"output":{"name":"option"}}],[11,"signed","","Creates a child signed cookie jar.",1,{"inputs":[{"name":"cookiejar"}],"output":{"name":"cookiejar"}}],[11,"encrypted","","Creates a child encrypted cookie jar.",1,{"inputs":[{"name":"cookiejar"}],"output":{"name":"cookiejar"}}],[11,"permanent","","Creates a child jar for permanent cookie storage.",1,{"inputs":[{"name":"cookiejar"}],"output":{"name":"cookiejar"}}],[11,"delta","","Calculates the changes that have occurred to this cookie jar over time,\nreturning a vector of `Set-Cookie` headers.",1,{"inputs":[{"name":"cookiejar"}],"output":{"name":"vec"}}],[11,"iter","","Return an iterator over the cookies in this jar.",1,{"inputs":[{"name":"cookiejar"}],"output":{"name":"iter"}}],[11,"fmt","","",0,{"inputs":[{"name":"cookie"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"cookie"}],"output":{"name":"cookie"}}],[11,"eq","","",0,{"inputs":[{"name":"cookie"},{"name":"cookie"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"cookie"},{"name":"cookie"}],"output":{"name":"bool"}}],[11,"new","","",0,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"cookie"}}],[11,"parse","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"pair","","",0,{"inputs":[{"name":"cookie"}],"output":{"name":"attrval"}}],[11,"fmt","","",2,{"inputs":[{"name":"attrval"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"cookie"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}]],"paths":[[3,"Cookie"],[3,"CookieJar"],[3,"AttrVal"]]};
searchIndex["openssl_verify"] = {"doc":"Hostname verification for OpenSSL.","items":[[5,"verify_callback","openssl_verify","A convenience wrapper around verify_hostname that implements the logic for\nOpenSSL&#39;s certificate verification callback.",null,{"inputs":[{"name":"str"},{"name":"bool"},{"name":"x509storecontext"}],"output":{"name":"bool"}}],[5,"verify_hostname","","Validates that the certificate matches the provided fully qualified domain\nname.",null,{"inputs":[{"name":"str"},{"name":"x509"}],"output":{"name":"bool"}}]],"paths":[]};
searchIndex["url"] = {"doc":"&lt;a href=&quot;https://github.com/servo/rust-url&quot;&gt;&lt;img style=&quot;position: absolute; top: 0; left: 0; border: 0;&quot; src=&quot;../github.png&quot; alt=&quot;Fork me on GitHub&quot;&gt;&lt;/a&gt;\n&lt;style&gt;.sidebar { margin-top: 53px }&lt;/style&gt;","items":[[3,"OpaqueOrigin","url","Opaque identifier for URLs that have file or other schemes",null,null],[3,"HostAndPort","","This mostly exists because coherence rules don’t allow us to implement\n`ToSocketAddrs for (Host&lt;S&gt;, u16)`.",null,null],[12,"host","","",0,null],[12,"port","","",0,null],[3,"SocketAddrs","","Socket addresses for an URL.",null,null],[3,"PathSegmentsMut","","Exposes methods to manipulate the path of an URL that is not cannot-be-base.",null,null],[3,"Url","","A parsed URL record.",null,null],[3,"ParseOptions","","Full configuration for the URL parser.",null,null],[3,"UrlQuery","","Implementation detail of `Url::query_pairs_mut`. Typically not used directly.",null,null],[4,"Origin","","The origin of an URL",null,null],[13,"Opaque","","A globally unique identifier",1,null],[13,"Tuple","","Consists of the URL&#39;s scheme, host and port",1,null],[4,"Host","","The host name of an URL.",null,null],[13,"Domain","","A DNS domain name, as &#39;.&#39; dot-separated labels.\nNon-ASCII labels are encoded in punycode per IDNA.",2,null],[13,"Ipv4","","An IPv4 address.\n`Url::host_str` returns the serialization of this address,\nas four decimal integers separated by `.` dots.",2,null],[13,"Ipv6","","An IPv6 address.\n`Url::host_str` returns the serialization of that address between `[` and `]` brackets,\nin the format per [RFC 5952 *A Recommendation\nfor IPv6 Address Text Representation*](https://tools.ietf.org/html/rfc5952):\nlowercase hexadecimal with maximal `::` compression.",2,null],[4,"ParseError","","Errors that can occur during parsing.",null,null],[13,"EmptyHost","","",3,null],[13,"IdnaError","","",3,null],[13,"InvalidPort","","",3,null],[13,"InvalidIpv4Address","","",3,null],[13,"InvalidIpv6Address","","",3,null],[13,"InvalidDomainCharacter","","",3,null],[13,"RelativeUrlWithoutBase","","",3,null],[13,"RelativeUrlWithCannotBeABaseBase","","",3,null],[13,"SetHostOnCannotBeABaseUrl","","",3,null],[13,"Overflow","","",3,null],[4,"Position","","Indicates a position within a URL based on its components.",null,null],[13,"BeforeScheme","","",4,null],[13,"AfterScheme","","",4,null],[13,"BeforeUsername","","",4,null],[13,"AfterUsername","","",4,null],[13,"BeforePassword","","",4,null],[13,"AfterPassword","","",4,null],[13,"BeforeHost","","",4,null],[13,"AfterHost","","",4,null],[13,"BeforePort","","",4,null],[13,"AfterPort","","",4,null],[13,"BeforePath","","",4,null],[13,"AfterPath","","",4,null],[13,"BeforeQuery","","",4,null],[13,"AfterQuery","","",4,null],[13,"BeforeFragment","","",4,null],[13,"AfterFragment","","",4,null],[11,"hash","","",2,null],[11,"partial_cmp","","",2,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"ordering"}}],[11,"eq","","",2,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"host"},{"name":"host"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"host"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"host"}],"output":{"name":"host"}}],[11,"to_owned","","Return a copy of `self` that owns an allocated `String` but does not borrow an `&amp;Url`.",2,{"inputs":[{"name":"host"}],"output":{"name":"host"}}],[11,"parse","","Parse a host: either an IPv6 address in [] square brackets, or a domain.",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"host"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_owned","","Return a copy of `self` that owns an allocated `String` but does not borrow an `&amp;Url`.",0,{"inputs":[{"name":"hostandport"}],"output":{"name":"hostandport"}}],[11,"to_socket_addrs","","",0,{"inputs":[{"name":"hostandport"}],"output":{"name":"result"}}],[11,"next","","",5,{"inputs":[{"name":"socketaddrs"}],"output":{"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"origin"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"origin"}],"output":{"name":"origin"}}],[11,"eq","","",1,{"inputs":[{"name":"origin"},{"name":"origin"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"origin"},{"name":"origin"}],"output":{"name":"bool"}}],[11,"new_opaque","","Creates a new opaque origin that is only equal to itself.",1,{"inputs":[],"output":{"name":"origin"}}],[11,"is_tuple","","Return whether this origin is a (scheme, host, port) tuple\n(as opposed to an opaque origin).",1,{"inputs":[{"name":"origin"}],"output":{"name":"bool"}}],[11,"ascii_serialization","","https://html.spec.whatwg.org/multipage/#ascii-serialisation-of-an-origin",1,{"inputs":[{"name":"origin"}],"output":{"name":"string"}}],[11,"unicode_serialization","","https://html.spec.whatwg.org/multipage/#unicode-serialisation-of-an-origin",1,{"inputs":[{"name":"origin"}],"output":{"name":"string"}}],[11,"fmt","","",6,{"inputs":[{"name":"opaqueorigin"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"opaqueorigin"}],"output":{"name":"opaqueorigin"}}],[11,"eq","","",6,{"inputs":[{"name":"opaqueorigin"},{"name":"opaqueorigin"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"opaqueorigin"},{"name":"opaqueorigin"}],"output":{"name":"bool"}}],[11,"drop","","",7,{"inputs":[{"name":"pathsegmentsmut"}],"output":null}],[11,"clear","","Remove all segments in the path, leaving the minimal `url.path() == &quot;/&quot;`.",7,{"inputs":[{"name":"pathsegmentsmut"}],"output":{"name":"self"}}],[11,"pop_if_empty","","Remove the last segment of this URL’s path if it is empty,\nexcept if these was only one segment to begin with.",7,{"inputs":[{"name":"pathsegmentsmut"}],"output":{"name":"self"}}],[11,"pop","","Remove the last segment of this URL’s path.",7,{"inputs":[{"name":"pathsegmentsmut"}],"output":{"name":"self"}}],[11,"push","","Append the given segment at the end of this URL’s path.",7,{"inputs":[{"name":"pathsegmentsmut"},{"name":"str"}],"output":{"name":"self"}}],[11,"extend","","Append each segment from the given iterator at the end of this URL’s path.",7,{"inputs":[{"name":"pathsegmentsmut"},{"name":"i"}],"output":{"name":"self"}}],[11,"fmt","","",3,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"eq","","",3,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"description","","",3,{"inputs":[{"name":"parseerror"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",3,{"inputs":[{"name":"errors"}],"output":{"name":"parseerror"}}],[11,"index","","",8,{"inputs":[{"name":"url"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index","","",8,{"inputs":[{"name":"url"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",8,{"inputs":[{"name":"url"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",8,{"inputs":[{"name":"url"},{"name":"range"}],"output":{"name":"str"}}],[11,"fmt","","",4,{"inputs":[{"name":"position"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"position"}],"output":{"name":"position"}}],[0,"form_urlencoded","","Parser and serializer for the [`application/x-www-form-urlencoded` syntax](\nhttp://url.spec.whatwg.org/#application/x-www-form-urlencoded),\nas used by HTML forms.",null,null],[3,"Parse","url::form_urlencoded","The return type of `parse()`.",null,null],[3,"ParseIntoOwned","","Like `Parse`, but yields pairs of `String` instead of pairs of `Cow&lt;str&gt;`.",null,null],[3,"ByteSerialize","","Return value of `byte_serialize()`.",null,null],[3,"Serializer","","The [`application/x-www-form-urlencoded` serializer](\nhttps://url.spec.whatwg.org/#concept-urlencoded-serializer).",null,null],[5,"parse","","Convert a byte string in the `application/x-www-form-urlencoded` syntax\ninto a iterator of (name, value) pairs.",null,null],[5,"byte_serialize","","The [`application/x-www-form-urlencoded` byte serializer](\nhttps://url.spec.whatwg.org/#concept-urlencoded-byte-serializer).",null,null],[8,"Target","","",null,null],[10,"as_mut_string","","",9,{"inputs":[{"name":"target"}],"output":{"name":"string"}}],[10,"finish","","",9,{"inputs":[{"name":"target"}],"output":{"name":"finished"}}],[16,"Finished","","",9,null],[11,"clone","","",10,{"inputs":[{"name":"parse"}],"output":{"name":"parse"}}],[11,"next","","",10,{"inputs":[{"name":"parse"}],"output":{"name":"option"}}],[11,"into_owned","","Return a new iterator that yields pairs of `String` instead of pairs of `Cow&lt;str&gt;`.",10,{"inputs":[{"name":"parse"}],"output":{"name":"parseintoowned"}}],[11,"next","","",11,{"inputs":[{"name":"parseintoowned"}],"output":{"name":"option"}}],[11,"next","","",12,{"inputs":[{"name":"byteserialize"}],"output":{"name":"option"}}],[11,"size_hint","","",12,null],[11,"as_mut_string","collections::string","",13,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"finish","","",13,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"as_mut_string","url","",14,{"inputs":[{"name":"urlquery"}],"output":{"name":"string"}}],[11,"finish","","",14,{"inputs":[{"name":"urlquery"}],"output":{"name":"url"}}],[11,"new","url::form_urlencoded","Create a new `application/x-www-form-urlencoded` serializer for the given target.",15,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"for_suffix","","Create a new `application/x-www-form-urlencoded` serializer\nfor a suffix of the given target.",15,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"self"}}],[11,"clear","","Remove any existing name/value pair.",15,{"inputs":[{"name":"serializer"}],"output":{"name":"self"}}],[11,"append_pair","","Serialize and append a name/value pair.",15,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"str"}],"output":{"name":"self"}}],[11,"extend_pairs","","Serialize and append a number of name/value pairs.",15,{"inputs":[{"name":"serializer"},{"name":"i"}],"output":{"name":"self"}}],[11,"finish","","If this serializer was constructed with a string, take and return that string.",15,{"inputs":[{"name":"serializer"}],"output":{"name":"finished"}}],[0,"percent_encoding","url","",null,null],[3,"SIMPLE_ENCODE_SET","url::percent_encoding","This encode set is used for the path of cannot-be-a-base URLs.",null,null],[3,"QUERY_ENCODE_SET","","This encode set is used in the URL parser for query strings.",null,null],[3,"DEFAULT_ENCODE_SET","","This encode set is used for path components.",null,null],[3,"PATH_SEGMENT_ENCODE_SET","","This encode set is used for on &#39;/&#39;-separated path segment",null,null],[3,"USERINFO_ENCODE_SET","","This encode set is used for username and password.",null,null],[3,"PercentEncode","","The return type of `percent_decode()`.",null,null],[3,"PercentDecode","","The return type of `percent_decode()`.",null,null],[5,"percent_encode_byte","","Return the percent-encoding of the given bytes.",null,{"inputs":[{"name":"u8"}],"output":{"name":"str"}}],[5,"percent_encode","","Percent-encode the given bytes with the given encode set.",null,null],[5,"utf8_percent_encode","","Percent-encode the UTF-8 encoding of the given string.",null,{"inputs":[{"name":"str"},{"name":"e"}],"output":{"name":"percentencode"}}],[5,"percent_decode","","Percent-decode the given bytes.",null,null],[8,"EncodeSet","","Represents a set of characters / bytes that should be percent-encoded.",null,null],[10,"contains","","Called with UTF-8 bytes rather than code points.\nShould return true for all non-ASCII bytes.",16,{"inputs":[{"name":"encodeset"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"simple_encode_set"}],"output":{"name":"simple_encode_set"}}],[11,"contains","","",17,{"inputs":[{"name":"simple_encode_set"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"query_encode_set"}],"output":{"name":"query_encode_set"}}],[11,"contains","","",18,{"inputs":[{"name":"query_encode_set"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"default_encode_set"}],"output":{"name":"default_encode_set"}}],[11,"contains","","",19,{"inputs":[{"name":"default_encode_set"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"path_segment_encode_set"}],"output":{"name":"path_segment_encode_set"}}],[11,"contains","","",20,{"inputs":[{"name":"path_segment_encode_set"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"userinfo_encode_set"}],"output":{"name":"userinfo_encode_set"}}],[11,"contains","","",21,{"inputs":[{"name":"userinfo_encode_set"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"clone","","",22,{"inputs":[{"name":"percentencode"}],"output":{"name":"percentencode"}}],[11,"next","","",22,{"inputs":[{"name":"percentencode"}],"output":{"name":"option"}}],[11,"size_hint","","",22,null],[11,"fmt","","",22,{"inputs":[{"name":"percentencode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","collections::borrow","",23,{"inputs":[{"name":"percentencode"}],"output":{"name":"self"}}],[11,"clone","url::percent_encoding","",24,{"inputs":[{"name":"percentdecode"}],"output":{"name":"percentdecode"}}],[11,"next","","",24,{"inputs":[{"name":"percentdecode"}],"output":{"name":"option"}}],[11,"size_hint","","",24,null],[11,"from","collections::borrow","",23,{"inputs":[{"name":"percentdecode"}],"output":{"name":"self"}}],[11,"if_any","url::percent_encoding","If the percent-decoding is different from the input, return it as a new bytes vector.",24,{"inputs":[{"name":"percentdecode"}],"output":{"name":"option"}}],[11,"decode_utf8","","Decode the result of percent-decoding as UTF-8.",24,{"inputs":[{"name":"percentdecode"}],"output":{"name":"result"}}],[11,"decode_utf8_lossy","","Decode the result of percent-decoding as UTF-8, lossily.",24,{"inputs":[{"name":"percentdecode"}],"output":{"name":"cow"}}],[0,"quirks","url","Getters and setters for URL components implemented per https://url.spec.whatwg.org/#api",null,null],[5,"domain_to_ascii","url::quirks","https://url.spec.whatwg.org/#dom-url-domaintoascii",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"domain_to_unicode","","https://url.spec.whatwg.org/#dom-url-domaintounicode",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"href","","Getter for https://url.spec.whatwg.org/#dom-url-href",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_href","","Setter for https://url.spec.whatwg.org/#dom-url-href",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[5,"origin","","Getter for https://url.spec.whatwg.org/#dom-url-origin",null,{"inputs":[{"name":"url"}],"output":{"name":"string"}}],[5,"protocol","","Getter for https://url.spec.whatwg.org/#dom-url-protocol",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_protocol","","Setter for https://url.spec.whatwg.org/#dom-url-protocol",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[5,"username","","Getter for https://url.spec.whatwg.org/#dom-url-username",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_username","","Setter for https://url.spec.whatwg.org/#dom-url-username",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[5,"password","","Getter for https://url.spec.whatwg.org/#dom-url-password",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_password","","Setter for https://url.spec.whatwg.org/#dom-url-password",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[5,"host","","Getter for https://url.spec.whatwg.org/#dom-url-host",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_host","","Setter for https://url.spec.whatwg.org/#dom-url-host",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[5,"hostname","","Getter for https://url.spec.whatwg.org/#dom-url-hostname",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_hostname","","Setter for https://url.spec.whatwg.org/#dom-url-hostname",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[5,"port","","Getter for https://url.spec.whatwg.org/#dom-url-port",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_port","","Setter for https://url.spec.whatwg.org/#dom-url-port",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[5,"pathname","","Getter for https://url.spec.whatwg.org/#dom-url-pathname",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_pathname","","Setter for https://url.spec.whatwg.org/#dom-url-pathname",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":null}],[5,"search","","Getter for https://url.spec.whatwg.org/#dom-url-search",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_search","","Setter for https://url.spec.whatwg.org/#dom-url-search",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":null}],[5,"hash","","Getter for https://url.spec.whatwg.org/#dom-url-hash",null,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[5,"set_hash","","Setter for https://url.spec.whatwg.org/#dom-url-hash",null,{"inputs":[{"name":"url"},{"name":"str"}],"output":null}],[11,"clone","url","",8,{"inputs":[{"name":"url"}],"output":{"name":"url"}}],[11,"clone","","",25,{"inputs":[{"name":"parseoptions"}],"output":{"name":"parseoptions"}}],[11,"base_url","","Change the base URL",25,{"inputs":[{"name":"parseoptions"},{"name":"option"}],"output":{"name":"self"}}],[11,"log_syntax_violation","","Call the provided function or closure on non-fatal parse errors.",25,{"inputs":[{"name":"parseoptions"},{"name":"option"}],"output":{"name":"self"}}],[11,"parse","","Parse an URL string with the configuration so far.",25,{"inputs":[{"name":"parseoptions"},{"name":"str"}],"output":{"name":"result"}}],[11,"parse","","Parse an absolute URL from a string.",8,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"join","","Parse a string as an URL, with this URL as the base URL.",8,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[11,"options","","Return a default `ParseOptions` that can fully configure the URL parser.",8,{"inputs":[],"output":{"name":"parseoptions"}}],[11,"as_str","","Return the serialization of this URL.",8,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[11,"into_string","","Return the serialization of this URL.",8,{"inputs":[{"name":"url"}],"output":{"name":"string"}}],[11,"origin","","Return the origin of this URL (https://url.spec.whatwg.org/#origin)",8,{"inputs":[{"name":"url"}],"output":{"name":"origin"}}],[11,"scheme","","Return the scheme of this URL, lower-cased, as an ASCII string without the &#39;:&#39; delimiter.",8,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[11,"has_authority","","Return whether the URL has an &#39;authority&#39;,\nwhich can contain a username, password, host, and port number.",8,{"inputs":[{"name":"url"}],"output":{"name":"bool"}}],[11,"cannot_be_a_base","","Return whether this URL is a cannot-be-a-base URL,\nmeaning that parsing a relative URL string with this URL as the base will return an error.",8,{"inputs":[{"name":"url"}],"output":{"name":"bool"}}],[11,"username","","Return the username for this URL (typically the empty string)\nas a percent-encoded ASCII string.",8,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[11,"password","","Return the password for this URL, if any, as a percent-encoded ASCII string.",8,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"has_host","","Equivalent to `url.host().is_some()`.",8,{"inputs":[{"name":"url"}],"output":{"name":"bool"}}],[11,"host_str","","Return the string representation of the host (domain or IP address) for this URL, if any.",8,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"host","","Return the parsed representation of the host for this URL.\nNon-ASCII domain labels are punycode-encoded per IDNA.",8,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"domain","","If this URL has a host and it is a domain name (not an IP address), return it.",8,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"port","","Return the port number for this URL, if any.",8,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"port_or_known_default","","Return the port number for this URL, or the default port number if it is known.",8,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"with_default_port","","If the URL has a host, return something that implements `ToSocketAddrs`.",8,{"inputs":[{"name":"url"},{"name":"f"}],"output":{"name":"result"}}],[11,"path","","Return the path for this URL, as a percent-encoded ASCII string.\nFor cannot-be-a-base URLs, this is an arbitrary string that doesn’t start with &#39;/&#39;.\nFor other URLs, this starts with a &#39;/&#39; slash\nand continues with slash-separated path segments.",8,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[11,"path_segments","","Unless this URL is cannot-be-a-base,\nreturn an iterator of &#39;/&#39; slash-separated path segments,\neach as a percent-encoded ASCII string.",8,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"query","","Return this URL’s query string, if any, as a percent-encoded ASCII string.",8,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"query_pairs","","Parse the URL’s query string, if any, as `application/x-www-form-urlencoded`\nand return an iterator of (key, value) pairs.",8,{"inputs":[{"name":"url"}],"output":{"name":"parse"}}],[11,"fragment","","Return this URL’s fragment identifier, if any.",8,{"inputs":[{"name":"url"}],"output":{"name":"option"}}],[11,"set_fragment","","Change this URL’s fragment identifier.",8,{"inputs":[{"name":"url"},{"name":"option"}],"output":null}],[11,"set_query","","Change this URL’s query string.",8,{"inputs":[{"name":"url"},{"name":"option"}],"output":null}],[11,"query_pairs_mut","","Manipulate this URL’s query string, viewed as a sequence of name/value pairs\nin `application/x-www-form-urlencoded` syntax.",8,{"inputs":[{"name":"url"}],"output":{"name":"serializer"}}],[11,"set_path","","Change this URL’s path.",8,{"inputs":[{"name":"url"},{"name":"str"}],"output":null}],[11,"path_segments_mut","","Return an object with methods to manipulate this URL’s path segments.",8,{"inputs":[{"name":"url"}],"output":{"name":"result"}}],[11,"set_port","","Change this URL’s port number.",8,{"inputs":[{"name":"url"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_host","","Change this URL’s host.",8,{"inputs":[{"name":"url"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_ip_host","","Change this URL’s host to the given IP address.",8,{"inputs":[{"name":"url"},{"name":"ipaddr"}],"output":{"name":"result"}}],[11,"set_password","","Change this URL’s password.",8,{"inputs":[{"name":"url"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_username","","Change this URL’s username.",8,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[11,"set_scheme","","Change this URL’s scheme.",8,{"inputs":[{"name":"url"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_file_path","","Convert a file name as `std::path::Path` into an URL in the `file` scheme.",8,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"from_directory_path","","Convert a directory name as `std::path::Path` into an URL in the `file` scheme.",8,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"to_file_path","","Assuming the URL is in the `file` scheme or similar,\nconvert its path to an absolute `std::path::Path`.",8,{"inputs":[{"name":"url"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",8,{"inputs":[{"name":"url"}],"output":{"name":"result"}}],[11,"from_str","","",8,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"url"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"url"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"url"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",8,{"inputs":[{"name":"url"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"url"},{"name":"self"}],"output":{"name":"option"}}],[11,"hash","","",8,{"inputs":[{"name":"url"},{"name":"h"}],"output":null}],[11,"as_ref","","",8,{"inputs":[{"name":"url"}],"output":{"name":"str"}}],[11,"drop","","",14,{"inputs":[{"name":"urlquery"}],"output":null}],[14,"define_encode_set!","","Define a new struct\nthat implements the [`EncodeSet`](percent_encoding/trait.EncodeSet.html) trait,\nfor use in [`percent_decode()`](percent_encoding/fn.percent_encode.html)\nand related functions.",null,null]],"paths":[[3,"HostAndPort"],[4,"Origin"],[4,"Host"],[4,"ParseError"],[4,"Position"],[3,"SocketAddrs"],[3,"OpaqueOrigin"],[3,"PathSegmentsMut"],[3,"Url"],[8,"Target"],[3,"Parse"],[3,"ParseIntoOwned"],[3,"ByteSerialize"],[3,"String"],[3,"UrlQuery"],[3,"Serializer"],[8,"EncodeSet"],[3,"SIMPLE_ENCODE_SET"],[3,"QUERY_ENCODE_SET"],[3,"DEFAULT_ENCODE_SET"],[3,"PATH_SEGMENT_ENCODE_SET"],[3,"USERINFO_ENCODE_SET"],[3,"PercentEncode"],[4,"Cow"],[3,"PercentDecode"],[3,"ParseOptions"]]};
searchIndex["openssl"] = {"doc":"","items":[[0,"asn1","openssl","",null,null],[3,"Asn1Time","openssl::asn1","",null,null],[11,"new","","Wraps existing ASN1_TIME and takes ownership",0,null],[11,"days_from_now","","Creates a new time on specified interval in days from now",0,{"inputs":[{"name":"u32"}],"output":{"name":"result"}}],[11,"get_handle","","Returns raw handle",0,null],[11,"drop","","",0,{"inputs":[{"name":"asn1time"}],"output":null}],[0,"bn","openssl","",null,null],[3,"BigNum","openssl::bn","",null,null],[4,"RNGProperty","","",null,null],[13,"MsbMaybeZero","","",1,null],[13,"MsbOne","","",1,null],[13,"TwoMsbOne","","",1,null],[0,"unchecked","","",null,null],[11,"clone","","",2,{"inputs":[{"name":"bignum"}],"output":{"name":"bignum"}}],[11,"neg","","",2,{"inputs":[{"name":"bignum"}],"output":{"name":"bignum"}}],[11,"clone","","",1,{"inputs":[{"name":"rngproperty"}],"output":{"name":"rngproperty"}}],[11,"new","","",2,{"inputs":[],"output":{"name":"result"}}],[11,"new_from","","",2,{"inputs":[{"name":"u64"}],"output":{"name":"result"}}],[11,"from_dec_str","","",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_hex_str","","",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new_from_ffi","","",2,null],[11,"new_from_slice","","",2,null],[11,"checked_sqr","","",2,{"inputs":[{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_nnmod","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_mod_add","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_mod_sub","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_mod_mul","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_mod_sqr","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_exp","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_mod_exp","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_mod_inv","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"add_word","","",2,{"inputs":[{"name":"bignum"},{"name":"c_ulong"}],"output":{"name":"result"}}],[11,"sub_word","","",2,{"inputs":[{"name":"bignum"},{"name":"c_ulong"}],"output":{"name":"result"}}],[11,"mul_word","","",2,{"inputs":[{"name":"bignum"},{"name":"c_ulong"}],"output":{"name":"result"}}],[11,"div_word","","",2,{"inputs":[{"name":"bignum"},{"name":"c_ulong"}],"output":{"name":"result"}}],[11,"mod_word","","",2,{"inputs":[{"name":"bignum"},{"name":"c_ulong"}],"output":{"name":"result"}}],[11,"checked_gcd","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_generate_prime","","",2,{"inputs":[{"name":"i32"},{"name":"bool"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[11,"is_prime","","",2,{"inputs":[{"name":"bignum"},{"name":"i32"}],"output":{"name":"result"}}],[11,"is_prime_fast","","",2,{"inputs":[{"name":"bignum"},{"name":"i32"},{"name":"bool"}],"output":{"name":"result"}}],[11,"checked_new_random","","",2,{"inputs":[{"name":"i32"},{"name":"rngproperty"},{"name":"bool"}],"output":{"name":"result"}}],[11,"checked_new_pseudo_random","","",2,{"inputs":[{"name":"i32"},{"name":"rngproperty"},{"name":"bool"}],"output":{"name":"result"}}],[11,"checked_rand_in_range","","",2,{"inputs":[{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_pseudo_rand_in_range","","",2,{"inputs":[{"name":"bignum"}],"output":{"name":"result"}}],[11,"set_bit","","",2,{"inputs":[{"name":"bignum"},{"name":"i32"}],"output":{"name":"result"}}],[11,"clear_bit","","",2,{"inputs":[{"name":"bignum"},{"name":"i32"}],"output":{"name":"result"}}],[11,"is_bit_set","","",2,{"inputs":[{"name":"bignum"},{"name":"i32"}],"output":{"name":"bool"}}],[11,"mask_bits","","",2,{"inputs":[{"name":"bignum"},{"name":"i32"}],"output":{"name":"result"}}],[11,"checked_shl1","","",2,{"inputs":[{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_shr1","","",2,{"inputs":[{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_add","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_sub","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_mul","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_div","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_mod","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"checked_shl","","",2,{"inputs":[{"name":"bignum"},{"name":"i32"}],"output":{"name":"result"}}],[11,"checked_shr","","",2,{"inputs":[{"name":"bignum"},{"name":"i32"}],"output":{"name":"result"}}],[11,"negate","","",2,{"inputs":[{"name":"bignum"}],"output":null}],[11,"abs_cmp","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"}],"output":{"name":"ordering"}}],[11,"is_negative","","",2,{"inputs":[{"name":"bignum"}],"output":{"name":"bool"}}],[11,"num_bits","","",2,{"inputs":[{"name":"bignum"}],"output":{"name":"i32"}}],[11,"num_bytes","","",2,{"inputs":[{"name":"bignum"}],"output":{"name":"i32"}}],[11,"raw","","",2,null],[11,"raw_ptr","","",2,null],[11,"into_raw","","",2,null],[11,"to_vec","","",2,{"inputs":[{"name":"bignum"}],"output":{"name":"vec"}}],[11,"to_dec_str","","",2,{"inputs":[{"name":"bignum"}],"output":{"name":"string"}}],[11,"to_hex_str","","",2,{"inputs":[{"name":"bignum"}],"output":{"name":"string"}}],[11,"fmt","","",2,{"inputs":[{"name":"bignum"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"bignum"},{"name":"bignum"}],"output":{"name":"option"}}],[11,"drop","","",2,{"inputs":[{"name":"bignum"}],"output":null}],[0,"bio","openssl","",null,null],[3,"MemBio","openssl::bio","",null,null],[11,"drop","","",3,{"inputs":[{"name":"membio"}],"output":null}],[11,"new","","Creates a new owned memory based BIO",3,{"inputs":[],"output":{"name":"result"}}],[11,"borrowed","","Returns a &quot;borrow&quot;, i.e. it has no ownership",3,null],[11,"unwrap","","Consumes current bio and returns wrapped value\nNote that data ownership is lost and\nshould be managed manually",3,null],[11,"get_handle","","Temporarily gets wrapped value",3,null],[11,"set_eof","","Sets the BIO&#39;s EOF state.",3,{"inputs":[{"name":"membio"},{"name":"bool"}],"output":null}],[11,"read","","",3,null],[11,"write","","",3,null],[11,"flush","","",3,{"inputs":[{"name":"membio"}],"output":{"name":"result"}}],[0,"crypto","openssl","",null,null],[0,"hash","openssl::crypto","",null,null],[3,"Hasher","openssl::crypto::hash","Provides message digest (hash) computation.",null,null],[4,"Type","","Message digest (hash) type.",null,null],[13,"MD5","","",4,null],[13,"SHA1","","",4,null],[13,"SHA224","","",4,null],[13,"SHA256","","",4,null],[13,"SHA384","","",4,null],[13,"SHA512","","",4,null],[13,"RIPEMD160","","",4,null],[5,"hash","","Computes the hash of the `data` with the hash `t`.",null,null],[11,"clone","","",4,{"inputs":[{"name":"type"}],"output":{"name":"type"}}],[11,"md_len","","Returns the length of the message digest.",4,{"inputs":[{"name":"type"}],"output":{"name":"usize"}}],[11,"evp_md","","Internal interface subject to removal.",4,null],[11,"new","","Creates a new `Hasher` with the specified hash type.",5,{"inputs":[{"name":"type"}],"output":{"name":"hasher"}}],[11,"finish","","Returns the hash of the data written since creation or\nthe last `finish` and resets the hasher.",5,{"inputs":[{"name":"hasher"}],"output":{"name":"vec"}}],[11,"write","","",5,null],[11,"flush","","",5,{"inputs":[{"name":"hasher"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"hasher"}],"output":{"name":"hasher"}}],[11,"drop","","",5,{"inputs":[{"name":"hasher"}],"output":null}],[0,"hmac","openssl::crypto","",null,null],[3,"HMAC","openssl::crypto::hmac","Provides HMAC computation.",null,null],[5,"hmac","","Computes the HMAC of the `data` with the hash `t` and `key`.",null,null],[11,"new","","Creates a new `HMAC` with the specified hash type using the `key`.",6,null],[11,"finish","","Returns the hash of the data written since creation or\nthe last `finish` and resets the hasher.",6,{"inputs":[{"name":"hmac"}],"output":{"name":"vec"}}],[11,"write","","",6,null],[11,"flush","","",6,{"inputs":[{"name":"hmac"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"hmac"}],"output":{"name":"hmac"}}],[11,"drop","","",6,{"inputs":[{"name":"hmac"}],"output":null}],[0,"pkcs5","openssl::crypto","",null,null],[3,"KeyIvPair","openssl::crypto::pkcs5","",null,null],[12,"key","","",7,null],[12,"iv","","",7,null],[5,"evp_bytes_to_key_pbkdf1_compatible","","Derives a key and an IV from various parameters.",null,null],[5,"pbkdf2_hmac_sha1","","Derives a key from a password and salt using the PBKDF2-HMAC-SHA1 algorithm.",null,null],[11,"fmt","","",7,{"inputs":[{"name":"keyivpair"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",7,null],[11,"eq","","",7,{"inputs":[{"name":"keyivpair"},{"name":"keyivpair"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"keyivpair"},{"name":"keyivpair"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"keyivpair"}],"output":{"name":"keyivpair"}}],[0,"pkey","openssl::crypto","",null,null],[3,"PKey","openssl::crypto::pkey","",null,null],[4,"Parts","","",null,null],[13,"Neither","","",8,null],[13,"Public","","",8,null],[13,"Both","","",8,null],[4,"Role","","Represents a role an asymmetric key might be appropriate for.",null,null],[13,"Encrypt","","",9,null],[13,"Decrypt","","",9,null],[13,"Sign","","",9,null],[13,"Verify","","",9,null],[4,"EncryptionPadding","","Type of encryption padding to use.",null,null],[13,"OAEP","","",10,null],[13,"PKCS1v15","","",10,null],[11,"clone","","",8,{"inputs":[{"name":"parts"}],"output":{"name":"parts"}}],[11,"clone","","",9,{"inputs":[{"name":"role"}],"output":{"name":"role"}}],[11,"clone","","",10,{"inputs":[{"name":"encryptionpadding"}],"output":{"name":"encryptionpadding"}}],[11,"new","","",11,{"inputs":[],"output":{"name":"pkey"}}],[11,"from_handle","","",11,null],[11,"private_key_from_pem","","Reads private key from PEM, takes ownership of handle",11,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"public_key_from_pem","","Reads public key from PEM, takes ownership of handle",11,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"private_rsa_key_from_pem","","Reads an RSA private key from PEM, takes ownership of handle",11,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"public_rsa_key_from_pem","","Reads an RSA public key from PEM, takes ownership of handle",11,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"gen","","",11,{"inputs":[{"name":"pkey"},{"name":"usize"}],"output":null}],[11,"set_rsa","","assign RSA key to this pkey",11,{"inputs":[{"name":"pkey"},{"name":"rsa"}],"output":null}],[11,"get_rsa","","get a reference to the interal RSA key for direct access to the key components",11,{"inputs":[{"name":"pkey"}],"output":{"name":"rsa"}}],[11,"save_pub","","Returns a DER serialized form of the public key, suitable for load_pub().",11,{"inputs":[{"name":"pkey"}],"output":{"name":"vec"}}],[11,"load_pub","","Loads a DER serialized form of the public key, as produced by save_pub().",11,null],[11,"save_priv","","Returns a serialized form of the public and private keys, suitable for\nload_priv().",11,{"inputs":[{"name":"pkey"}],"output":{"name":"vec"}}],[11,"load_priv","","Loads a serialized form of the public and private keys, as produced by\nsave_priv().",11,null],[11,"write_pem","","Stores private key as a PEM",11,{"inputs":[{"name":"pkey"},{"name":"w"}],"output":{"name":"result"}}],[11,"write_pub_pem","","Stores public key as a PEM",11,{"inputs":[{"name":"pkey"},{"name":"w"}],"output":{"name":"result"}}],[11,"size","","Returns the size of the public key modulus.",11,{"inputs":[{"name":"pkey"}],"output":{"name":"usize"}}],[11,"can","","Returns whether this pkey object can perform the specified role.",11,{"inputs":[{"name":"pkey"},{"name":"role"}],"output":{"name":"bool"}}],[11,"max_data","","Returns the maximum amount of data that can be encrypted by an encrypt()\ncall.",11,{"inputs":[{"name":"pkey"}],"output":{"name":"usize"}}],[11,"private_encrypt_with_padding","","",11,null],[11,"public_encrypt_with_padding","","",11,null],[11,"private_decrypt_with_padding","","",11,null],[11,"public_decrypt_with_padding","","",11,null],[11,"encrypt","","Encrypts data with the public key, using OAEP padding, returning the encrypted data. The\nsupplied data must not be larger than max_data().",11,null],[11,"encrypt_with_padding","","Encrypts data with the public key, using provided padding, returning the encrypted data. The\nsupplied data must not be larger than max_data().",11,null],[11,"public_encrypt","","Encrypts data with the public key, using OAEP padding, returning the encrypted data. The\nsupplied data must not be larger than max_data().",11,null],[11,"public_decrypt","","Decrypts data with the public key, using PKCS1v15 padding, returning the decrypted data.",11,null],[11,"decrypt","","Decrypts data with the private key, expecting OAEP padding, returning the decrypted data.",11,null],[11,"decrypt_with_padding","","Decrypts data with the private key, using provided padding, returning the encrypted data. The\nsupplied data must not be larger than max_data().",11,null],[11,"private_decrypt","","Decrypts data with the private key, expecting OAEP padding, returning the decrypted data.",11,null],[11,"private_encrypt","","Encrypts data with the private key, using PKCS1v15 padding, returning the encrypted data. The\nsupplied data must not be larger than max_data().",11,null],[11,"sign","","Signs data, using OpenSSL&#39;s default scheme and adding sha256 ASN.1 information to the\nsignature.\nThe bytes to sign must be the result of a sha256 hashing;\nreturns the signature.",11,null],[11,"verify","","Verifies a signature s (using OpenSSL&#39;s default scheme and sha256) on the SHA256 hash of a\nmessage.\nReturns true if the signature is valid, and false otherwise.",11,null],[11,"sign_with_hash","","Signs data, using OpenSSL&#39;s default scheme and add ASN.1 information for the given hash type to the\nsignature.\nThe bytes to sign must be the result of this type of hashing;\nreturns the signature.",11,null],[11,"verify_with_hash","","",11,null],[11,"get_handle","","",11,null],[11,"public_eq","","",11,{"inputs":[{"name":"pkey"},{"name":"pkey"}],"output":{"name":"bool"}}],[11,"drop","","",11,{"inputs":[{"name":"pkey"}],"output":null}],[11,"clone","","",11,{"inputs":[{"name":"pkey"}],"output":{"name":"self"}}],[0,"rand","openssl::crypto","",null,null],[5,"rand_bytes","openssl::crypto::rand","",null,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[0,"symm","openssl::crypto","",null,null],[3,"Crypter","openssl::crypto::symm","Represents a symmetric cipher context.",null,null],[4,"Mode","","",null,null],[13,"Encrypt","","",12,null],[13,"Decrypt","","",12,null],[4,"Type","","",null,null],[13,"AES_128_ECB","","",13,null],[13,"AES_128_CBC","","",13,null],[13,"AES_128_CFB1","","",13,null],[13,"AES_128_CFB128","","",13,null],[13,"AES_128_CFB8","","",13,null],[13,"AES_256_ECB","","",13,null],[13,"AES_256_CBC","","",13,null],[13,"AES_256_CFB1","","",13,null],[13,"AES_256_CFB128","","",13,null],[13,"AES_256_CFB8","","",13,null],[13,"DES_CBC","","",13,null],[13,"DES_ECB","","",13,null],[13,"RC4_128","","",13,null],[5,"encrypt","","Encrypts data, using the specified crypter type in encrypt mode with the\nspecified key and iv; returns the resulting (encrypted) data.",null,null],[5,"decrypt","","Decrypts data, using the specified crypter type in decrypt mode with the\nspecified key and iv; returns the resulting (decrypted) data.",null,null],[11,"clone","","",12,{"inputs":[{"name":"mode"}],"output":{"name":"mode"}}],[11,"clone","","",13,{"inputs":[{"name":"type"}],"output":{"name":"type"}}],[11,"new","","",14,{"inputs":[{"name":"type"}],"output":{"name":"crypter"}}],[11,"pad","","Enables or disables padding. If padding is disabled, total amount of\ndata encrypted must be a multiple of block size.",14,{"inputs":[{"name":"crypter"},{"name":"bool"}],"output":null}],[11,"init","","Initializes this crypter.",14,null],[11,"update","","Update this crypter with more data to encrypt or decrypt. Returns\nencrypted or decrypted bytes.",14,null],[11,"finalize","","Finish crypting. Returns the remaining partial block of output, if any.",14,{"inputs":[{"name":"crypter"}],"output":{"name":"vec"}}],[11,"drop","","",14,{"inputs":[{"name":"crypter"}],"output":null}],[0,"memcmp","openssl::crypto","",null,null],[5,"eq","openssl::crypto::memcmp","Returns `true` iff `a` and `b` contain the same bytes.",null,null],[0,"rsa","openssl::crypto","",null,null],[3,"RSA","openssl::crypto::rsa","",null,null],[11,"drop","","",15,{"inputs":[{"name":"rsa"}],"output":null}],[11,"from_public_components","","only useful for associating the key material directly with the key, it&#39;s safer to use\nthe supplied load and save methods for DER formatted keys.",15,{"inputs":[{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"from_private_components","","",15,{"inputs":[{"name":"bignum"},{"name":"bignum"},{"name":"bignum"},{"name":"bignum"},{"name":"bignum"},{"name":"bignum"},{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"from_raw","","the caller should assert that the rsa pointer is valid.",15,null],[11,"private_key_from_pem","","Reads an RSA private key from PEM formatted data.",15,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"private_key_to_pem","","Writes an RSA private key as unencrypted PEM formatted data",15,{"inputs":[{"name":"rsa"},{"name":"w"}],"output":{"name":"result"}}],[11,"public_key_from_pem","","Reads an RSA public key from PEM formatted data.",15,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"public_key_to_pem","","Writes an RSA public key as PEM formatted data",15,{"inputs":[{"name":"rsa"},{"name":"w"}],"output":{"name":"result"}}],[11,"size","","",15,{"inputs":[{"name":"rsa"}],"output":{"name":"result"}}],[11,"sign","","",15,null],[11,"verify","","",15,null],[11,"as_ptr","","",15,null],[11,"n","","",15,{"inputs":[{"name":"rsa"}],"output":{"name":"result"}}],[11,"has_n","","",15,{"inputs":[{"name":"rsa"}],"output":{"name":"bool"}}],[11,"d","","",15,{"inputs":[{"name":"rsa"}],"output":{"name":"result"}}],[11,"e","","",15,{"inputs":[{"name":"rsa"}],"output":{"name":"result"}}],[11,"has_e","","",15,{"inputs":[{"name":"rsa"}],"output":{"name":"bool"}}],[11,"p","","",15,{"inputs":[{"name":"rsa"}],"output":{"name":"result"}}],[11,"q","","",15,{"inputs":[{"name":"rsa"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"rsa"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"dh","openssl","",null,null],[3,"DH","openssl::dh","",null,null],[11,"from_params","","",16,{"inputs":[{"name":"bignum"},{"name":"bignum"},{"name":"bignum"}],"output":{"name":"result"}}],[11,"from_pem","","",16,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"raw","","",16,null],[11,"raw_ptr","","",16,null],[11,"drop","","",16,{"inputs":[{"name":"dh"}],"output":null}],[0,"ssl","openssl","",null,null],[3,"SslContextOptions","openssl::ssl","",null,null],[3,"SslVerifyMode","","",null,null],[3,"SslContext","","An SSL context object",null,null],[3,"CipherBits","","",null,null],[12,"secret","","The number of secret bits used for the cipher.",17,null],[12,"algorithm","","The number of bits processed by the chosen algorithm, if not None.",17,null],[3,"SslCipher","","",null,null],[3,"Ssl","","",null,null],[3,"SslStream","","A stream wrapper which handles SSL encryption for an underlying stream.",null,null],[3,"NonblockingSslStream","","# Deprecated",null,null],[4,"Error","","An SSL error.",null,null],[13,"ZeroReturn","","The SSL session has been closed by the other end",18,null],[13,"WantRead","","An attempt to read data from the underlying socket returned\n`WouldBlock`. Wait for read readiness and reattempt the operation.",18,null],[13,"WantWrite","","An attempt to write data from the underlying socket returned\n`WouldBlock`. Wait for write readiness and reattempt the operation.",18,null],[13,"WantX509Lookup","","The client certificate callback requested to be called again.",18,null],[13,"Stream","","An error reported by the underlying stream.",18,null],[13,"Ssl","","An error in the OpenSSL library.",18,null],[4,"SslMethod","","Determines the SSL method supported",null,null],[13,"Sslv23","","Support the SSLv2, SSLv3, TLSv1, TLSv1.1, and TLSv1.2 protocols depending on what the\nlinked OpenSSL library supports.",19,null],[13,"Tlsv1","","Only support the TLSv1 protocol.",19,null],[4,"MaybeSslStream","","A utility type to help in cases where the use of SSL is decided at runtime.",null,null],[13,"Ssl","","A connection using SSL",20,null],[13,"Normal","","A connection not using SSL",20,null],[5,"init","","Manually initialize SSL.\nIt is optional to call this function and safe to do so more than once.",null,{"inputs":[],"output":null}],[0,"error","","",null,null],[3,"OpenSslError","openssl::ssl::error","An error reported from OpenSSL.",null,null],[4,"Error","","An SSL error.",null,null],[13,"ZeroReturn","","The SSL session has been closed by the other end",18,null],[13,"WantRead","","An attempt to read data from the underlying socket returned\n`WouldBlock`. Wait for read readiness and reattempt the operation.",18,null],[13,"WantWrite","","An attempt to write data from the underlying socket returned\n`WouldBlock`. Wait for write readiness and reattempt the operation.",18,null],[13,"WantX509Lookup","","The client certificate callback requested to be called again.",18,null],[13,"Stream","","An error reported by the underlying stream.",18,null],[13,"Ssl","","An error in the OpenSSL library.",18,null],[4,"SslError","","An SSL error",null,null],[13,"StreamError","","The underlying stream reported an error",21,null],[13,"SslSessionClosed","","The SSL session has been closed by the other end",21,null],[13,"OpenSslErrors","","An error in the OpenSSL library",21,null],[4,"NonblockingSslError","","An error on a nonblocking stream.",null,null],[13,"SslError","","A standard SSL error occurred.",22,null],[13,"WantRead","","The OpenSSL library wants data from the remote socket;\nthe caller should wait for read readiness.",22,null],[13,"WantWrite","","The OpenSSL library wants to send data to the remote socket;\nthe caller should wait for write readiness.",22,null],[4,"OpensslError","","An error from the OpenSSL library",null,null],[13,"UnknownError","","An unknown error",23,null],[12,"library","openssl::ssl::error::OpensslError","The library reporting the error",23,null],[12,"function","","The function reporting the error",23,null],[12,"reason","","The reason for the error",23,null],[11,"fmt","openssl::ssl::error","",18,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",18,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",18,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"get_stack","","Returns the contents of the OpenSSL error stack.",24,{"inputs":[],"output":{"name":"vec"}}],[11,"error_code","","Returns the raw OpenSSL error code for this error.",24,{"inputs":[{"name":"opensslerror"}],"output":{"name":"c_ulong"}}],[11,"library","","Returns the name of the library reporting the error.",24,{"inputs":[{"name":"opensslerror"}],"output":{"name":"str"}}],[11,"function","","Returns the name of the function reporting the error.",24,{"inputs":[{"name":"opensslerror"}],"output":{"name":"str"}}],[11,"reason","","Returns the reason for the error.",24,{"inputs":[{"name":"opensslerror"}],"output":{"name":"str"}}],[11,"fmt","","",24,{"inputs":[{"name":"opensslerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"opensslerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",24,{"inputs":[{"name":"opensslerror"}],"output":{"name":"str"}}],[11,"fmt","","",21,{"inputs":[{"name":"sslerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"nonblockingsslerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"sslerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",21,{"inputs":[{"name":"sslerror"}],"output":{"name":"str"}}],[11,"cause","","",21,{"inputs":[{"name":"sslerror"}],"output":{"name":"option"}}],[11,"fmt","","",22,{"inputs":[{"name":"nonblockingsslerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",22,{"inputs":[{"name":"nonblockingsslerror"}],"output":{"name":"str"}}],[11,"cause","","",22,{"inputs":[{"name":"nonblockingsslerror"}],"output":{"name":"option"}}],[11,"from","","",22,{"inputs":[{"name":"sslerror"}],"output":{"name":"nonblockingsslerror"}}],[11,"eq","","",23,{"inputs":[{"name":"opensslerror"},{"name":"opensslerror"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"opensslerror"},{"name":"opensslerror"}],"output":{"name":"bool"}}],[11,"clone","","",23,{"inputs":[{"name":"opensslerror"}],"output":{"name":"opensslerror"}}],[11,"fmt","","",23,{"inputs":[{"name":"opensslerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_error_code","","",23,{"inputs":[{"name":"c_ulong"}],"output":{"name":"opensslerror"}}],[11,"get","","Creates a new `OpenSslErrors` with the current contents of the error\nstack.",21,{"inputs":[],"output":{"name":"sslerror"}}],[11,"from_error","","Creates an `SslError` from the raw numeric error code.",21,{"inputs":[{"name":"c_ulong"}],"output":{"name":"sslerror"}}],[6,"VerifyCallback","openssl::ssl","The signature of functions that can be used to manually verify certificates",null,null],[6,"VerifyCallbackData","","The signature of functions that can be used to manually verify certificates\nwhen user-data should be carried for all verification process",null,null],[6,"ServerNameCallback","","The signature of functions that can be used to choose the context depending on the server name",null,null],[6,"ServerNameCallbackData","","",null,null],[17,"SSL_OP_MICROSOFT_SESS_ID_BUG","","",null,null],[17,"SSL_OP_NETSCAPE_CHALLENGE_BUG","","",null,null],[17,"SSL_OP_LEGACY_SERVER_CONNECT","","",null,null],[17,"SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG","","",null,null],[17,"SSL_OP_TLSEXT_PADDING","","",null,null],[17,"SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER","","",null,null],[17,"SSL_OP_SAFARI_ECDHE_ECDSA_BUG","","",null,null],[17,"SSL_OP_SSLEAY_080_CLIENT_DH_BUG","","",null,null],[17,"SSL_OP_TLS_D5_BUG","","",null,null],[17,"SSL_OP_TLS_BLOCK_PADDING_BUG","","",null,null],[17,"SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS","","",null,null],[17,"SSL_OP_NO_QUERY_MTU","","",null,null],[17,"SSL_OP_COOKIE_EXCHANGE","","",null,null],[17,"SSL_OP_NO_TICKET","","",null,null],[17,"SSL_OP_CISCO_ANYCONNECT","","",null,null],[17,"SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION","","",null,null],[17,"SSL_OP_NO_COMPRESSION","","",null,null],[17,"SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION","","",null,null],[17,"SSL_OP_SINGLE_ECDH_USE","","",null,null],[17,"SSL_OP_SINGLE_DH_USE","","",null,null],[17,"SSL_OP_CIPHER_SERVER_PREFERENCE","","",null,null],[17,"SSL_OP_TLS_ROLLBACK_BUG","","",null,null],[17,"SSL_OP_NO_SSLV2","","",null,null],[17,"SSL_OP_NO_SSLV3","","",null,null],[17,"SSL_OP_NO_DTLSV1","","",null,null],[17,"SSL_OP_NO_TLSV1","","",null,null],[17,"SSL_OP_NO_DTLSV1_2","","",null,null],[17,"SSL_OP_NO_TLSV1_2","","",null,null],[17,"SSL_OP_NO_TLSV1_1","","",null,null],[17,"SSL_OP_NETSCAPE_CA_DN_BUG","","",null,null],[17,"SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG","","",null,null],[17,"SSL_OP_CRYPTOPRO_TLSEXT_BUG","","",null,null],[17,"SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG","","",null,null],[17,"SSL_OP_MSIE_SSLV2_RSA_PADDING","","",null,null],[17,"SSL_OP_PKCS1_CHECK_1","","",null,null],[17,"SSL_OP_PKCS1_CHECK_2","","",null,null],[17,"SSL_OP_EPHEMERAL_RSA","","",null,null],[17,"SSL_OP_ALL","","",null,null],[17,"SSL_OP_NO_SSL_MASK","","",null,null],[17,"SSL_VERIFY_PEER","","Verify that the server&#39;s certificate is trusted",null,null],[17,"SSL_VERIFY_NONE","","Do not verify the server&#39;s certificate",null,null],[17,"SSL_VERIFY_FAIL_IF_NO_PEER_CERT","","Terminate handshake if client did not return a certificate.\nUse together with SSL_VERIFY_PEER.",null,null],[8,"IntoSsl","","",null,null],[10,"into_ssl","","",25,{"inputs":[{"name":"intossl"}],"output":{"name":"result"}}],[11,"hash","","",26,null],[11,"cmp","","",26,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",26,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":{"name":"option"}}],[11,"lt","","",26,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":{"name":"bool"}}],[11,"le","","",26,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":{"name":"bool"}}],[11,"gt","","",26,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":{"name":"bool"}}],[11,"ge","","",26,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"sslcontextoptions"}],"output":{"name":"sslcontextoptions"}}],[11,"eq","","",26,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":{"name":"bool"}}],[11,"fmt","","",26,{"inputs":[{"name":"sslcontextoptions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",26,{"inputs":[],"output":{"name":"sslcontextoptions"}}],[11,"all","","Returns the set containing all flags.",26,{"inputs":[],"output":{"name":"sslcontextoptions"}}],[11,"bits","","Returns the raw value of the flags currently stored.",26,{"inputs":[{"name":"sslcontextoptions"}],"output":{"name":"u64"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",26,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",26,{"inputs":[{"name":"u64"}],"output":{"name":"sslcontextoptions"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",26,{"inputs":[{"name":"sslcontextoptions"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",26,{"inputs":[{"name":"sslcontextoptions"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",26,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",26,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",26,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",26,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",26,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",26,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":{"name":"sslcontextoptions"}}],[11,"bitor_assign","","Adds the set of flags.",26,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",26,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":{"name":"sslcontextoptions"}}],[11,"bitxor_assign","","Toggles the set of flags.",26,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",26,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":{"name":"sslcontextoptions"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",26,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",26,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":{"name":"sslcontextoptions"}}],[11,"sub_assign","","Disables all flags enabled in the set.",26,{"inputs":[{"name":"sslcontextoptions"},{"name":"sslcontextoptions"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",26,{"inputs":[{"name":"sslcontextoptions"}],"output":{"name":"sslcontextoptions"}}],[11,"extend","","",26,{"inputs":[{"name":"sslcontextoptions"},{"name":"t"}],"output":null}],[11,"from_iter","","",26,{"inputs":[{"name":"t"}],"output":{"name":"sslcontextoptions"}}],[11,"eq","","",19,{"inputs":[{"name":"sslmethod"},{"name":"sslmethod"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"sslmethod"},{"name":"sslmethod"}],"output":{"name":"bool"}}],[11,"hash","","",19,null],[11,"fmt","","",19,{"inputs":[{"name":"sslmethod"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"sslmethod"}],"output":{"name":"sslmethod"}}],[11,"is_dtls","","",19,{"inputs":[{"name":"sslmethod"}],"output":{"name":"bool"}}],[11,"is_dtlsv1","","",19,{"inputs":[{"name":"sslmethod"}],"output":{"name":"bool"}}],[11,"is_dtlsv1_2","","",19,{"inputs":[{"name":"sslmethod"}],"output":{"name":"bool"}}],[11,"hash","","",27,null],[11,"cmp","","",27,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",27,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":{"name":"option"}}],[11,"lt","","",27,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"le","","",27,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"gt","","",27,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"ge","","",27,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"sslverifymode"}],"output":{"name":"sslverifymode"}}],[11,"eq","","",27,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"fmt","","",27,{"inputs":[{"name":"sslverifymode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",27,{"inputs":[],"output":{"name":"sslverifymode"}}],[11,"all","","Returns the set containing all flags.",27,{"inputs":[],"output":{"name":"sslverifymode"}}],[11,"bits","","Returns the raw value of the flags currently stored.",27,{"inputs":[{"name":"sslverifymode"}],"output":{"name":"i32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",27,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",27,{"inputs":[{"name":"i32"}],"output":{"name":"sslverifymode"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",27,{"inputs":[{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",27,{"inputs":[{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",27,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",27,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",27,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",27,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",27,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",27,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":{"name":"sslverifymode"}}],[11,"bitor_assign","","Adds the set of flags.",27,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",27,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":{"name":"sslverifymode"}}],[11,"bitxor_assign","","Toggles the set of flags.",27,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",27,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":{"name":"sslverifymode"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",27,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",27,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":{"name":"sslverifymode"}}],[11,"sub_assign","","Disables all flags enabled in the set.",27,{"inputs":[{"name":"sslverifymode"},{"name":"sslverifymode"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",27,{"inputs":[{"name":"sslverifymode"}],"output":{"name":"sslverifymode"}}],[11,"extend","","",27,{"inputs":[{"name":"sslverifymode"},{"name":"t"}],"output":null}],[11,"from_iter","","",27,{"inputs":[{"name":"t"}],"output":{"name":"sslverifymode"}}],[11,"new","std::sync::mutex","Creates a new mutex in an unlocked state ready for use.",28,{"inputs":[{"name":"t"}],"output":{"name":"mutex"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",28,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"try_lock","","Attempts to acquire this lock.",28,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"is_poisoned","","Determines whether the lock is poisoned.",28,{"inputs":[{"name":"mutex"}],"output":{"name":"bool"}}],[11,"into_inner","","Consumes this mutex, returning the underlying data.",28,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",28,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"from","alloc::boxed","",29,{"inputs":[{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",29,{"inputs":[{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",29,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"from","","",29,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"from","","",29,{"inputs":[{"name":"str"}],"output":{"name":"box"}}],[11,"from","","",29,{"inputs":[{"name":"str"}],"output":{"name":"box"}}],[11,"description","core::str","",30,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"str"}}],[11,"description","","",31,{"inputs":[{"name":"utf8error"}],"output":{"name":"str"}}],[11,"description","core::num","",32,{"inputs":[{"name":"parseinterror"}],"output":{"name":"str"}}],[11,"description","core::num::dec2flt","",33,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"str"}}],[11,"description","collections::string","",34,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"str"}}],[11,"description","","",35,{"inputs":[{"name":"fromutf16error"}],"output":{"name":"str"}}],[11,"description","","",36,{"inputs":[{"name":"parseerror"}],"output":{"name":"str"}}],[11,"description","alloc::boxed","",29,{"inputs":[{"name":"box"}],"output":{"name":"str"}}],[11,"cause","","",29,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"is","openssl","Returns true if the boxed type is the same as `T`",37,{"inputs":[{"name":"error"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",37,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",37,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",37,{"inputs":[{"name":"error"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",37,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",37,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",37,{"inputs":[{"name":"error"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",37,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",37,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",37,{"inputs":[{"name":"error"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",37,{"inputs":[{"name":"error"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",37,{"inputs":[{"name":"error"}],"output":{"name":"result"}}],[11,"next","std::ascii","",38,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",38,null],[11,"next_back","","",38,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"shl","core::num","",39,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",39,null],[11,"shr","","",39,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",39,null],[11,"shl","","",39,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",39,null],[11,"shr","","",39,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",39,null],[11,"shl","","",39,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",39,null],[11,"shr","","",39,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",39,null],[11,"shl","","",39,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",39,null],[11,"shr","","",39,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",39,null],[11,"shl","","",39,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",39,null],[11,"shr","","",39,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",39,null],[11,"shl","","",39,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",39,null],[11,"shr","","",39,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",39,null],[11,"shl","","",39,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",39,null],[11,"shr","","",39,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",39,null],[11,"shl","","",39,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",39,null],[11,"shr","","",39,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",39,null],[11,"shl","","",39,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",39,null],[11,"shr","","",39,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",39,null],[11,"shl","","",39,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",39,null],[11,"shr","","",39,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",39,null],[11,"add","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",39,null],[11,"sub","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",39,null],[11,"mul","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",39,null],[11,"div","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",39,null],[11,"rem","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",39,null],[11,"not","","",39,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",39,null],[11,"bitor","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",39,null],[11,"bitand","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",39,null],[11,"add","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",39,null],[11,"sub","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",39,null],[11,"mul","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",39,null],[11,"div","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",39,null],[11,"rem","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",39,null],[11,"not","","",39,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",39,null],[11,"bitor","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",39,null],[11,"bitand","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",39,null],[11,"add","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",39,null],[11,"sub","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",39,null],[11,"mul","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",39,null],[11,"div","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",39,null],[11,"rem","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",39,null],[11,"not","","",39,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",39,null],[11,"bitor","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",39,null],[11,"bitand","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",39,null],[11,"add","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",39,null],[11,"sub","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",39,null],[11,"mul","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",39,null],[11,"div","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",39,null],[11,"rem","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",39,null],[11,"not","","",39,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",39,null],[11,"bitor","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",39,null],[11,"bitand","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",39,null],[11,"add","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",39,null],[11,"sub","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",39,null],[11,"mul","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",39,null],[11,"div","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",39,null],[11,"rem","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",39,null],[11,"not","","",39,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",39,null],[11,"bitor","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",39,null],[11,"bitand","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",39,null],[11,"add","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",39,null],[11,"sub","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",39,null],[11,"mul","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",39,null],[11,"div","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",39,null],[11,"rem","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",39,null],[11,"not","","",39,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",39,null],[11,"bitor","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",39,null],[11,"bitand","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",39,null],[11,"add","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",39,null],[11,"sub","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",39,null],[11,"mul","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",39,null],[11,"div","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",39,null],[11,"rem","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",39,null],[11,"not","","",39,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",39,null],[11,"bitor","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",39,null],[11,"bitand","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",39,null],[11,"add","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",39,null],[11,"sub","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",39,null],[11,"mul","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",39,null],[11,"div","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",39,null],[11,"rem","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",39,null],[11,"not","","",39,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",39,null],[11,"bitor","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",39,null],[11,"bitand","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",39,null],[11,"add","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",39,null],[11,"sub","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",39,null],[11,"mul","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",39,null],[11,"div","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",39,null],[11,"rem","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",39,null],[11,"not","","",39,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",39,null],[11,"bitor","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",39,null],[11,"bitand","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",39,null],[11,"add","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",39,null],[11,"sub","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",39,null],[11,"mul","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",39,null],[11,"div","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",39,null],[11,"rem","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",39,null],[11,"not","","",39,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",39,null],[11,"bitor","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",39,null],[11,"bitand","","",39,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",39,null],[11,"clone","std::thread::local","",40,{"inputs":[{"name":"localkeystate"}],"output":{"name":"localkeystate"}}],[11,"eq","","",40,{"inputs":[{"name":"localkeystate"},{"name":"localkeystate"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"localkeystate"},{"name":"localkeystate"}],"output":{"name":"bool"}}],[11,"with","","Acquires a reference to the value in this TLS key.",41,{"inputs":[{"name":"localkey"},{"name":"f"}],"output":{"name":"r"}}],[11,"state","","Query the current state of this key.",41,{"inputs":[{"name":"localkey"}],"output":{"name":"localkeystate"}}],[11,"set","std::thread::scoped_tls","Inserts a value into this scoped thread local storage slot for a\nduration of a closure.",42,{"inputs":[{"name":"scopedkey"},{"name":"t"},{"name":"f"}],"output":{"name":"r"}}],[11,"with","","Gets a value out of this scoped variable.",42,{"inputs":[{"name":"scopedkey"},{"name":"f"}],"output":{"name":"r"}}],[11,"is_set","","Test whether this TLS key has been `set` for the current thread.",42,{"inputs":[{"name":"scopedkey"}],"output":{"name":"bool"}}],[11,"new","std::thread","Generates the base configuration for spawning a thread, from which\nconfiguration methods can be chained.",43,{"inputs":[],"output":{"name":"builder"}}],[11,"name","","Names the thread-to-be. Currently the name is used for identification\nonly in panic messages.",43,{"inputs":[{"name":"builder"},{"name":"string"}],"output":{"name":"builder"}}],[11,"stack_size","","Sets the size of the stack for the new thread.",43,{"inputs":[{"name":"builder"},{"name":"usize"}],"output":{"name":"builder"}}],[11,"spawn","","Spawns a new thread, and returns a join handle for it.",43,{"inputs":[{"name":"builder"},{"name":"f"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"thread"}],"output":{"name":"thread"}}],[11,"unpark","","Atomically makes the handle&#39;s token available if it is not already.",44,null],[11,"name","","Gets the thread&#39;s name.",44,{"inputs":[{"name":"thread"}],"output":{"name":"option"}}],[11,"fmt","","",44,{"inputs":[{"name":"thread"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",44,{"inputs":[{"name":"option"}],"output":{"name":"thread"}}],[11,"thread","","Extracts a handle to the underlying thread",45,{"inputs":[{"name":"joinhandle"}],"output":{"name":"thread"}}],[11,"join","","Waits for the associated thread to finish.",45,{"inputs":[{"name":"joinhandle"}],"output":{"name":"result"}}],[11,"clone","std::collections::hash::table","",46,{"inputs":[{"name":"rawbucket"}],"output":{"name":"rawbucket"}}],[11,"clone","","",47,{"inputs":[{"name":"bucket"}],"output":{"name":"bucket"}}],[11,"clone","","",48,{"inputs":[{"name":"safehash"}],"output":{"name":"safehash"}}],[11,"eq","","",48,{"inputs":[{"name":"safehash"},{"name":"safehash"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"safehash"},{"name":"safehash"}],"output":{"name":"bool"}}],[11,"inspect","","Peek at the hash value, which is guaranteed to be non-zero.",48,{"inputs":[{"name":"safehash"}],"output":{"name":"u64"}}],[11,"table","","Borrow a reference to the table.",49,{"inputs":[{"name":"fullbucket"}],"output":{"name":"m"}}],[11,"into_table","","Move out the reference to the table.",49,{"inputs":[{"name":"fullbucket"}],"output":{"name":"m"}}],[11,"index","","Get the raw index.",49,{"inputs":[{"name":"fullbucket"}],"output":{"name":"usize"}}],[11,"table","","Borrow a reference to the table.",50,{"inputs":[{"name":"emptybucket"}],"output":{"name":"m"}}],[11,"into_table","","Move out the reference to the table.",50,{"inputs":[{"name":"emptybucket"}],"output":{"name":"m"}}],[11,"into_table","","Move out the reference to the table.",47,{"inputs":[{"name":"bucket"}],"output":{"name":"m"}}],[11,"index","","Get the raw index.",47,{"inputs":[{"name":"bucket"}],"output":{"name":"usize"}}],[11,"new","","",47,{"inputs":[{"name":"m"},{"name":"safehash"}],"output":{"name":"bucket"}}],[11,"at_index","","",47,{"inputs":[{"name":"m"},{"name":"usize"}],"output":{"name":"bucket"}}],[11,"first","","",47,{"inputs":[{"name":"m"}],"output":{"name":"bucket"}}],[11,"peek","","Reads a bucket at a given index, returning an enum indicating whether\nit&#39;s initialized or not. You need to match on this enum to get\nthe appropriate types to call most of the other functions in\nthis module.",47,{"inputs":[{"name":"bucket"}],"output":{"name":"bucketstate"}}],[11,"next","","Modifies the bucket pointer in place to make it point to the next slot.",47,null],[11,"next","","",50,{"inputs":[{"name":"emptybucket"}],"output":{"name":"bucket"}}],[11,"into_bucket","","",50,{"inputs":[{"name":"emptybucket"}],"output":{"name":"bucket"}}],[11,"gap_peek","","",50,{"inputs":[{"name":"emptybucket"}],"output":{"name":"option"}}],[11,"put","","Puts given key and value pair, along with the key&#39;s hash,\ninto this bucket in the hashtable. Note how `self` is &#39;moved&#39; into\nthis function, because this slot will no longer be empty when\nwe return! A `FullBucket` is returned for later use, pointing to\nthe newly-filled slot in the hashtable.",50,{"inputs":[{"name":"emptybucket"},{"name":"safehash"},{"name":"k"},{"name":"v"}],"output":{"name":"fullbucket"}}],[11,"next","","",49,{"inputs":[{"name":"fullbucket"}],"output":{"name":"bucket"}}],[11,"into_bucket","","",49,{"inputs":[{"name":"fullbucket"}],"output":{"name":"bucket"}}],[11,"distance","","Get the distance between this bucket and the &#39;ideal&#39; location\nas determined by the key&#39;s hash stored in it.",49,{"inputs":[{"name":"fullbucket"}],"output":{"name":"usize"}}],[11,"hash","","",49,{"inputs":[{"name":"fullbucket"}],"output":{"name":"safehash"}}],[11,"read","","Gets references to the key and value at a given index.",49,null],[11,"take","","Removes this bucket&#39;s key and value from the hashtable.",49,null],[11,"replace","","",49,null],[11,"read_mut","","Gets mutable references to the key and value at a given index.",49,null],[11,"into_refs","","Exchange a bucket state for immutable references into the table.\nBecause the underlying reference to the table is also consumed,\nno further changes to the structure of the table are possible;\nin exchange for this, the returned references have a longer lifetime\nthan the references returned by `read()`.",49,null],[11,"into_mut_refs","","This works similarly to `into_refs`, exchanging a bucket state\nfor mutable references into the table.",49,null],[11,"expect_full","","",51,{"inputs":[{"name":"bucketstate"}],"output":{"name":"fullbucket"}}],[11,"full","","",52,{"inputs":[{"name":"gapthenfull"}],"output":{"name":"fullbucket"}}],[11,"shift","","",52,{"inputs":[{"name":"gapthenfull"}],"output":{"name":"option"}}],[11,"new","","Creates a new raw table from a given capacity. All buckets are\ninitially empty.",53,{"inputs":[{"name":"usize"}],"output":{"name":"rawtable"}}],[11,"capacity","","The hashtable&#39;s capacity, similar to a vector&#39;s.",53,{"inputs":[{"name":"rawtable"}],"output":{"name":"usize"}}],[11,"size","","The number of elements ever `put` in the hashtable, minus the number\nof elements ever `take`n.",53,{"inputs":[{"name":"rawtable"}],"output":{"name":"usize"}}],[11,"iter","","",53,{"inputs":[{"name":"rawtable"}],"output":{"name":"iter"}}],[11,"iter_mut","","",53,{"inputs":[{"name":"rawtable"}],"output":{"name":"itermut"}}],[11,"into_iter","","",53,{"inputs":[{"name":"rawtable"}],"output":{"name":"intoiter"}}],[11,"drain","","",53,{"inputs":[{"name":"rawtable"}],"output":{"name":"drain"}}],[11,"clone","","",54,{"inputs":[{"name":"rawbuckets"}],"output":{"name":"rawbuckets"}}],[11,"next","","",54,{"inputs":[{"name":"rawbuckets"}],"output":{"name":"option"}}],[11,"next","","",55,{"inputs":[{"name":"revmovebuckets"}],"output":{"name":"option"}}],[11,"clone","","",56,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",56,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",56,null],[11,"len","","",56,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",57,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",57,null],[11,"len","","",57,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"next","","",58,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",58,null],[11,"len","","",58,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",59,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",59,null],[11,"len","","",59,{"inputs":[{"name":"drain"}],"output":{"name":"usize"}}],[11,"drop","","",59,null],[11,"clone","","",53,{"inputs":[{"name":"rawtable"}],"output":{"name":"rawtable"}}],[11,"drop","","",53,null],[11,"clone","std::collections::hash::map","",60,{"inputs":[{"name":"defaultresizepolicy"}],"output":{"name":"defaultresizepolicy"}}],[11,"clone","","",61,{"inputs":[{"name":"hashmap"}],"output":{"name":"hashmap"}}],[11,"new","","Creates an empty HashMap.",61,{"inputs":[],"output":{"name":"hashmap"}}],[11,"with_capacity","","Creates an empty hash map with the given initial capacity.",61,{"inputs":[{"name":"usize"}],"output":{"name":"hashmap"}}],[11,"with_hasher","","Creates an empty hashmap which will use the given hash builder to hash\nkeys.",61,{"inputs":[{"name":"s"}],"output":{"name":"hashmap"}}],[11,"with_hash_state","","Deprecated, renamed to `with_hasher`",61,{"inputs":[{"name":"s"}],"output":{"name":"hashmap"}}],[11,"with_capacity_and_hasher","","Creates an empty HashMap with space for at least `capacity`\nelements, using `hasher` to hash the keys.",61,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"with_capacity_and_hash_state","","Deprecated, renamed to `with_capacity_and_hasher`",61,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"hasher","","Returns a reference to the map&#39;s hasher.",61,{"inputs":[{"name":"hashmap"}],"output":{"name":"s"}}],[11,"capacity","","Returns the number of elements the map can hold without reallocating.",61,{"inputs":[{"name":"hashmap"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashMap`. The collection may reserve more space to avoid\nfrequent reallocations.",61,null],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",61,null],[11,"keys","","An iterator visiting all keys in arbitrary order.\nIterator element type is `&amp;&#39;a K`.",61,{"inputs":[{"name":"hashmap"}],"output":{"name":"keys"}}],[11,"values","","An iterator visiting all values in arbitrary order.\nIterator element type is `&amp;&#39;a V`.",61,{"inputs":[{"name":"hashmap"}],"output":{"name":"values"}}],[11,"iter","","An iterator visiting all key-value pairs in arbitrary order.\nIterator element type is `(&amp;&#39;a K, &amp;&#39;a V)`.",61,{"inputs":[{"name":"hashmap"}],"output":{"name":"iter"}}],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary order,\nwith mutable references to the values.\nIterator element type is `(&amp;&#39;a K, &amp;&#39;a mut V)`.",61,{"inputs":[{"name":"hashmap"}],"output":{"name":"itermut"}}],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place manipulation.",61,{"inputs":[{"name":"hashmap"},{"name":"k"}],"output":{"name":"entry"}}],[11,"len","","Returns the number of elements in the map.",61,{"inputs":[{"name":"hashmap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",61,{"inputs":[{"name":"hashmap"}],"output":{"name":"bool"}}],[11,"drain","","Clears the map, returning all key-value pairs as an iterator. Keeps the\nallocated memory for reuse.",61,{"inputs":[{"name":"hashmap"}],"output":{"name":"drain"}}],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the allocated memory\nfor reuse.",61,null],[11,"get","","Returns a reference to the value corresponding to the key.",61,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",61,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",61,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",61,{"inputs":[{"name":"hashmap"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",61,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"eq","","",61,{"inputs":[{"name":"hashmap"},{"name":"hashmap"}],"output":{"name":"bool"}}],[11,"fmt","","",61,{"inputs":[{"name":"hashmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",61,{"inputs":[],"output":{"name":"hashmap"}}],[11,"index","","",61,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"v"}}],[11,"clone","","",62,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"clone","","",63,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"clone","","",64,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each key-value\npair out of the map in arbitrary order. The map cannot be used after\ncalling this.",61,{"inputs":[{"name":"hashmap"}],"output":{"name":"intoiter"}}],[11,"next","","",62,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",62,null],[11,"len","","",62,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",65,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",65,null],[11,"len","","",65,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"next","","",66,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",66,null],[11,"len","","",66,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",63,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",63,null],[11,"len","","",63,{"inputs":[{"name":"keys"}],"output":{"name":"usize"}}],[11,"next","","",64,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",64,null],[11,"len","","",64,{"inputs":[{"name":"values"}],"output":{"name":"usize"}}],[11,"next","","",67,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",67,null],[11,"len","","",67,{"inputs":[{"name":"drain"}],"output":{"name":"usize"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",68,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",68,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",69,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",69,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry\nwith a lifetime bound to the map itself",69,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry, and returns the entry&#39;s old value",69,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value out of the entry, and returns it",69,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry&#39;s key,\nand returns a mutable reference to it",70,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"from_iter","","",61,{"inputs":[{"name":"t"}],"output":{"name":"hashmap"}}],[11,"extend","","",61,null],[11,"extend","","",61,null],[11,"clone","","",71,{"inputs":[{"name":"randomstate"}],"output":{"name":"randomstate"}}],[11,"new","","Constructs a new `RandomState` that is initialized with random keys.",71,{"inputs":[],"output":{"name":"randomstate"}}],[11,"build_hasher","","",71,{"inputs":[{"name":"randomstate"}],"output":{"name":"siphasher"}}],[11,"default","","",71,{"inputs":[],"output":{"name":"randomstate"}}],[11,"get","","",61,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"take","","",61,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"replace","","",61,{"inputs":[{"name":"hashmap"},{"name":"k"}],"output":{"name":"option"}}],[11,"clone","std::collections::hash::set","",72,{"inputs":[{"name":"hashset"}],"output":{"name":"hashset"}}],[11,"new","","Creates an empty HashSet.",72,{"inputs":[],"output":{"name":"hashset"}}],[11,"with_capacity","","Creates an empty HashSet with space for at least `n` elements in\nthe hash table.",72,{"inputs":[{"name":"usize"}],"output":{"name":"hashset"}}],[11,"with_hasher","","Creates a new empty hash set which will use the given hasher to hash\nkeys.",72,{"inputs":[{"name":"s"}],"output":{"name":"hashset"}}],[11,"with_capacity_and_hasher","","Creates an empty HashSet with space for at least `capacity`\nelements in the hash table, using `hasher` to hash the keys.",72,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"hasher","","Returns a reference to the set&#39;s hasher.",72,{"inputs":[{"name":"hashset"}],"output":{"name":"s"}}],[11,"with_hash_state","","Deprecated, renamed to `with_hasher`",72,{"inputs":[{"name":"s"}],"output":{"name":"hashset"}}],[11,"with_capacity_and_hash_state","","Deprecated, renamed to `with_capacity_and_hasher`",72,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"capacity","","Returns the number of elements the set can hold without reallocating.",72,{"inputs":[{"name":"hashset"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashSet`. The collection may reserve more space to avoid\nfrequent reallocations.",72,null],[11,"shrink_to_fit","","Shrinks the capacity of the set as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",72,null],[11,"iter","","An iterator visiting all elements in arbitrary order.\nIterator element type is &amp;&#39;a T.",72,{"inputs":[{"name":"hashset"}],"output":{"name":"iter"}}],[11,"difference","","Visit the values representing the difference.",72,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visit the values representing the symmetric difference.",72,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visit the values representing the intersection.",72,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"intersection"}}],[11,"union","","Visit the values representing the union.",72,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"union"}}],[11,"len","","Returns the number of elements in the set.",72,{"inputs":[{"name":"hashset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements.",72,{"inputs":[{"name":"hashset"}],"output":{"name":"bool"}}],[11,"drain","","Clears the set, returning all elements in an iterator.",72,{"inputs":[{"name":"hashset"}],"output":{"name":"drain"}}],[11,"clear","","Clears the set, removing all values.",72,null],[11,"contains","","Returns `true` if the set contains a value.",72,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",72,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"option"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",72,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",72,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",72,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set.",72,{"inputs":[{"name":"hashset"},{"name":"t"}],"output":{"name":"bool"}}],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",72,{"inputs":[{"name":"hashset"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",72,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",72,{"inputs":[{"name":"hashset"},{"name":"q"}],"output":{"name":"option"}}],[11,"eq","","",72,{"inputs":[{"name":"hashset"},{"name":"hashset"}],"output":{"name":"bool"}}],[11,"fmt","","",72,{"inputs":[{"name":"hashset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",72,{"inputs":[{"name":"i"}],"output":{"name":"hashset"}}],[11,"extend","","",72,null],[11,"extend","","",72,null],[11,"default","","",72,{"inputs":[],"output":{"name":"hashset"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out\nof the set in arbitrary order. The set cannot be used after calling\nthis.",72,{"inputs":[{"name":"hashset"}],"output":{"name":"intoiter"}}],[11,"clone","","",73,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",73,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",73,null],[11,"len","","",73,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next","","",74,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",74,null],[11,"len","","",74,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next","","",75,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",75,null],[11,"len","","",75,{"inputs":[{"name":"drain"}],"output":{"name":"usize"}}],[11,"clone","","",76,{"inputs":[{"name":"intersection"}],"output":{"name":"intersection"}}],[11,"next","","",76,{"inputs":[{"name":"intersection"}],"output":{"name":"option"}}],[11,"size_hint","","",76,null],[11,"clone","","",77,{"inputs":[{"name":"difference"}],"output":{"name":"difference"}}],[11,"next","","",77,{"inputs":[{"name":"difference"}],"output":{"name":"option"}}],[11,"size_hint","","",77,null],[11,"clone","","",78,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"symmetricdifference"}}],[11,"next","","",78,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"option"}}],[11,"size_hint","","",78,null],[11,"clone","","",79,{"inputs":[{"name":"union"}],"output":{"name":"union"}}],[11,"next","","",79,{"inputs":[{"name":"union"}],"output":{"name":"option"}}],[11,"size_hint","","",79,null],[11,"hasher","std::collections::hash::state","",80,{"inputs":[{"name":"defaultstate"}],"output":{"name":"h"}}],[11,"clone","","",80,{"inputs":[{"name":"defaultstate"}],"output":{"name":"defaultstate"}}],[11,"default","","",80,{"inputs":[],"output":{"name":"defaultstate"}}],[11,"clone","collections::binary_heap","",81,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"clone_from","","",81,null],[11,"default","","",81,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"fmt","","",81,{"inputs":[{"name":"binaryheap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",81,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",81,{"inputs":[{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",81,{"inputs":[{"name":"binaryheap"}],"output":{"name":"iter"}}],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",81,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",81,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",81,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",81,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",81,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",81,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"push","","Pushes an item onto the binary heap.",81,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",81,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"t"}}],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",81,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"option"}}],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",81,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",81,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of the binary heap.",81,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"is_empty","","Checks if the binary heap is empty.",81,{"inputs":[{"name":"binaryheap"}],"output":{"name":"bool"}}],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",81,{"inputs":[{"name":"binaryheap"}],"output":{"name":"drain"}}],[11,"clear","","Drops all items from the binary heap.",81,null],[11,"drop","","",82,null],[11,"clone","","",83,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",83,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",83,null],[11,"next_back","","",83,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",84,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",84,null],[11,"next_back","","",84,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",85,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",85,null],[11,"next_back","","",85,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"from","","",81,{"inputs":[{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","collections::vec","",86,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from_iter","collections::binary_heap","",81,{"inputs":[{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",81,{"inputs":[{"name":"binaryheap"}],"output":{"name":"intoiter"}}],[11,"extend","","",81,null],[11,"extend","","",81,null],[11,"clone","collections::linked_list","",87,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"clone","","",88,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"from","","",89,{"inputs":[{"name":"option"}],"output":{"name":"rawlink"}}],[11,"clone","","",89,{"inputs":[{"name":"rawlink"}],"output":{"name":"rawlink"}}],[11,"default","","",90,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",90,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",90,null],[11,"iter","","Provides a forward iterator.",90,{"inputs":[{"name":"linkedlist"}],"output":{"name":"iter"}}],[11,"iter_mut","","Provides a forward iterator with mutable references.",90,{"inputs":[{"name":"linkedlist"}],"output":{"name":"itermut"}}],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",90,{"inputs":[{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of the `LinkedList`.",90,{"inputs":[{"name":"linkedlist"}],"output":{"name":"usize"}}],[11,"clear","","Removes all elements from the `LinkedList`.",90,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",90,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",90,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",90,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",90,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_front","","Adds an element first in the list.",90,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",90,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_back","","Appends an element to the back of a list",90,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",90,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",90,{"inputs":[{"name":"linkedlist"},{"name":"usize"}],"output":{"name":"linkedlist"}}],[11,"front_place","","Returns a place for insertion at the front of the list.",90,{"inputs":[{"name":"linkedlist"}],"output":{"name":"frontplace"}}],[11,"back_place","","Returns a place for insertion at the back of the list.",90,{"inputs":[{"name":"linkedlist"}],"output":{"name":"backplace"}}],[11,"drop","","",90,null],[11,"next","","",87,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",87,null],[11,"next_back","","",87,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",91,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",91,null],[11,"next_back","","",91,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",91,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",91,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",88,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",88,null],[11,"next_back","","",88,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","",90,{"inputs":[{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",90,{"inputs":[{"name":"linkedlist"}],"output":{"name":"intoiter"}}],[11,"extend","","",90,null],[11,"extend","","",90,null],[11,"eq","","",90,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",90,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"cmp","","",90,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"ordering"}}],[11,"clone","","",90,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"fmt","","",90,{"inputs":[{"name":"linkedlist"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",90,null],[11,"make_place","","",92,{"inputs":[{"name":"frontplace"}],"output":{"name":"frontplace"}}],[11,"pointer","","",92,null],[11,"finalize","","",92,null],[11,"make_place","","",93,{"inputs":[{"name":"backplace"}],"output":{"name":"backplace"}}],[11,"pointer","","",93,null],[11,"finalize","","",93,null],[11,"clone","collections::vec_deque","",94,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"drop","","",94,null],[11,"default","","",94,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",94,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",94,{"inputs":[{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",94,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",94,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap","","Swaps elements at indices `i` and `j`.",94,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",94,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",94,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",94,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",94,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",94,null],[11,"iter","","Returns a front-to-back iterator.",94,{"inputs":[{"name":"vecdeque"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",94,{"inputs":[{"name":"vecdeque"}],"output":{"name":"itermut"}}],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",94,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",94,null],[11,"len","","Returns the number of elements in the `VecDeque`.",94,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the buffer contains no elements",94,{"inputs":[{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"drain","","Create a draining iterator that removes the specified range in the\n`VecDeque` and yields the removed items.",94,{"inputs":[{"name":"vecdeque"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the buffer, removing all values.",94,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",94,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",94,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",94,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",94,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",94,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"push_front","","Inserts an element first in the sequence.",94,null],[11,"push_back","","Appends an element to the back of a buffer",94,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",94,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",94,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",94,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",94,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",94,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"split_off","","Splits the collection into two at the given index.",94,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",94,null],[11,"retain","","Retains only the elements specified by the predicate.",94,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",94,null],[11,"clone","","",95,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",95,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",95,null],[11,"next_back","","",95,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",96,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",96,null],[11,"next_back","","",96,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",97,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",97,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",97,null],[11,"next_back","","",97,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"drop","","",98,null],[11,"next","","",98,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",98,null],[11,"next_back","","",98,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"eq","","",94,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",94,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"cmp","","",94,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"ordering"}}],[11,"hash","","",94,null],[11,"index","","",94,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"index_mut","","",94,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"from_iter","","",94,{"inputs":[{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",94,{"inputs":[{"name":"vecdeque"}],"output":{"name":"intoiter"}}],[11,"extend","","",94,null],[11,"extend","","",94,null],[11,"fmt","","",94,{"inputs":[{"name":"vecdeque"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","std::dynamic_lib","",99,null],[11,"open","","Lazily open a dynamic library. When passed None it gives a\nhandle to the calling process",99,{"inputs":[{"name":"option"}],"output":{"name":"result"}}],[11,"prepend_search_path","","Prepends a path to this process&#39;s search path for dynamic libraries",99,null],[11,"create_path","","From a slice of paths, create a new vector which is suitable to be an\nenvironment variable for this platforms dylib search path.",99,null],[11,"envvar","","Returns the environment variable for this process&#39;s dynamic library\nsearch path",99,{"inputs":[],"output":{"name":"str"}}],[11,"search_path","","Returns the current search path for dynamic libraries being used by this\nprocess",99,{"inputs":[],"output":{"name":"vec"}}],[11,"symbol","","Accesses the value at the symbol of the dynamic library.",99,{"inputs":[{"name":"dynamiclibrary"},{"name":"str"}],"output":{"name":"result"}}],[11,"next","std::env","",100,{"inputs":[{"name":"vars"}],"output":{"name":"option"}}],[11,"size_hint","","",100,null],[11,"next","","",101,{"inputs":[{"name":"varsos"}],"output":{"name":"option"}}],[11,"size_hint","","",101,null],[11,"clone","","",102,{"inputs":[{"name":"varerror"}],"output":{"name":"varerror"}}],[11,"eq","","",102,{"inputs":[{"name":"varerror"},{"name":"varerror"}],"output":{"name":"bool"}}],[11,"ne","","",102,{"inputs":[{"name":"varerror"},{"name":"varerror"}],"output":{"name":"bool"}}],[11,"fmt","","",102,{"inputs":[{"name":"varerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",102,{"inputs":[{"name":"varerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",102,{"inputs":[{"name":"varerror"}],"output":{"name":"str"}}],[11,"next","","",103,{"inputs":[{"name":"splitpaths"}],"output":{"name":"option"}}],[11,"size_hint","","",103,null],[11,"fmt","","",104,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",104,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",104,{"inputs":[{"name":"joinpathserror"}],"output":{"name":"str"}}],[11,"next","","",105,{"inputs":[{"name":"args"}],"output":{"name":"option"}}],[11,"size_hint","","",105,null],[11,"len","","",105,{"inputs":[{"name":"args"}],"output":{"name":"usize"}}],[11,"next","","",106,{"inputs":[{"name":"argsos"}],"output":{"name":"option"}}],[11,"size_hint","","",106,null],[11,"len","","",106,{"inputs":[{"name":"argsos"}],"output":{"name":"usize"}}],[11,"clone","std::ffi::c_str","",107,{"inputs":[{"name":"cstring"}],"output":{"name":"cstring"}}],[11,"hash","","",107,null],[11,"cmp","","",107,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",107,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"option"}}],[11,"lt","","",107,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"le","","",107,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"gt","","",107,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"ge","","",107,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"eq","","",107,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"ne","","",107,{"inputs":[{"name":"cstring"},{"name":"cstring"}],"output":{"name":"bool"}}],[11,"hash","","",108,null],[11,"fmt","","",109,{"inputs":[{"name":"nulerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",109,{"inputs":[{"name":"nulerror"},{"name":"nulerror"}],"output":{"name":"bool"}}],[11,"ne","","",109,{"inputs":[{"name":"nulerror"},{"name":"nulerror"}],"output":{"name":"bool"}}],[11,"clone","","",109,{"inputs":[{"name":"nulerror"}],"output":{"name":"nulerror"}}],[11,"fmt","","",110,{"inputs":[{"name":"intostringerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",110,{"inputs":[{"name":"intostringerror"},{"name":"intostringerror"}],"output":{"name":"bool"}}],[11,"ne","","",110,{"inputs":[{"name":"intostringerror"},{"name":"intostringerror"}],"output":{"name":"bool"}}],[11,"clone","","",110,{"inputs":[{"name":"intostringerror"}],"output":{"name":"intostringerror"}}],[11,"new","","Creates a new C-compatible string from a container of bytes.",107,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[11,"from_vec_unchecked","","Creates a C-compatible string from a byte vector without checking for\ninterior 0 bytes.",107,{"inputs":[{"name":"vec"}],"output":{"name":"cstring"}}],[11,"from_raw","","Retakes ownership of a `CString` that was transferred to C.",107,null],[11,"into_raw","","Transfers ownership of the string to a C caller.",107,null],[11,"into_string","","Converts the `CString` into a `String` if it contains valid Unicode data.",107,{"inputs":[{"name":"cstring"}],"output":{"name":"result"}}],[11,"into_bytes","","Returns the underlying byte buffer.",107,{"inputs":[{"name":"cstring"}],"output":{"name":"vec"}}],[11,"into_bytes_with_nul","","Equivalent to the `into_bytes` function except that the returned vector\nincludes the trailing nul byte.",107,{"inputs":[{"name":"cstring"}],"output":{"name":"vec"}}],[11,"as_bytes","","Returns the contents of this `CString` as a slice of bytes.",107,null],[11,"as_bytes_with_nul","","Equivalent to the `as_bytes` function except that the returned slice\nincludes the trailing nul byte.",107,null],[11,"from_ptr","","Casts a raw C string to a safe C string wrapper.",108,null],[11,"from_bytes_with_nul","","Creates a C string wrapper from a byte slice.",108,null],[11,"from_bytes_with_nul_unchecked","","Unsafely creates a C string wrapper from a byte slice.",108,null],[11,"as_ptr","","Returns the inner pointer to this C string.",108,null],[11,"to_bytes","","Converts this C string to a byte slice.",108,null],[11,"to_bytes_with_nul","","Converts this C string to a byte slice containing the trailing 0 byte.",108,null],[11,"to_str","","Yields a `&amp;str` slice if the `CStr` contains valid UTF-8.",108,{"inputs":[{"name":"cstr"}],"output":{"name":"result"}}],[11,"to_string_lossy","","Converts a `CStr` into a `Cow&lt;str&gt;`.",108,{"inputs":[{"name":"cstr"}],"output":{"name":"cow"}}],[11,"deref","","",107,{"inputs":[{"name":"cstring"}],"output":{"name":"cstr"}}],[11,"fmt","","",107,{"inputs":[{"name":"cstring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","collections::vec","",86,{"inputs":[{"name":"cstring"}],"output":{"name":"vec"}}],[11,"fmt","std::ffi::c_str","",108,{"inputs":[{"name":"cstr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"borrow","","",107,{"inputs":[{"name":"cstring"}],"output":{"name":"cstr"}}],[11,"nul_position","","Returns the position of the nul byte in the slice that was provided to\n`CString::new`.",109,{"inputs":[{"name":"nulerror"}],"output":{"name":"usize"}}],[11,"into_vec","","Consumes this error, returning the underlying vector of bytes which\ngenerated the error in the first place.",109,{"inputs":[{"name":"nulerror"}],"output":{"name":"vec"}}],[11,"description","","",109,{"inputs":[{"name":"nulerror"}],"output":{"name":"str"}}],[11,"fmt","","",109,{"inputs":[{"name":"nulerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","std::io::error","",111,{"inputs":[{"name":"nulerror"}],"output":{"name":"error"}}],[11,"into_cstring","std::ffi::c_str","Consumes this error, returning original `CString` which generated the\nerror.",110,{"inputs":[{"name":"intostringerror"}],"output":{"name":"cstring"}}],[11,"utf8_error","","Access the underlying UTF-8 error that was the cause of this error.",110,{"inputs":[{"name":"intostringerror"}],"output":{"name":"utf8error"}}],[11,"description","","",110,{"inputs":[{"name":"intostringerror"}],"output":{"name":"str"}}],[11,"cause","","",110,{"inputs":[{"name":"intostringerror"}],"output":{"name":"option"}}],[11,"fmt","","",110,{"inputs":[{"name":"intostringerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",108,{"inputs":[{"name":"cstr"},{"name":"cstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",108,{"inputs":[{"name":"cstr"},{"name":"cstr"}],"output":{"name":"option"}}],[11,"cmp","","",108,{"inputs":[{"name":"cstr"},{"name":"cstr"}],"output":{"name":"ordering"}}],[11,"to_owned","","",108,{"inputs":[{"name":"cstr"}],"output":{"name":"cstring"}}],[11,"from","","",107,{"inputs":[{"name":"cstr"}],"output":{"name":"cstring"}}],[11,"index","","",107,{"inputs":[{"name":"cstring"},{"name":"rangefull"}],"output":{"name":"cstr"}}],[11,"as_ref","","",108,{"inputs":[{"name":"cstr"}],"output":{"name":"cstr"}}],[11,"as_ref","","",107,{"inputs":[{"name":"cstring"}],"output":{"name":"cstr"}}],[11,"clone","std::ffi::os_str","",112,{"inputs":[{"name":"osstring"}],"output":{"name":"osstring"}}],[11,"new","","Constructs a new empty `OsString`.",112,{"inputs":[],"output":{"name":"osstring"}}],[11,"from_bytes","","Constructs an `OsString` from a byte sequence.",112,{"inputs":[{"name":"b"}],"output":{"name":"option"}}],[11,"as_os_str","","Converts to an `OsStr` slice.",112,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"into_string","","Converts the `OsString` into a `String` if it contains valid Unicode data.",112,{"inputs":[{"name":"osstring"}],"output":{"name":"result"}}],[11,"push","","Extends the string with the given `&amp;OsStr` slice.",112,null],[11,"with_capacity","","Creates a new `OsString` with the given capacity. The string will be\nable to hold exactly `capacity` bytes without reallocating. If\n`capacity` is 0, the string will not allocate.",112,{"inputs":[{"name":"usize"}],"output":{"name":"osstring"}}],[11,"clear","","Truncates the `OsString` to zero length.",112,null],[11,"capacity","","Returns the number of bytes this `OsString` can hold without\nreallocating.",112,{"inputs":[{"name":"osstring"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted\nin the given `OsString`. The collection may reserve more space to avoid\nfrequent reallocations.",112,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more bytes to be\ninserted in the given `OsString`. Does nothing if the capacity is\nalready sufficient.",112,null],[11,"from","","",112,{"inputs":[{"name":"string"}],"output":{"name":"osstring"}}],[11,"from","","",112,{"inputs":[{"name":"t"}],"output":{"name":"osstring"}}],[11,"index","","",112,{"inputs":[{"name":"osstring"},{"name":"rangefull"}],"output":{"name":"osstr"}}],[11,"new","","Coerces into an `OsStr` slice.",113,{"inputs":[{"name":"s"}],"output":{"name":"osstr"}}],[11,"to_str","","Yields a `&amp;str` slice if the `OsStr` is valid unicode.",113,{"inputs":[{"name":"osstr"}],"output":{"name":"option"}}],[11,"to_string_lossy","","Converts an `OsStr` to a `Cow&lt;str&gt;`.",113,{"inputs":[{"name":"osstr"}],"output":{"name":"cow"}}],[11,"to_os_string","","Copies the slice into an owned `OsString`.",113,{"inputs":[{"name":"osstr"}],"output":{"name":"osstring"}}],[11,"to_bytes","","Yields this `OsStr` as a byte slice.",113,{"inputs":[{"name":"osstr"}],"output":{"name":"option"}}],[11,"to_cstring","","Creates a `CString` containing this `OsStr` data.",113,{"inputs":[{"name":"osstr"}],"output":{"name":"option"}}],[11,"is_empty","","Checks whether the `OsStr` is empty.",113,{"inputs":[{"name":"osstr"}],"output":{"name":"bool"}}],[11,"len","","Returns the number of bytes in this `OsStr`.",113,{"inputs":[{"name":"osstr"}],"output":{"name":"usize"}}],[11,"deref","","",112,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"fmt","","",112,{"inputs":[{"name":"osstring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",112,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","","",112,{"inputs":[{"name":"osstring"},{"name":"str"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",112,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"option"}}],[11,"lt","","",112,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"le","","",112,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"gt","","",112,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"ge","","",112,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",112,{"inputs":[{"name":"osstring"},{"name":"str"}],"output":{"name":"option"}}],[11,"cmp","","",112,{"inputs":[{"name":"osstring"},{"name":"osstring"}],"output":{"name":"ordering"}}],[11,"hash","","",112,null],[11,"eq","","",113,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","","",113,{"inputs":[{"name":"osstr"},{"name":"str"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",113,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"lt","","",113,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"le","","",113,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"gt","","",113,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"ge","","",113,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",113,{"inputs":[{"name":"osstr"},{"name":"str"}],"output":{"name":"option"}}],[11,"cmp","","",113,{"inputs":[{"name":"osstr"},{"name":"osstr"}],"output":{"name":"ordering"}}],[11,"eq","","",112,{"inputs":[{"name":"osstring"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","","",113,{"inputs":[{"name":"osstr"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",112,{"inputs":[{"name":"osstring"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"partial_cmp","","",113,{"inputs":[{"name":"osstr"},{"name":"osstring"}],"output":{"name":"option"}}],[11,"eq","","",112,{"inputs":[{"name":"osstring"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",112,{"inputs":[{"name":"osstring"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"eq","collections::borrow","",114,{"inputs":[{"name":"cow"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","std::ffi::os_str","",113,{"inputs":[{"name":"osstr"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","collections::borrow","",114,{"inputs":[{"name":"cow"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"partial_cmp","std::ffi::os_str","",113,{"inputs":[{"name":"osstr"},{"name":"cow"}],"output":{"name":"option"}}],[11,"eq","collections::borrow","",114,{"inputs":[{"name":"cow"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",114,{"inputs":[{"name":"cow"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"eq","","",114,{"inputs":[{"name":"cow"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","std::ffi::os_str","",112,{"inputs":[{"name":"osstring"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","collections::borrow","",114,{"inputs":[{"name":"cow"},{"name":"osstring"}],"output":{"name":"option"}}],[11,"partial_cmp","std::ffi::os_str","",112,{"inputs":[{"name":"osstring"},{"name":"cow"}],"output":{"name":"option"}}],[11,"hash","","",113,null],[11,"fmt","","",113,{"inputs":[{"name":"osstr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"borrow","","",112,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"to_owned","","",113,{"inputs":[{"name":"osstr"}],"output":{"name":"osstring"}}],[11,"as_ref","","",113,{"inputs":[{"name":"osstr"}],"output":{"name":"osstr"}}],[11,"as_ref","","",112,{"inputs":[{"name":"osstring"}],"output":{"name":"osstr"}}],[11,"as_ref","collections::string","",115,{"inputs":[{"name":"string"}],"output":{"name":"osstr"}}],[11,"clone","std::fs","",116,{"inputs":[{"name":"metadata"}],"output":{"name":"metadata"}}],[11,"clone","","",117,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"fmt","","",118,{"inputs":[{"name":"permissions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",118,{"inputs":[{"name":"permissions"},{"name":"permissions"}],"output":{"name":"bool"}}],[11,"ne","","",118,{"inputs":[{"name":"permissions"},{"name":"permissions"}],"output":{"name":"bool"}}],[11,"clone","","",118,{"inputs":[{"name":"permissions"}],"output":{"name":"permissions"}}],[11,"hash","","",119,null],[11,"eq","","",119,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"ne","","",119,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"clone","","",119,{"inputs":[{"name":"filetype"}],"output":{"name":"filetype"}}],[11,"open","","Attempts to open a file in read-only mode.",120,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"create","","Opens a file in write-only mode.",120,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"sync_all","","Attempts to sync all OS-internal metadata to disk.",120,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"sync_data","","This function is similar to `sync_all`, except that it may not\nsynchronize file metadata to the filesystem.",120,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"set_len","","Truncates or extends the underlying file, updating the size of\nthis file to become `size`.",120,{"inputs":[{"name":"file"},{"name":"u64"}],"output":{"name":"result"}}],[11,"metadata","","Queries metadata about the underlying file.",120,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying file.",120,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"fmt","","",120,{"inputs":[{"name":"file"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",120,null],[11,"read_to_end","","",120,{"inputs":[{"name":"file"},{"name":"vec"}],"output":{"name":"result"}}],[11,"write","","",120,null],[11,"flush","","",120,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"seek","","",120,{"inputs":[{"name":"file"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"new","","Creates a blank new set of options ready for configuration.",117,{"inputs":[],"output":{"name":"openoptions"}}],[11,"read","","Sets the option for read access.",117,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"write","","Sets the option for write access.",117,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"append","","Sets the option for the append mode.",117,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"truncate","","Sets the option for truncating a previous file.",117,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"create","","Sets the option for creating a new file.",117,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"create_new","","Sets the option to always create a new file.",117,{"inputs":[{"name":"openoptions"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"open","","Opens a file at `path` with the options specified by `self`.",117,{"inputs":[{"name":"openoptions"},{"name":"p"}],"output":{"name":"result"}}],[11,"file_type","","Returns the file type for this metadata.",116,{"inputs":[{"name":"metadata"}],"output":{"name":"filetype"}}],[11,"is_dir","","Returns whether this metadata is for a directory.",116,{"inputs":[{"name":"metadata"}],"output":{"name":"bool"}}],[11,"is_file","","Returns whether this metadata is for a regular file.",116,{"inputs":[{"name":"metadata"}],"output":{"name":"bool"}}],[11,"len","","Returns the size of the file, in bytes, this metadata is for.",116,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"permissions","","Returns the permissions of the file this metadata is for.",116,{"inputs":[{"name":"metadata"}],"output":{"name":"permissions"}}],[11,"modified","","Returns the last modification time listed in this metadata.",116,{"inputs":[{"name":"metadata"}],"output":{"name":"result"}}],[11,"accessed","","Returns the last access time of this metadata.",116,{"inputs":[{"name":"metadata"}],"output":{"name":"result"}}],[11,"created","","Returns the creation time listed in the this metadata.",116,{"inputs":[{"name":"metadata"}],"output":{"name":"result"}}],[11,"readonly","","Returns whether these permissions describe a readonly file.",118,{"inputs":[{"name":"permissions"}],"output":{"name":"bool"}}],[11,"set_readonly","","Modifies the readonly flag for this set of permissions.",118,null],[11,"is_dir","","Test whether this file type represents a directory.",119,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_file","","Test whether this file type represents a regular file.",119,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_symlink","","Test whether this file type represents a symbolic link.",119,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"next","","",121,{"inputs":[{"name":"readdir"}],"output":{"name":"option"}}],[11,"path","","Returns the full path to the file that this entry represents.",122,{"inputs":[{"name":"direntry"}],"output":{"name":"pathbuf"}}],[11,"metadata","","Return the metadata for the file that this entry points at.",122,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"file_type","","Return the file type for the file that this entry points at.",122,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"file_name","","Returns the bare file name of this directory entry without any other\nleading path component.",122,{"inputs":[{"name":"direntry"}],"output":{"name":"osstring"}}],[11,"next","","",123,{"inputs":[{"name":"walkdir"}],"output":{"name":"option"}}],[11,"new","","Creates a new set of options with default mode/security settings for all\nplatforms and also non-recursive.",124,{"inputs":[],"output":{"name":"dirbuilder"}}],[11,"recursive","","Indicate that directories create should be created recursively, creating\nall parent directories if they do not exist with the same security and\npermissions settings.",124,{"inputs":[{"name":"dirbuilder"},{"name":"bool"}],"output":{"name":"dirbuilder"}}],[11,"create","","Create the specified directory with the options configured in this\nbuilder.",124,{"inputs":[{"name":"dirbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"new","std::io::buffered","Creates a new `BufReader` with a default buffer capacity.",125,{"inputs":[{"name":"r"}],"output":{"name":"bufreader"}}],[11,"with_capacity","","Creates a new `BufReader` with the specified buffer capacity.",125,{"inputs":[{"name":"usize"},{"name":"r"}],"output":{"name":"bufreader"}}],[11,"get_ref","","Gets a reference to the underlying reader.",125,{"inputs":[{"name":"bufreader"}],"output":{"name":"r"}}],[11,"get_mut","","Gets a mutable reference to the underlying reader.",125,{"inputs":[{"name":"bufreader"}],"output":{"name":"r"}}],[11,"into_inner","","Unwraps this `BufReader`, returning the underlying reader.",125,{"inputs":[{"name":"bufreader"}],"output":{"name":"r"}}],[11,"read","","",125,null],[11,"fill_buf","","",125,{"inputs":[{"name":"bufreader"}],"output":{"name":"result"}}],[11,"consume","","",125,null],[11,"fmt","","",125,{"inputs":[{"name":"bufreader"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"seek","","Seek to an offset, in bytes, in the underlying reader.",125,{"inputs":[{"name":"bufreader"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"fmt","","",126,{"inputs":[{"name":"intoinnererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `BufWriter` with a default buffer capacity.",127,{"inputs":[{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"with_capacity","","Creates a new `BufWriter` with the specified buffer capacity.",127,{"inputs":[{"name":"usize"},{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",127,{"inputs":[{"name":"bufwriter"}],"output":{"name":"w"}}],[11,"get_mut","","Gets a mutable reference to the underlying writer.",127,{"inputs":[{"name":"bufwriter"}],"output":{"name":"w"}}],[11,"into_inner","","Unwraps this `BufWriter`, returning the underlying writer.",127,{"inputs":[{"name":"bufwriter"}],"output":{"name":"result"}}],[11,"write","","",127,null],[11,"flush","","",127,{"inputs":[{"name":"bufwriter"}],"output":{"name":"result"}}],[11,"fmt","","",127,{"inputs":[{"name":"bufwriter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"seek","","Seek to the offset, in bytes, in the underlying writer.",127,{"inputs":[{"name":"bufwriter"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"drop","","",127,null],[11,"error","","Returns the error which caused the call to `into_inner()` to fail.",126,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"error"}}],[11,"into_inner","","Returns the buffered writer instance which generated the error.",126,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"w"}}],[11,"from","std::io::error","",111,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"error"}}],[11,"description","std::io::buffered","",126,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"str"}}],[11,"fmt","","",126,{"inputs":[{"name":"intoinnererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `LineWriter`.",128,{"inputs":[{"name":"w"}],"output":{"name":"linewriter"}}],[11,"with_capacity","","Creates a new `LineWriter` with a specified capacity for the internal\nbuffer.",128,{"inputs":[{"name":"usize"},{"name":"w"}],"output":{"name":"linewriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",128,{"inputs":[{"name":"linewriter"}],"output":{"name":"w"}}],[11,"get_mut","","Gets a mutable reference to the underlying writer.",128,{"inputs":[{"name":"linewriter"}],"output":{"name":"w"}}],[11,"into_inner","","Unwraps this `LineWriter`, returning the underlying writer.",128,{"inputs":[{"name":"linewriter"}],"output":{"name":"result"}}],[11,"write","","",128,null],[11,"flush","","",128,{"inputs":[{"name":"linewriter"}],"output":{"name":"result"}}],[11,"fmt","","",128,{"inputs":[{"name":"linewriter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","std::io::cursor","",129,{"inputs":[{"name":"cursor"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",129,{"inputs":[{"name":"cursor"}],"output":{"name":"cursor"}}],[11,"new","","Creates a new cursor wrapping the provided underlying I/O object.",129,{"inputs":[{"name":"t"}],"output":{"name":"cursor"}}],[11,"into_inner","","Consumes this cursor, returning the underlying value.",129,{"inputs":[{"name":"cursor"}],"output":{"name":"t"}}],[11,"get_ref","","Gets a reference to the underlying value in this cursor.",129,{"inputs":[{"name":"cursor"}],"output":{"name":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying value in this cursor.",129,{"inputs":[{"name":"cursor"}],"output":{"name":"t"}}],[11,"position","","Returns the current position of this cursor.",129,{"inputs":[{"name":"cursor"}],"output":{"name":"u64"}}],[11,"set_position","","Sets the position of this cursor.",129,null],[11,"seek","","",129,{"inputs":[{"name":"cursor"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"read","","",129,null],[11,"fill_buf","","",129,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"consume","","",129,null],[11,"write","","",129,null],[11,"flush","","",129,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"write","","",129,null],[11,"flush","","",129,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"write","","",129,null],[11,"flush","","",129,{"inputs":[{"name":"cursor"}],"output":{"name":"result"}}],[11,"fmt","std::io::error","",111,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",130,{"inputs":[{"name":"custom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",131,{"inputs":[{"name":"errorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",131,{"inputs":[{"name":"errorkind"}],"output":{"name":"errorkind"}}],[11,"eq","","",131,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"ne","","",131,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"new","","Creates a new I/O error from a known kind of error as well as an\narbitrary error payload.",111,{"inputs":[{"name":"errorkind"},{"name":"e"}],"output":{"name":"error"}}],[11,"last_os_error","","Returns an error representing the last OS error which occurred.",111,{"inputs":[],"output":{"name":"error"}}],[11,"from_raw_os_error","","Creates a new instance of an `Error` from a particular OS error code.",111,{"inputs":[{"name":"i32"}],"output":{"name":"error"}}],[11,"raw_os_error","","Returns the OS error that this error represents (if any).",111,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"get_ref","","Returns a reference to the inner error wrapped by this error (if any).",111,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the inner error wrapped by this error\n(if any).",111,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"into_inner","","Consumes the `Error`, returning its inner error (if any).",111,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",111,{"inputs":[{"name":"error"}],"output":{"name":"errorkind"}}],[11,"fmt","","",132,{"inputs":[{"name":"repr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",111,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",111,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",111,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"read","alloc::boxed","",29,null],[11,"read_to_end","","",29,{"inputs":[{"name":"box"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","",29,{"inputs":[{"name":"box"},{"name":"string"}],"output":{"name":"result"}}],[11,"read_exact","","",29,null],[11,"write","","",29,null],[11,"flush","","",29,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"write_all","","",29,null],[11,"write_fmt","","",29,{"inputs":[{"name":"box"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"seek","","",29,{"inputs":[{"name":"box"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"fill_buf","","",29,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"consume","","",29,null],[11,"read_until","","",29,{"inputs":[{"name":"box"},{"name":"u8"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_line","","",29,{"inputs":[{"name":"box"},{"name":"string"}],"output":{"name":"result"}}],[11,"write","collections::vec","",86,null],[11,"write_all","","",86,null],[11,"flush","","",86,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"new","std::io::lazy","",133,null],[11,"get","","",133,{"inputs":[{"name":"lazy"}],"output":{"name":"option"}}],[11,"read","std::io::util","",134,null],[11,"fill_buf","","",134,{"inputs":[{"name":"empty"}],"output":{"name":"result"}}],[11,"consume","","",134,null],[11,"read","","",135,null],[11,"write","","",136,null],[11,"flush","","",136,{"inputs":[{"name":"sink"}],"output":{"name":"result"}}],[11,"read","std::io::stdio","",137,null],[11,"write","","",138,null],[11,"flush","","",138,{"inputs":[{"name":"stdoutraw"}],"output":{"name":"result"}}],[11,"write","","",139,null],[11,"flush","","",139,{"inputs":[{"name":"stderrraw"}],"output":{"name":"result"}}],[11,"write","","",140,null],[11,"flush","","",140,{"inputs":[{"name":"maybe"}],"output":{"name":"result"}}],[11,"read","","",140,null],[11,"lock","","Locks this handle to the standard input stream, returning a readable\nguard.",141,{"inputs":[{"name":"stdin"}],"output":{"name":"stdinlock"}}],[11,"read_line","","Locks this handle and reads a line of input into the specified buffer.",141,{"inputs":[{"name":"stdin"},{"name":"string"}],"output":{"name":"result"}}],[11,"read","","",141,null],[11,"read_to_end","","",141,{"inputs":[{"name":"stdin"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","",141,{"inputs":[{"name":"stdin"},{"name":"string"}],"output":{"name":"result"}}],[11,"read_exact","","",141,null],[11,"read","","",142,null],[11,"read_to_end","","",142,{"inputs":[{"name":"stdinlock"},{"name":"vec"}],"output":{"name":"result"}}],[11,"fill_buf","","",142,{"inputs":[{"name":"stdinlock"}],"output":{"name":"result"}}],[11,"consume","","",142,null],[11,"lock","","Locks this handle to the standard output stream, returning a writable\nguard.",143,{"inputs":[{"name":"stdout"}],"output":{"name":"stdoutlock"}}],[11,"write","","",143,null],[11,"flush","","",143,{"inputs":[{"name":"stdout"}],"output":{"name":"result"}}],[11,"write_all","","",143,null],[11,"write_fmt","","",143,{"inputs":[{"name":"stdout"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"write","","",144,null],[11,"flush","","",144,{"inputs":[{"name":"stdoutlock"}],"output":{"name":"result"}}],[11,"lock","","Locks this handle to the standard error stream, returning a writable\nguard.",145,{"inputs":[{"name":"stderr"}],"output":{"name":"stderrlock"}}],[11,"write","","",145,null],[11,"flush","","",145,{"inputs":[{"name":"stderr"}],"output":{"name":"result"}}],[11,"write_all","","",145,null],[11,"write_fmt","","",145,{"inputs":[{"name":"stderr"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"write","","",146,null],[11,"flush","","",146,{"inputs":[{"name":"stderrlock"}],"output":{"name":"result"}}],[11,"fmt","std::io","",147,{"inputs":[{"name":"seekfrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",147,{"inputs":[{"name":"seekfrom"}],"output":{"name":"seekfrom"}}],[11,"eq","","",147,{"inputs":[{"name":"seekfrom"},{"name":"seekfrom"}],"output":{"name":"bool"}}],[11,"ne","","",147,{"inputs":[{"name":"seekfrom"},{"name":"seekfrom"}],"output":{"name":"bool"}}],[11,"write","","",148,null],[11,"flush","","",148,{"inputs":[{"name":"broadcast"}],"output":{"name":"result"}}],[11,"read","","",149,null],[11,"limit","","Returns the number of bytes that can be read before this instance will\nreturn EOF.",150,{"inputs":[{"name":"take"}],"output":{"name":"u64"}}],[11,"read","","",150,null],[11,"fill_buf","","",150,{"inputs":[{"name":"take"}],"output":{"name":"result"}}],[11,"consume","","",150,null],[11,"read","","",151,null],[11,"next","","",152,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"fmt","","",153,{"inputs":[{"name":"charserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",154,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"description","","",153,{"inputs":[{"name":"charserror"}],"output":{"name":"str"}}],[11,"cause","","",153,{"inputs":[{"name":"charserror"}],"output":{"name":"option"}}],[11,"fmt","","",153,{"inputs":[{"name":"charserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",155,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next","","",156,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"cmp","std::net::ip","",157,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",157,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"option"}}],[11,"lt","","",157,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"le","","",157,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"gt","","",157,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"ge","","",157,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"hash","","",157,null],[11,"fmt","","",157,{"inputs":[{"name":"ipaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",157,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"ne","","",157,{"inputs":[{"name":"ipaddr"},{"name":"ipaddr"}],"output":{"name":"bool"}}],[11,"clone","","",157,{"inputs":[{"name":"ipaddr"}],"output":{"name":"ipaddr"}}],[11,"fmt","","",158,{"inputs":[{"name":"ipv6multicastscope"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",158,null],[11,"clone","","",158,{"inputs":[{"name":"ipv6multicastscope"}],"output":{"name":"ipv6multicastscope"}}],[11,"eq","","",158,{"inputs":[{"name":"ipv6multicastscope"},{"name":"ipv6multicastscope"}],"output":{"name":"bool"}}],[11,"ne","","",158,{"inputs":[{"name":"ipv6multicastscope"},{"name":"ipv6multicastscope"}],"output":{"name":"bool"}}],[11,"new","","Creates a new IPv4 address from four eight-bit octets.",159,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipv4addr"}}],[11,"octets","","Returns the four eight-bit integers that make up this address.",159,null],[11,"is_unspecified","","Returns true for the special &#39;unspecified&#39; address 0.0.0.0.",159,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_loopback","","Returns true if this is a loopback address (127.0.0.0/8).",159,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_private","","Returns true if this is a private address.",159,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_link_local","","Returns true if the address is link-local (169.254.0.0/16).",159,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_global","","Returns true if the address appears to be globally routable.",159,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_multicast","","Returns true if this is a multicast address.",159,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_broadcast","","Returns true if this is a broadcast address.",159,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"is_documentation","","Returns true if this address is in a range designated for documentation.",159,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"to_ipv6_compatible","","Converts this address to an IPv4-compatible IPv6 address.",159,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv6addr"}}],[11,"to_ipv6_mapped","","Converts this address to an IPv4-mapped IPv6 address.",159,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv6addr"}}],[11,"fmt","","",157,{"inputs":[{"name":"ipaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",159,{"inputs":[{"name":"ipv4addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",159,{"inputs":[{"name":"ipv4addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",159,{"inputs":[{"name":"ipv4addr"}],"output":{"name":"ipv4addr"}}],[11,"eq","","",159,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"bool"}}],[11,"hash","","",159,null],[11,"partial_cmp","","",159,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"option"}}],[11,"cmp","","",159,{"inputs":[{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"ordering"}}],[11,"from","","",159,{"inputs":[{"name":"u32"}],"output":{"name":"ipv4addr"}}],[11,"new","","Creates a new IPv6 address from eight 16-bit segments.",160,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipv6addr"}}],[11,"segments","","Returns the eight 16-bit segments that make up this address.",160,null],[11,"is_unspecified","","Returns true for the special &#39;unspecified&#39; address ::.",160,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_loopback","","Returns true if this is a loopback address (::1).",160,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_global","","Returns true if the address appears to be globally routable.",160,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unique_local","","Returns true if this is a unique local address (IPv6).",160,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unicast_link_local","","Returns true if the address is unicast and link-local (fe80::/10).",160,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unicast_site_local","","Returns true if this is a deprecated unicast site-local address (IPv6\nfec0::/10).",160,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"is_unicast_global","","Returns true if the address is a globally routable unicast address.",160,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"multicast_scope","","Returns the address&#39;s multicast scope if the address is multicast.",160,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"option"}}],[11,"is_multicast","","Returns true if this is a multicast address.",160,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"to_ipv4","","Converts this address to an IPv4 address. Returns None if this address is\nneither IPv4-compatible or IPv4-mapped.",160,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"option"}}],[11,"fmt","","",160,{"inputs":[{"name":"ipv6addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",160,{"inputs":[{"name":"ipv6addr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",160,{"inputs":[{"name":"ipv6addr"}],"output":{"name":"ipv6addr"}}],[11,"eq","","",160,{"inputs":[{"name":"ipv6addr"},{"name":"ipv6addr"}],"output":{"name":"bool"}}],[11,"hash","","",160,null],[11,"partial_cmp","","",160,{"inputs":[{"name":"ipv6addr"},{"name":"ipv6addr"}],"output":{"name":"option"}}],[11,"cmp","","",160,{"inputs":[{"name":"ipv6addr"},{"name":"ipv6addr"}],"output":{"name":"ordering"}}],[11,"fmt","std::net::addr","",161,{"inputs":[{"name":"socketaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",161,null],[11,"eq","","",161,{"inputs":[{"name":"socketaddr"},{"name":"socketaddr"}],"output":{"name":"bool"}}],[11,"ne","","",161,{"inputs":[{"name":"socketaddr"},{"name":"socketaddr"}],"output":{"name":"bool"}}],[11,"clone","","",161,{"inputs":[{"name":"socketaddr"}],"output":{"name":"socketaddr"}}],[11,"new","","Creates a new socket address from the (ip, port) pair.",161,{"inputs":[{"name":"ipaddr"},{"name":"u16"}],"output":{"name":"socketaddr"}}],[11,"ip","","Returns the IP address associated with this socket address.",161,{"inputs":[{"name":"socketaddr"}],"output":{"name":"ipaddr"}}],[11,"set_ip","","Change the IP address associated with this socket address.",161,null],[11,"port","","Returns the port number associated with this socket address.",161,{"inputs":[{"name":"socketaddr"}],"output":{"name":"u16"}}],[11,"set_port","","Change the port number associated with this socket address.",161,null],[11,"new","","Creates a new socket address from the (ip, port) pair.",162,{"inputs":[{"name":"ipv4addr"},{"name":"u16"}],"output":{"name":"socketaddrv4"}}],[11,"ip","","Returns the IP address associated with this socket address.",162,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"ipv4addr"}}],[11,"set_ip","","Change the IP address associated with this socket address.",162,null],[11,"port","","Returns the port number associated with this socket address.",162,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"u16"}}],[11,"set_port","","Change the port number associated with this socket address.",162,null],[11,"new","","Creates a new socket address from the ip/port/flowinfo/scope_id\ncomponents.",163,{"inputs":[{"name":"ipv6addr"},{"name":"u16"},{"name":"u32"},{"name":"u32"}],"output":{"name":"socketaddrv6"}}],[11,"ip","","Returns the IP address associated with this socket address.",163,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"ipv6addr"}}],[11,"set_ip","","Change the IP address associated with this socket address.",163,null],[11,"port","","Returns the port number associated with this socket address.",163,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"u16"}}],[11,"set_port","","Change the port number associated with this socket address.",163,null],[11,"flowinfo","","Returns the flow information associated with this address,\ncorresponding to the `sin6_flowinfo` field in C.",163,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"u32"}}],[11,"set_flowinfo","","Change the flow information associated with this socket address.",163,null],[11,"scope_id","","Returns the scope ID associated with this address,\ncorresponding to the `sin6_scope_id` field in C.",163,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"u32"}}],[11,"set_scope_id","","Change the scope ID associated with this socket address.",163,null],[11,"fmt","","",161,{"inputs":[{"name":"socketaddr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",162,{"inputs":[{"name":"socketaddrv4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",162,{"inputs":[{"name":"socketaddrv4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",163,{"inputs":[{"name":"socketaddrv6"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",163,{"inputs":[{"name":"socketaddrv6"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",162,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"socketaddrv4"}}],[11,"clone","","",163,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"socketaddrv6"}}],[11,"eq","","",162,{"inputs":[{"name":"socketaddrv4"},{"name":"socketaddrv4"}],"output":{"name":"bool"}}],[11,"eq","","",163,{"inputs":[{"name":"socketaddrv6"},{"name":"socketaddrv6"}],"output":{"name":"bool"}}],[11,"hash","","",162,null],[11,"hash","","",163,null],[11,"to_socket_addrs","","",161,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",162,{"inputs":[{"name":"socketaddrv4"}],"output":{"name":"result"}}],[11,"to_socket_addrs","","",163,{"inputs":[{"name":"socketaddrv6"}],"output":{"name":"result"}}],[11,"connect","std::net::tcp","Opens a TCP connection to a remote host.",164,{"inputs":[{"name":"a"}],"output":{"name":"result"}}],[11,"peer_addr","","Returns the socket address of the remote peer of this TCP connection.",164,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the socket address of the local half of this TCP connection.",164,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",164,{"inputs":[{"name":"tcpstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",164,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",164,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",164,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","Returns the read timeout of this socket.",164,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"write_timeout","","Returns the write timeout of this socket.",164,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"read","","",164,null],[11,"read_to_end","","",164,{"inputs":[{"name":"tcpstream"},{"name":"vec"}],"output":{"name":"result"}}],[11,"write","","",164,null],[11,"flush","","",164,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"fmt","","",164,{"inputs":[{"name":"tcpstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","Creates a new `TcpListener` which will be bound to the specified\naddress.",165,{"inputs":[{"name":"a"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the local socket address of this listener.",165,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",165,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"accept","","Accept a new incoming connection from this listener.",165,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"incoming","","Returns an iterator over the connections being received on this\nlistener.",165,{"inputs":[{"name":"tcplistener"}],"output":{"name":"incoming"}}],[11,"next","","",166,{"inputs":[{"name":"incoming"}],"output":{"name":"option"}}],[11,"fmt","","",165,{"inputs":[{"name":"tcplistener"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","std::net::udp","Creates a UDP socket from the given address.",167,{"inputs":[{"name":"a"}],"output":{"name":"result"}}],[11,"recv_from","","Receives data from the socket. On success, returns the number of bytes\nread and the address from whence the data came.",167,null],[11,"send_to","","Sends data on the socket to the given address. On success, returns the\nnumber of bytes written.",167,null],[11,"local_addr","","Returns the socket address that this socket was created from.",167,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",167,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",167,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",167,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","Returns the read timeout of this socket.",167,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"write_timeout","","Returns the write timeout of this socket.",167,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"fmt","","",167,{"inputs":[{"name":"udpsocket"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","std::net::ip","",157,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",159,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",160,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","std::net::addr","",162,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",163,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",161,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","std::net::parser","",168,{"inputs":[{"name":"addrparseerror"},{"name":"addrparseerror"}],"output":{"name":"bool"}}],[11,"ne","","",168,{"inputs":[{"name":"addrparseerror"},{"name":"addrparseerror"}],"output":{"name":"bool"}}],[11,"clone","","",168,{"inputs":[{"name":"addrparseerror"}],"output":{"name":"addrparseerror"}}],[11,"fmt","","",168,{"inputs":[{"name":"addrparseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",168,{"inputs":[{"name":"addrparseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",168,{"inputs":[{"name":"addrparseerror"}],"output":{"name":"str"}}],[11,"fmt","std::net","",169,{"inputs":[{"name":"shutdown"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",169,{"inputs":[{"name":"shutdown"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"ne","","",169,{"inputs":[{"name":"shutdown"},{"name":"shutdown"}],"output":{"name":"bool"}}],[11,"clone","","",169,{"inputs":[{"name":"shutdown"}],"output":{"name":"shutdown"}}],[11,"next","","",170,{"inputs":[{"name":"lookuphost"}],"output":{"name":"option"}}],[11,"clone","std::os::macos::raw","",171,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"as_raw_stat","std::fs","",116,{"inputs":[{"name":"metadata"}],"output":{"name":"stat"}}],[11,"st_dev","","",116,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"st_ino","","",116,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"st_mode","","",116,{"inputs":[{"name":"metadata"}],"output":{"name":"u32"}}],[11,"st_nlink","","",116,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"st_uid","","",116,{"inputs":[{"name":"metadata"}],"output":{"name":"u32"}}],[11,"st_gid","","",116,{"inputs":[{"name":"metadata"}],"output":{"name":"u32"}}],[11,"st_rdev","","",116,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"st_size","","",116,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"st_atime","","",116,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"st_atime_nsec","","",116,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"st_mtime","","",116,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"st_mtime_nsec","","",116,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"st_ctime","","",116,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"st_ctime_nsec","","",116,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"st_birthtime","","",116,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"st_birthtime_nsec","","",116,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"st_blksize","","",116,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"st_blocks","","",116,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"st_gen","","",116,{"inputs":[{"name":"metadata"}],"output":{"name":"u32"}}],[11,"st_flags","","",116,{"inputs":[{"name":"metadata"}],"output":{"name":"u32"}}],[11,"st_lspare","","",116,{"inputs":[{"name":"metadata"}],"output":{"name":"u32"}}],[11,"st_qspare","","",116,null],[11,"as_raw_fd","","",120,{"inputs":[{"name":"file"}],"output":{"name":"i32"}}],[11,"from_raw_fd","","",120,{"inputs":[{"name":"i32"}],"output":{"name":"file"}}],[11,"into_raw_fd","","",120,{"inputs":[{"name":"file"}],"output":{"name":"i32"}}],[11,"as_raw_fd","std::net::tcp","",164,{"inputs":[{"name":"tcpstream"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",165,{"inputs":[{"name":"tcplistener"}],"output":{"name":"i32"}}],[11,"as_raw_fd","std::net::udp","",167,{"inputs":[{"name":"udpsocket"}],"output":{"name":"i32"}}],[11,"from_raw_fd","std::net::tcp","",164,{"inputs":[{"name":"i32"}],"output":{"name":"tcpstream"}}],[11,"from_raw_fd","","",165,{"inputs":[{"name":"i32"}],"output":{"name":"tcplistener"}}],[11,"from_raw_fd","std::net::udp","",167,{"inputs":[{"name":"i32"}],"output":{"name":"udpsocket"}}],[11,"into_raw_fd","std::net::tcp","",164,{"inputs":[{"name":"tcpstream"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",165,{"inputs":[{"name":"tcplistener"}],"output":{"name":"i32"}}],[11,"into_raw_fd","std::net::udp","",167,{"inputs":[{"name":"udpsocket"}],"output":{"name":"i32"}}],[11,"from_vec","std::ffi::os_str","",112,{"inputs":[{"name":"vec"}],"output":{"name":"osstring"}}],[11,"into_vec","","",112,{"inputs":[{"name":"osstring"}],"output":{"name":"vec"}}],[11,"from_bytes","","",113,null],[11,"as_bytes","","",113,null],[11,"mode","std::fs","",118,{"inputs":[{"name":"permissions"}],"output":{"name":"u32"}}],[11,"set_mode","","",118,null],[11,"from_mode","","",118,{"inputs":[{"name":"u32"}],"output":{"name":"permissions"}}],[11,"mode","","",117,{"inputs":[{"name":"openoptions"},{"name":"u32"}],"output":{"name":"openoptions"}}],[11,"custom_flags","","",117,{"inputs":[{"name":"openoptions"},{"name":"i32"}],"output":{"name":"openoptions"}}],[11,"dev","","",116,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"ino","","",116,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"mode","","",116,{"inputs":[{"name":"metadata"}],"output":{"name":"u32"}}],[11,"nlink","","",116,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"uid","","",116,{"inputs":[{"name":"metadata"}],"output":{"name":"u32"}}],[11,"gid","","",116,{"inputs":[{"name":"metadata"}],"output":{"name":"u32"}}],[11,"rdev","","",116,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"size","","",116,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"atime","","",116,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"atime_nsec","","",116,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"mtime","","",116,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"mtime_nsec","","",116,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"ctime","","",116,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"ctime_nsec","","",116,{"inputs":[{"name":"metadata"}],"output":{"name":"i64"}}],[11,"blksize","","",116,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"blocks","","",116,{"inputs":[{"name":"metadata"}],"output":{"name":"u64"}}],[11,"is_block_device","","",119,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_char_device","","",119,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_fifo","","",119,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_socket","","",119,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"ino","","",122,{"inputs":[{"name":"direntry"}],"output":{"name":"u64"}}],[11,"mode","","",124,{"inputs":[{"name":"dirbuilder"},{"name":"u32"}],"output":{"name":"dirbuilder"}}],[11,"uid","std::process","",172,{"inputs":[{"name":"command"},{"name":"u32"}],"output":{"name":"command"}}],[11,"gid","","",172,{"inputs":[{"name":"command"},{"name":"u32"}],"output":{"name":"command"}}],[11,"session_leader","","",172,{"inputs":[{"name":"command"},{"name":"bool"}],"output":{"name":"command"}}],[11,"before_exec","","",172,{"inputs":[{"name":"command"},{"name":"f"}],"output":{"name":"command"}}],[11,"exec","","",172,{"inputs":[{"name":"command"}],"output":{"name":"error"}}],[11,"signal","","",173,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"from_raw_fd","","",174,{"inputs":[{"name":"i32"}],"output":{"name":"stdio"}}],[11,"as_raw_fd","","",175,{"inputs":[{"name":"childstdin"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",176,{"inputs":[{"name":"childstdout"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",177,{"inputs":[{"name":"childstderr"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",175,{"inputs":[{"name":"childstdin"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",176,{"inputs":[{"name":"childstdout"}],"output":{"name":"i32"}}],[11,"into_raw_fd","","",177,{"inputs":[{"name":"childstderr"}],"output":{"name":"i32"}}],[11,"as_pthread_t","std::thread","",45,{"inputs":[{"name":"joinhandle"}],"output":{"name":"usize"}}],[11,"into_pthread_t","","",45,{"inputs":[{"name":"joinhandle"}],"output":{"name":"usize"}}],[11,"new","std::panic","Creates a new `AssertRecoverSafe` wrapper around the provided type.",178,{"inputs":[{"name":"t"}],"output":{"name":"assertrecoversafe"}}],[11,"into_inner","","Consumes the `AssertRecoverSafe`, returning the wrapped value.",178,{"inputs":[{"name":"assertrecoversafe"}],"output":{"name":"t"}}],[11,"deref","","",178,{"inputs":[{"name":"assertrecoversafe"}],"output":{"name":"t"}}],[11,"deref_mut","","",178,{"inputs":[{"name":"assertrecoversafe"}],"output":{"name":"t"}}],[11,"eq","std::path","",179,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"ne","","",179,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"cmp","","",179,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",179,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"option"}}],[11,"lt","","",179,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"le","","",179,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"gt","","",179,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"ge","","",179,{"inputs":[{"name":"prefix"},{"name":"prefix"}],"output":{"name":"bool"}}],[11,"hash","","",179,null],[11,"fmt","","",179,{"inputs":[{"name":"prefix"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",179,{"inputs":[{"name":"prefix"}],"output":{"name":"prefix"}}],[11,"is_verbatim","","Determines if the prefix is verbatim, i.e. begins with `\\\\?\\`.",179,{"inputs":[{"name":"prefix"}],"output":{"name":"bool"}}],[11,"fmt","","",180,{"inputs":[{"name":"state"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",180,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"option"}}],[11,"lt","","",180,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"le","","",180,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"gt","","",180,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ge","","",180,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"eq","","",180,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",180,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"clone","","",180,{"inputs":[{"name":"state"}],"output":{"name":"state"}}],[11,"fmt","","",181,{"inputs":[{"name":"prefixcomponent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",181,{"inputs":[{"name":"prefixcomponent"}],"output":{"name":"prefixcomponent"}}],[11,"kind","","The parsed prefix data.",181,{"inputs":[{"name":"prefixcomponent"}],"output":{"name":"prefix"}}],[11,"as_os_str","","The raw `OsStr` slice for this prefix.",181,{"inputs":[{"name":"prefixcomponent"}],"output":{"name":"osstr"}}],[11,"eq","","",181,{"inputs":[{"name":"prefixcomponent"},{"name":"prefixcomponent"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",181,{"inputs":[{"name":"prefixcomponent"},{"name":"prefixcomponent"}],"output":{"name":"option"}}],[11,"cmp","","",181,{"inputs":[{"name":"prefixcomponent"},{"name":"prefixcomponent"}],"output":{"name":"ordering"}}],[11,"hash","","",181,null],[11,"fmt","","",182,{"inputs":[{"name":"component"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",182,null],[11,"cmp","","",182,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",182,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"option"}}],[11,"lt","","",182,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"le","","",182,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"gt","","",182,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"ge","","",182,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"eq","","",182,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"ne","","",182,{"inputs":[{"name":"component"},{"name":"component"}],"output":{"name":"bool"}}],[11,"clone","","",182,{"inputs":[{"name":"component"}],"output":{"name":"component"}}],[11,"as_os_str","","Extracts the underlying `OsStr` slice",182,{"inputs":[{"name":"component"}],"output":{"name":"osstr"}}],[11,"as_ref","","",182,{"inputs":[{"name":"component"}],"output":{"name":"osstr"}}],[11,"clone","","",183,{"inputs":[{"name":"components"}],"output":{"name":"components"}}],[11,"clone","","",184,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",183,{"inputs":[{"name":"components"}],"output":{"name":"path"}}],[11,"peek","","Examine the next component without consuming it.",183,{"inputs":[{"name":"components"}],"output":{"name":"option"}}],[11,"as_ref","","",183,{"inputs":[{"name":"components"}],"output":{"name":"path"}}],[11,"as_ref","","",183,{"inputs":[{"name":"components"}],"output":{"name":"osstr"}}],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",184,{"inputs":[{"name":"iter"}],"output":{"name":"path"}}],[11,"as_ref","","",184,{"inputs":[{"name":"iter"}],"output":{"name":"path"}}],[11,"as_ref","","",184,{"inputs":[{"name":"iter"}],"output":{"name":"osstr"}}],[11,"next","","",184,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",184,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",183,{"inputs":[{"name":"components"}],"output":{"name":"option"}}],[11,"next_back","","",183,{"inputs":[{"name":"components"}],"output":{"name":"option"}}],[11,"eq","","",183,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",183,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"option"}}],[11,"cmp","","",183,{"inputs":[{"name":"components"},{"name":"components"}],"output":{"name":"ordering"}}],[11,"clone","","",185,{"inputs":[{"name":"pathbuf"}],"output":{"name":"pathbuf"}}],[11,"new","","Allocates an empty `PathBuf`.",185,{"inputs":[],"output":{"name":"pathbuf"}}],[11,"as_path","","Coerces to a `Path` slice.",185,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"push","","Extends `self` with `path`.",185,null],[11,"pop","","Truncate `self` to `self.parent()`.",185,{"inputs":[{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"set_file_name","","Updates `self.file_name()` to `file_name`.",185,null],[11,"set_extension","","Updates `self.extension()` to `extension`.",185,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"bool"}}],[11,"into_os_string","","Consumes the `PathBuf`, yielding its internal `OsString` storage.",185,{"inputs":[{"name":"pathbuf"}],"output":{"name":"osstring"}}],[11,"from","","",185,{"inputs":[{"name":"t"}],"output":{"name":"pathbuf"}}],[11,"from","","",185,{"inputs":[{"name":"osstring"}],"output":{"name":"pathbuf"}}],[11,"from","","",185,{"inputs":[{"name":"string"}],"output":{"name":"pathbuf"}}],[11,"from_iter","","",185,{"inputs":[{"name":"i"}],"output":{"name":"pathbuf"}}],[11,"extend","","",185,null],[11,"fmt","","",185,{"inputs":[{"name":"pathbuf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Directly wrap a string slice as a `Path` slice.",186,{"inputs":[{"name":"s"}],"output":{"name":"path"}}],[11,"as_os_str","","Yields the underlying `OsStr` slice.",186,{"inputs":[{"name":"path"}],"output":{"name":"osstr"}}],[11,"to_str","","Yields a `&amp;str` slice if the `Path` is valid unicode.",186,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"to_string_lossy","","Converts a `Path` to a `Cow&lt;str&gt;`.",186,{"inputs":[{"name":"path"}],"output":{"name":"cow"}}],[11,"to_path_buf","","Converts a `Path` to an owned `PathBuf`.",186,{"inputs":[{"name":"path"}],"output":{"name":"pathbuf"}}],[11,"is_absolute","","A path is *absolute* if it is independent of the current directory.",186,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"is_relative","","A path is *relative* if it is not absolute.",186,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"prefix","","Returns the *prefix* of a path, if any.",186,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"has_root","","A path has a root if the body of the path begins with the directory separator.",186,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"parent","","The path without its final component, if any.",186,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"file_name","","The final component of the path, if it is a normal file.",186,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"relative_from","","Returns a path that, when joined onto `base`, yields `self`.",186,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"option"}}],[11,"strip_prefix","","Returns a path that, when joined onto `base`, yields `self`.",186,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"result"}}],[11,"starts_with","","Determines whether `base` is a prefix of `self`.",186,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"bool"}}],[11,"ends_with","","Determines whether `child` is a suffix of `self`.",186,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"bool"}}],[11,"file_stem","","Extracts the stem (non-extension) portion of `self.file_name()`.",186,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"extension","","Extracts the extension of `self.file_name()`, if possible.",186,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"join","","Creates an owned `PathBuf` with `path` adjoined to `self`.",186,{"inputs":[{"name":"path"},{"name":"p"}],"output":{"name":"pathbuf"}}],[11,"with_file_name","","Creates an owned `PathBuf` like `self` but with the given file name.",186,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"pathbuf"}}],[11,"with_extension","","Creates an owned `PathBuf` like `self` but with the given extension.",186,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"pathbuf"}}],[11,"components","","Produce an iterator over the components of the path.",186,{"inputs":[{"name":"path"}],"output":{"name":"components"}}],[11,"iter","","Produce an iterator over the path&#39;s components viewed as `OsStr` slices.",186,{"inputs":[{"name":"path"}],"output":{"name":"iter"}}],[11,"display","","Returns an object that implements `Display` for safely printing paths\nthat may contain non-Unicode data.",186,{"inputs":[{"name":"path"}],"output":{"name":"display"}}],[11,"metadata","","Query the file system to get information about a file, directory, etc.",186,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"symlink_metadata","","Query the metadata about a file without following symlinks.",186,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"canonicalize","","Returns the canonical form of the path with all intermediate components\nnormalized and symbolic links resolved.",186,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"read_link","","Reads a symbolic link, returning the file that the link points to.",186,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"read_dir","","Returns an iterator over the entries within a directory.",186,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[11,"exists","","Returns whether the path points at an existing entity.",186,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"is_file","","Returns whether the path is pointing at a regular file.",186,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"is_dir","","Returns whether the path is pointing at a directory.",186,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"deref","","",185,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"borrow","","",185,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"into_cow","","",185,{"inputs":[{"name":"pathbuf"}],"output":{"name":"cow"}}],[11,"from","collections::borrow","",114,{"inputs":[{"name":"path"}],"output":{"name":"cow"}}],[11,"from","","",114,{"inputs":[{"name":"pathbuf"}],"output":{"name":"cow"}}],[11,"to_owned","std::path","",186,{"inputs":[{"name":"path"}],"output":{"name":"pathbuf"}}],[11,"eq","","",185,{"inputs":[{"name":"pathbuf"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"hash","","",185,null],[11,"partial_cmp","","",185,{"inputs":[{"name":"pathbuf"},{"name":"pathbuf"}],"output":{"name":"option"}}],[11,"cmp","","",185,{"inputs":[{"name":"pathbuf"},{"name":"pathbuf"}],"output":{"name":"ordering"}}],[11,"as_ref","","",185,{"inputs":[{"name":"pathbuf"}],"output":{"name":"osstr"}}],[11,"into","","",185,{"inputs":[{"name":"pathbuf"}],"output":{"name":"osstring"}}],[11,"eq","","",187,{"inputs":[{"name":"stripprefixerror"},{"name":"stripprefixerror"}],"output":{"name":"bool"}}],[11,"ne","","",187,{"inputs":[{"name":"stripprefixerror"},{"name":"stripprefixerror"}],"output":{"name":"bool"}}],[11,"clone","","",187,{"inputs":[{"name":"stripprefixerror"}],"output":{"name":"stripprefixerror"}}],[11,"fmt","","",187,{"inputs":[{"name":"stripprefixerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",186,{"inputs":[{"name":"path"}],"output":{"name":"osstr"}}],[11,"fmt","","",186,{"inputs":[{"name":"path"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",188,{"inputs":[{"name":"display"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",188,{"inputs":[{"name":"display"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",186,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"bool"}}],[11,"hash","","",186,null],[11,"partial_cmp","","",186,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"option"}}],[11,"cmp","","",186,{"inputs":[{"name":"path"},{"name":"path"}],"output":{"name":"ordering"}}],[11,"as_ref","","",186,{"inputs":[{"name":"path"}],"output":{"name":"path"}}],[11,"as_ref","std::ffi::os_str","",113,{"inputs":[{"name":"osstr"}],"output":{"name":"path"}}],[11,"as_ref","collections::borrow","",114,{"inputs":[{"name":"cow"}],"output":{"name":"path"}}],[11,"as_ref","std::ffi::os_str","",112,{"inputs":[{"name":"osstring"}],"output":{"name":"path"}}],[11,"as_ref","collections::string","",115,{"inputs":[{"name":"string"}],"output":{"name":"path"}}],[11,"as_ref","std::path","",185,{"inputs":[{"name":"pathbuf"}],"output":{"name":"path"}}],[11,"eq","","",185,{"inputs":[{"name":"pathbuf"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","","",186,{"inputs":[{"name":"path"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",185,{"inputs":[{"name":"pathbuf"},{"name":"path"}],"output":{"name":"option"}}],[11,"partial_cmp","","",186,{"inputs":[{"name":"path"},{"name":"pathbuf"}],"output":{"name":"option"}}],[11,"eq","","",185,{"inputs":[{"name":"pathbuf"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",185,{"inputs":[{"name":"pathbuf"},{"name":"path"}],"output":{"name":"option"}}],[11,"eq","collections::borrow","",114,{"inputs":[{"name":"cow"},{"name":"path"}],"output":{"name":"bool"}}],[11,"eq","std::path","",186,{"inputs":[{"name":"path"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","collections::borrow","",114,{"inputs":[{"name":"cow"},{"name":"path"}],"output":{"name":"option"}}],[11,"partial_cmp","std::path","",186,{"inputs":[{"name":"path"},{"name":"cow"}],"output":{"name":"option"}}],[11,"eq","collections::borrow","",114,{"inputs":[{"name":"cow"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",114,{"inputs":[{"name":"cow"},{"name":"path"}],"output":{"name":"option"}}],[11,"eq","","",114,{"inputs":[{"name":"cow"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"eq","std::path","",185,{"inputs":[{"name":"pathbuf"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","collections::borrow","",114,{"inputs":[{"name":"cow"},{"name":"pathbuf"}],"output":{"name":"option"}}],[11,"partial_cmp","std::path","",185,{"inputs":[{"name":"pathbuf"},{"name":"cow"}],"output":{"name":"option"}}],[11,"eq","","",185,{"inputs":[{"name":"pathbuf"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","std::ffi::os_str","",113,{"inputs":[{"name":"osstr"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::path","",185,{"inputs":[{"name":"pathbuf"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"partial_cmp","std::ffi::os_str","",113,{"inputs":[{"name":"osstr"},{"name":"pathbuf"}],"output":{"name":"option"}}],[11,"eq","std::path","",185,{"inputs":[{"name":"pathbuf"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",185,{"inputs":[{"name":"pathbuf"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"eq","","",185,{"inputs":[{"name":"pathbuf"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",114,{"inputs":[{"name":"cow"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::path","",185,{"inputs":[{"name":"pathbuf"},{"name":"cow"}],"output":{"name":"option"}}],[11,"partial_cmp","collections::borrow","",114,{"inputs":[{"name":"cow"},{"name":"pathbuf"}],"output":{"name":"option"}}],[11,"eq","std::path","",185,{"inputs":[{"name":"pathbuf"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","std::ffi::os_str","",112,{"inputs":[{"name":"osstring"},{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::path","",185,{"inputs":[{"name":"pathbuf"},{"name":"osstring"}],"output":{"name":"option"}}],[11,"partial_cmp","std::ffi::os_str","",112,{"inputs":[{"name":"osstring"},{"name":"pathbuf"}],"output":{"name":"option"}}],[11,"eq","std::path","",186,{"inputs":[{"name":"path"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","std::ffi::os_str","",113,{"inputs":[{"name":"osstr"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::path","",186,{"inputs":[{"name":"path"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"partial_cmp","std::ffi::os_str","",113,{"inputs":[{"name":"osstr"},{"name":"path"}],"output":{"name":"option"}}],[11,"eq","std::path","",186,{"inputs":[{"name":"path"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",186,{"inputs":[{"name":"path"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"eq","","",186,{"inputs":[{"name":"path"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",114,{"inputs":[{"name":"cow"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::path","",186,{"inputs":[{"name":"path"},{"name":"cow"}],"output":{"name":"option"}}],[11,"partial_cmp","collections::borrow","",114,{"inputs":[{"name":"cow"},{"name":"path"}],"output":{"name":"option"}}],[11,"eq","std::path","",186,{"inputs":[{"name":"path"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","std::ffi::os_str","",112,{"inputs":[{"name":"osstring"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","std::path","",186,{"inputs":[{"name":"path"},{"name":"osstring"}],"output":{"name":"option"}}],[11,"partial_cmp","std::ffi::os_str","",112,{"inputs":[{"name":"osstring"},{"name":"path"}],"output":{"name":"option"}}],[11,"eq","","",113,{"inputs":[{"name":"osstr"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",113,{"inputs":[{"name":"osstr"},{"name":"path"}],"output":{"name":"option"}}],[11,"eq","collections::borrow","",114,{"inputs":[{"name":"cow"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",114,{"inputs":[{"name":"cow"},{"name":"path"}],"output":{"name":"option"}}],[11,"eq","std::ffi::os_str","",112,{"inputs":[{"name":"osstring"},{"name":"path"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",112,{"inputs":[{"name":"osstring"},{"name":"path"}],"output":{"name":"option"}}],[11,"eq","collections::borrow","",114,{"inputs":[{"name":"cow"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"eq","std::ffi::os_str","",113,{"inputs":[{"name":"osstr"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","collections::borrow","",114,{"inputs":[{"name":"cow"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"partial_cmp","std::ffi::os_str","",113,{"inputs":[{"name":"osstr"},{"name":"cow"}],"output":{"name":"option"}}],[11,"eq","collections::borrow","",114,{"inputs":[{"name":"cow"},{"name":"osstr"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",114,{"inputs":[{"name":"cow"},{"name":"osstr"}],"output":{"name":"option"}}],[11,"eq","","",114,{"inputs":[{"name":"cow"},{"name":"osstring"}],"output":{"name":"bool"}}],[11,"eq","std::ffi::os_str","",112,{"inputs":[{"name":"osstring"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","collections::borrow","",114,{"inputs":[{"name":"cow"},{"name":"osstring"}],"output":{"name":"option"}}],[11,"partial_cmp","std::ffi::os_str","",112,{"inputs":[{"name":"osstring"},{"name":"cow"}],"output":{"name":"option"}}],[11,"fmt","std::path","",187,{"inputs":[{"name":"stripprefixerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",187,{"inputs":[{"name":"stripprefixerror"}],"output":{"name":"str"}}],[11,"write","std::process","",175,null],[11,"flush","","",175,{"inputs":[{"name":"childstdin"}],"output":{"name":"result"}}],[11,"read","","",176,null],[11,"read","","",177,null],[11,"new","","Constructs a new `Command` for launching the program at\npath `program`, with the following default configuration:",172,{"inputs":[{"name":"s"}],"output":{"name":"command"}}],[11,"arg","","Add an argument to pass to the program.",172,{"inputs":[{"name":"command"},{"name":"s"}],"output":{"name":"command"}}],[11,"args","","Add multiple arguments to pass to the program.",172,null],[11,"env","","Inserts or updates an environment variable mapping.",172,{"inputs":[{"name":"command"},{"name":"k"},{"name":"v"}],"output":{"name":"command"}}],[11,"env_remove","","Removes an environment variable mapping.",172,{"inputs":[{"name":"command"},{"name":"k"}],"output":{"name":"command"}}],[11,"env_clear","","Clears the entire environment map for the child process.",172,{"inputs":[{"name":"command"}],"output":{"name":"command"}}],[11,"current_dir","","Sets the working directory for the child process.",172,{"inputs":[{"name":"command"},{"name":"p"}],"output":{"name":"command"}}],[11,"stdin","","Configuration for the child process&#39;s stdin handle (file descriptor 0).",172,{"inputs":[{"name":"command"},{"name":"stdio"}],"output":{"name":"command"}}],[11,"stdout","","Configuration for the child process&#39;s stdout handle (file descriptor 1).",172,{"inputs":[{"name":"command"},{"name":"stdio"}],"output":{"name":"command"}}],[11,"stderr","","Configuration for the child process&#39;s stderr handle (file descriptor 2).",172,{"inputs":[{"name":"command"},{"name":"stdio"}],"output":{"name":"command"}}],[11,"spawn","","Executes the command as a child process, returning a handle to it.",172,{"inputs":[{"name":"command"}],"output":{"name":"result"}}],[11,"output","","Executes the command as a child process, waiting for it to finish and\ncollecting all of its output.",172,{"inputs":[{"name":"command"}],"output":{"name":"result"}}],[11,"status","","Executes a command as a child process, waiting for it to finish and\ncollecting its exit status.",172,{"inputs":[{"name":"command"}],"output":{"name":"result"}}],[11,"fmt","","Format the program and arguments of a Command for display. Any\nnon-utf8 data is lossily converted using the utf8 replacement\ncharacter.",172,{"inputs":[{"name":"command"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",189,{"inputs":[{"name":"output"}],"output":{"name":"output"}}],[11,"eq","","",189,{"inputs":[{"name":"output"},{"name":"output"}],"output":{"name":"bool"}}],[11,"ne","","",189,{"inputs":[{"name":"output"},{"name":"output"}],"output":{"name":"bool"}}],[11,"fmt","","",189,{"inputs":[{"name":"output"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"piped","","A new pipe should be arranged to connect the parent and child processes.",174,{"inputs":[],"output":{"name":"stdio"}}],[11,"inherit","","The child inherits from the corresponding parent descriptor.",174,{"inputs":[],"output":{"name":"stdio"}}],[11,"null","","This stream will be ignored. This is the equivalent of attaching the\nstream to `/dev/null`",174,{"inputs":[],"output":{"name":"stdio"}}],[11,"fmt","","",173,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",173,{"inputs":[{"name":"exitstatus"}],"output":{"name":"exitstatus"}}],[11,"eq","","",173,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"ne","","",173,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"success","","Was termination successful? Signal termination not considered a success,\nand success is defined as a zero exit status.",173,{"inputs":[{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"code","","Returns the exit code of the process, if any.",173,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"fmt","","",173,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"kill","","Forces the child to exit. This is equivalent to sending a\nSIGKILL on unix platforms.",190,{"inputs":[{"name":"child"}],"output":{"name":"result"}}],[11,"id","","Returns the OS-assigned process identifier associated with this child.",190,{"inputs":[{"name":"child"}],"output":{"name":"u32"}}],[11,"wait","","Waits for the child to exit completely, returning the status that it\nexited with. This function will continue to have the same return value\nafter it has been called at least once.",190,{"inputs":[{"name":"child"}],"output":{"name":"result"}}],[11,"wait_with_output","","Simultaneously waits for the child to exit and collect all remaining\noutput on the stdout/stderr handles, returning an `Output`\ninstance.",190,{"inputs":[{"name":"child"}],"output":{"name":"result"}}],[11,"clone","std::sync::mpsc::blocking","",191,{"inputs":[{"name":"signaltoken"}],"output":{"name":"signaltoken"}}],[11,"signal","","",191,{"inputs":[{"name":"signaltoken"}],"output":{"name":"bool"}}],[11,"cast_to_usize","","Convert to an unsafe usize value. Useful for storing in a pipe&#39;s state\nflag.",191,{"inputs":[{"name":"signaltoken"}],"output":{"name":"usize"}}],[11,"cast_from_usize","","Convert from an unsafe usize value. Useful for retrieving a pipe&#39;s state\nflag.",191,{"inputs":[{"name":"usize"}],"output":{"name":"signaltoken"}}],[11,"wait","","",192,null],[11,"new","std::sync::mpsc::oneshot","",193,{"inputs":[],"output":{"name":"packet"}}],[11,"send","","",193,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"sent","","",193,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"recv","","",193,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",193,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"upgrade","","",193,{"inputs":[{"name":"packet"},{"name":"receiver"}],"output":{"name":"upgraderesult"}}],[11,"drop_chan","","",193,null],[11,"drop_port","","",193,null],[11,"can_recv","","",193,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"start_selection","","",193,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"selectionresult"}}],[11,"abort_selection","","",193,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"drop","","",193,null],[11,"eq","std::sync::mpsc::select","",194,{"inputs":[{"name":"startresult"},{"name":"startresult"}],"output":{"name":"bool"}}],[11,"ne","","",194,{"inputs":[{"name":"startresult"},{"name":"startresult"}],"output":{"name":"bool"}}],[11,"new","","Creates a new selection structure. This set is initially empty.",195,{"inputs":[],"output":{"name":"select"}}],[11,"handle","","Creates a new handle into this receiver set for a new receiver. Note\nthat this does *not* add the receiver to the receiver set, for that you\nmust call the `add` method on the handle itself.",195,{"inputs":[{"name":"select"},{"name":"receiver"}],"output":{"name":"handle"}}],[11,"wait","","Waits for an event on this receiver set. The returned value is *not* an\nindex, but rather an id. This id can be queried against any active\n`Handle` structures (each one has an `id` method). The handle with\nthe matching `id` will have some sort of event available on it. The\nevent could either be that data is available or the corresponding\nchannel has been closed.",195,{"inputs":[{"name":"select"}],"output":{"name":"usize"}}],[11,"id","","Retrieves the id of this handle.",196,{"inputs":[{"name":"handle"}],"output":{"name":"usize"}}],[11,"recv","","Blocks to receive a value on the underlying receiver, returning `Some` on\nsuccess or `None` if the channel disconnects. This function has the same\nsemantics as `Receiver.recv`",196,{"inputs":[{"name":"handle"}],"output":{"name":"result"}}],[11,"add","","Adds this handle to the receiver set that the handle was created from. This\nmethod can be called multiple times, but it has no effect if `add` was\ncalled previously.",196,null],[11,"remove","","Removes this handle from the `Select` set. This method is unsafe because\nit has no guarantee that the `Handle` was not moved since `add` was\ncalled.",196,null],[11,"drop","","",195,null],[11,"drop","","",196,null],[11,"next","","",197,{"inputs":[{"name":"packets"}],"output":{"name":"option"}}],[11,"fmt","","",195,{"inputs":[{"name":"select"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",196,{"inputs":[{"name":"handle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","std::sync::mpsc::shared","",198,{"inputs":[],"output":{"name":"packet"}}],[11,"postinit_lock","","",198,{"inputs":[{"name":"packet"}],"output":{"name":"mutexguard"}}],[11,"inherit_blocker","","",198,null],[11,"send","","",198,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"recv","","",198,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",198,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"clone_chan","","",198,null],[11,"drop_chan","","",198,null],[11,"drop_port","","",198,null],[11,"can_recv","","",198,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"start_selection","","",198,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"startresult"}}],[11,"abort_selection","","",198,{"inputs":[{"name":"packet"},{"name":"bool"}],"output":{"name":"bool"}}],[11,"drop","","",198,null],[11,"new","std::sync::mpsc::stream","",199,{"inputs":[],"output":{"name":"packet"}}],[11,"send","","",199,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"upgrade","","",199,{"inputs":[{"name":"packet"},{"name":"receiver"}],"output":{"name":"upgraderesult"}}],[11,"recv","","",199,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",199,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"drop_chan","","",199,null],[11,"drop_port","","",199,null],[11,"can_recv","","",199,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"start_selection","","",199,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"selectionresult"}}],[11,"abort_selection","","",199,{"inputs":[{"name":"packet"},{"name":"bool"}],"output":{"name":"result"}}],[11,"drop","","",199,null],[11,"fmt","std::sync::mpsc::sync","",200,{"inputs":[{"name":"failure"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",201,{"inputs":[{"name":"usize"}],"output":{"name":"packet"}}],[11,"send","","",201,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"try_send","","",201,{"inputs":[{"name":"packet"},{"name":"t"}],"output":{"name":"result"}}],[11,"recv","","",201,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"try_recv","","",201,{"inputs":[{"name":"packet"}],"output":{"name":"result"}}],[11,"clone_chan","","",201,null],[11,"drop_chan","","",201,null],[11,"drop_port","","",201,null],[11,"can_recv","","",201,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"start_selection","","",201,{"inputs":[{"name":"packet"},{"name":"signaltoken"}],"output":{"name":"startresult"}}],[11,"abort_selection","","",201,{"inputs":[{"name":"packet"}],"output":{"name":"bool"}}],[11,"drop","","",201,null],[11,"new","std::sync::mpsc::mpsc_queue","Creates a new queue that is safe to share among multiple producers and\none consumer.",202,{"inputs":[],"output":{"name":"queue"}}],[11,"push","","Pushes a new value onto this queue.",202,null],[11,"pop","","Pops some data from this queue.",202,{"inputs":[{"name":"queue"}],"output":{"name":"popresult"}}],[11,"drop","","",202,null],[11,"new","std::sync::mpsc::spsc_queue","Creates a new queue.",203,{"inputs":[{"name":"usize"}],"output":{"name":"queue"}}],[11,"push","","Pushes a new value onto this queue. Note that to use this function\nsafely, it must be externally guaranteed that there is only one pusher.",203,null],[11,"pop","","Attempts to pop a value from this queue. Remember that to use this type\nsafely you must ensure that there is only one popper at a time.",203,{"inputs":[{"name":"queue"}],"output":{"name":"option"}}],[11,"peek","","Attempts to peek at the head of the queue, returning `None` if the queue\nhas no data currently",203,{"inputs":[{"name":"queue"}],"output":{"name":"option"}}],[11,"drop","","",203,null],[11,"clone","std::sync::mpsc","",204,{"inputs":[{"name":"senderror"}],"output":{"name":"senderror"}}],[11,"eq","","",204,{"inputs":[{"name":"senderror"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"ne","","",204,{"inputs":[{"name":"senderror"},{"name":"senderror"}],"output":{"name":"bool"}}],[11,"fmt","","",205,{"inputs":[{"name":"recverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",205,{"inputs":[{"name":"recverror"}],"output":{"name":"recverror"}}],[11,"eq","","",205,{"inputs":[{"name":"recverror"},{"name":"recverror"}],"output":{"name":"bool"}}],[11,"ne","","",205,{"inputs":[{"name":"recverror"},{"name":"recverror"}],"output":{"name":"bool"}}],[11,"fmt","","",206,{"inputs":[{"name":"tryrecverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",206,{"inputs":[{"name":"tryrecverror"}],"output":{"name":"tryrecverror"}}],[11,"eq","","",206,{"inputs":[{"name":"tryrecverror"},{"name":"tryrecverror"}],"output":{"name":"bool"}}],[11,"ne","","",206,{"inputs":[{"name":"tryrecverror"},{"name":"tryrecverror"}],"output":{"name":"bool"}}],[11,"clone","","",207,{"inputs":[{"name":"trysenderror"}],"output":{"name":"trysenderror"}}],[11,"eq","","",207,{"inputs":[{"name":"trysenderror"},{"name":"trysenderror"}],"output":{"name":"bool"}}],[11,"ne","","",207,{"inputs":[{"name":"trysenderror"},{"name":"trysenderror"}],"output":{"name":"bool"}}],[11,"send","","Attempts to send a value on this channel, returning it back if it could\nnot be sent.",208,{"inputs":[{"name":"sender"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",208,{"inputs":[{"name":"sender"}],"output":{"name":"sender"}}],[11,"drop","","",208,null],[11,"fmt","","",208,{"inputs":[{"name":"sender"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"send","","Sends a value on this synchronous channel.",209,{"inputs":[{"name":"syncsender"},{"name":"t"}],"output":{"name":"result"}}],[11,"try_send","","Attempts to send a value on this channel without blocking.",209,{"inputs":[{"name":"syncsender"},{"name":"t"}],"output":{"name":"result"}}],[11,"clone","","",209,{"inputs":[{"name":"syncsender"}],"output":{"name":"syncsender"}}],[11,"drop","","",209,null],[11,"fmt","","",209,{"inputs":[{"name":"syncsender"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"try_recv","","Attempts to return a pending value on this receiver without blocking",210,{"inputs":[{"name":"receiver"}],"output":{"name":"result"}}],[11,"recv","","Attempts to wait for a value on this receiver, returning an error if the\ncorresponding channel has hung up.",210,{"inputs":[{"name":"receiver"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator that will block waiting for messages, but never\n`panic!`. It will return `None` when the channel has hung up.",210,{"inputs":[{"name":"receiver"}],"output":{"name":"iter"}}],[11,"next","","",211,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",212,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"into_iter","","",210,{"inputs":[{"name":"receiver"}],"output":{"name":"intoiter"}}],[11,"drop","","",210,null],[11,"fmt","","",210,{"inputs":[{"name":"receiver"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",204,{"inputs":[{"name":"senderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",204,{"inputs":[{"name":"senderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",204,{"inputs":[{"name":"senderror"}],"output":{"name":"str"}}],[11,"cause","","",204,{"inputs":[{"name":"senderror"}],"output":{"name":"option"}}],[11,"fmt","","",207,{"inputs":[{"name":"trysenderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",207,{"inputs":[{"name":"trysenderror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",207,{"inputs":[{"name":"trysenderror"}],"output":{"name":"str"}}],[11,"cause","","",207,{"inputs":[{"name":"trysenderror"}],"output":{"name":"option"}}],[11,"fmt","","",205,{"inputs":[{"name":"recverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",205,{"inputs":[{"name":"recverror"}],"output":{"name":"str"}}],[11,"cause","","",205,{"inputs":[{"name":"recverror"}],"output":{"name":"option"}}],[11,"fmt","","",206,{"inputs":[{"name":"tryrecverror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",206,{"inputs":[{"name":"tryrecverror"}],"output":{"name":"str"}}],[11,"cause","","",206,{"inputs":[{"name":"tryrecverror"}],"output":{"name":"option"}}],[11,"new","std::sync::barrier","Creates a new barrier that can block a given number of threads.",213,{"inputs":[{"name":"usize"}],"output":{"name":"barrier"}}],[11,"wait","","Blocks the current thread until all threads has rendezvoused here.",213,{"inputs":[{"name":"barrier"}],"output":{"name":"barrierwaitresult"}}],[11,"is_leader","","Returns whether this thread from `wait` is the &quot;leader thread&quot;.",214,{"inputs":[{"name":"barrierwaitresult"}],"output":{"name":"bool"}}],[11,"clone","std::sync::condvar","",215,{"inputs":[{"name":"waittimeoutresult"}],"output":{"name":"waittimeoutresult"}}],[11,"eq","","",215,{"inputs":[{"name":"waittimeoutresult"},{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"ne","","",215,{"inputs":[{"name":"waittimeoutresult"},{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"fmt","","",215,{"inputs":[{"name":"waittimeoutresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"timed_out","","Returns whether the wait was known to have timed out.",215,{"inputs":[{"name":"waittimeoutresult"}],"output":{"name":"bool"}}],[11,"new","","Creates a new condition variable which is ready to be waited on and\nnotified.",216,{"inputs":[],"output":{"name":"condvar"}}],[11,"wait","","Blocks the current thread until this condition variable receives a\nnotification.",216,{"inputs":[{"name":"condvar"},{"name":"mutexguard"}],"output":{"name":"result"}}],[11,"wait_timeout_ms","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",216,{"inputs":[{"name":"condvar"},{"name":"mutexguard"},{"name":"u32"}],"output":{"name":"result"}}],[11,"wait_timeout","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",216,{"inputs":[{"name":"condvar"},{"name":"mutexguard"},{"name":"duration"}],"output":{"name":"result"}}],[11,"wait_timeout_with","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",216,{"inputs":[{"name":"condvar"},{"name":"mutexguard"},{"name":"duration"},{"name":"f"}],"output":{"name":"result"}}],[11,"notify_one","","Wakes up one blocked thread on this condvar.",216,null],[11,"notify_all","","Wakes up all blocked threads on this condvar.",216,null],[11,"drop","","",216,null],[11,"new","","Creates a new condition variable",217,{"inputs":[],"output":{"name":"staticcondvar"}}],[11,"wait","","Blocks the current thread until this condition variable receives a\nnotification.",217,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"}],"output":{"name":"result"}}],[11,"wait_timeout_ms","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",217,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"},{"name":"u32"}],"output":{"name":"result"}}],[11,"wait_timeout","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",217,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"},{"name":"duration"}],"output":{"name":"result"}}],[11,"wait_timeout_with","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",217,{"inputs":[{"name":"staticcondvar"},{"name":"mutexguard"},{"name":"duration"},{"name":"f"}],"output":{"name":"result"}}],[11,"notify_one","","Wakes up one blocked thread on this condvar.",217,null],[11,"notify_all","","Wakes up all blocked threads on this condvar.",217,null],[11,"destroy","","Deallocates all resources associated with this static condvar.",217,null],[11,"drop","std::sync::mutex","",28,null],[11,"fmt","","",28,{"inputs":[{"name":"mutex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new mutex in an unlocked state ready for use.",218,{"inputs":[],"output":{"name":"staticmutex"}}],[11,"lock","","Acquires this lock, see `Mutex::lock`",218,{"inputs":[{"name":"staticmutex"}],"output":{"name":"result"}}],[11,"try_lock","","Attempts to grab this lock, see `Mutex::try_lock`",218,{"inputs":[{"name":"staticmutex"}],"output":{"name":"result"}}],[11,"destroy","","Deallocates resources associated with this static mutex.",218,null],[11,"deref","","",219,{"inputs":[{"name":"mutexguard"}],"output":{"name":"t"}}],[11,"deref_mut","","",219,{"inputs":[{"name":"mutexguard"}],"output":{"name":"t"}}],[11,"drop","","",219,null],[11,"new","std::sync::once","Creates a new `Once` value.",220,{"inputs":[],"output":{"name":"once"}}],[11,"call_once","","Performs an initialization routine once and only once. The given closure\nwill be executed if this is the first time `call_once` has been called,\nand otherwise the routine will *not* be invoked.",220,null],[11,"new","std::sync::rwlock","Creates a new instance of an `RwLock&lt;T&gt;` which is unlocked.",221,{"inputs":[{"name":"t"}],"output":{"name":"rwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",221,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"try_read","","Attempts to acquire this rwlock with shared read access.",221,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"write","","Locks this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",221,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",221,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"is_poisoned","","Determines whether the lock is poisoned.",221,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"into_inner","","Consumes this `RwLock`, returning the underlying data.",221,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",221,{"inputs":[{"name":"rwlock"}],"output":{"name":"result"}}],[11,"drop","","",221,null],[11,"fmt","","",221,{"inputs":[{"name":"rwlock"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new rwlock.",222,{"inputs":[],"output":{"name":"staticrwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",222,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"try_read","","Attempts to acquire this lock with shared read access.",222,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"write","","Locks this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",222,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",222,{"inputs":[{"name":"staticrwlock"}],"output":{"name":"result"}}],[11,"destroy","","Deallocates all resources associated with this static lock.",222,null],[11,"map","","Transform this guard to hold a sub-borrow of the original data.",223,{"inputs":[{"name":"rwlockreadguard"},{"name":"f"}],"output":{"name":"rwlockreadguard"}}],[11,"map","","Transform this guard to hold a sub-borrow of the original data.",224,{"inputs":[{"name":"rwlockwriteguard"},{"name":"f"}],"output":{"name":"rwlockwriteguard"}}],[11,"deref","","",223,{"inputs":[{"name":"rwlockreadguard"}],"output":{"name":"t"}}],[11,"deref","","",224,{"inputs":[{"name":"rwlockwriteguard"}],"output":{"name":"t"}}],[11,"deref_mut","","",224,{"inputs":[{"name":"rwlockwriteguard"}],"output":{"name":"t"}}],[11,"drop","","",223,null],[11,"drop","","",224,null],[11,"new","std::sync::semaphore","Creates a new semaphore with the initial count specified.",225,{"inputs":[{"name":"isize"}],"output":{"name":"semaphore"}}],[11,"acquire","","Acquires a resource of this semaphore, blocking the current thread until\nit can do so.",225,null],[11,"release","","Release a resource from this semaphore.",225,null],[11,"access","","Acquires a resource of this semaphore, returning an RAII guard to\nrelease the semaphore when dropped.",225,{"inputs":[{"name":"semaphore"}],"output":{"name":"semaphoreguard"}}],[11,"drop","","",226,null],[11,"default","core::sync::atomic","",227,{"inputs":[],"output":{"name":"atomicbool"}}],[11,"default","","",228,{"inputs":[],"output":{"name":"atomicisize"}}],[11,"default","","",229,{"inputs":[],"output":{"name":"atomicusize"}}],[11,"default","","",230,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"clone","","",231,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new `AtomicBool`.",227,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",227,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",227,null],[11,"swap","","Stores a value into the bool, returning the old value.",227,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",227,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",227,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",227,null],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",227,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",227,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",227,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",227,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicIsize`.",228,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",228,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",228,null],[11,"swap","","Stores a value into the isize, returning the old value.",228,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the `isize` if the current value is the same as the `current` value.",228,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_exchange","","Stores a value into the `isize` if the current value is the same as the `current` value.",228,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_exchange_weak","","Stores a value into the `isize if the current value is the same as the `current` value.",228,null],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",228,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",228,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",228,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",228,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",228,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","Creates a new `AtomicUsize`.",229,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",229,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",229,null],[11,"swap","","Stores a value into the usize, returning the old value.",229,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the `usize` if the current value is the same as the `current` value.",229,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_exchange","","Stores a value into the `usize` if the current value is the same as the `current` value.",229,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_exchange_weak","","Stores a value into the `usize` if the current value is the same as the `current` value.",229,null],[11,"fetch_add","","Add to the current usize, returning the previous value.",229,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",229,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",229,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",229,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",229,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"new","","Creates a new `AtomicPtr`.",230,null],[11,"load","","Loads a value from the pointer.",230,null],[11,"store","","Stores a value into the pointer.",230,null],[11,"swap","","Stores a value into the pointer, returning the old value.",230,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",230,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",230,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",230,null],[11,"fmt","","",229,{"inputs":[{"name":"atomicusize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",228,{"inputs":[{"name":"atomicisize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",227,{"inputs":[{"name":"atomicbool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",230,{"inputs":[{"name":"atomicptr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","std::time::duration","",232,null],[11,"fmt","","",232,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",232,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",232,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",232,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",232,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",232,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",232,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"eq","","",232,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",232,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"clone","","",232,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"new","","Creates a new `Duration` from the specified number of seconds and\nadditional nanosecond precision.",232,{"inputs":[{"name":"u64"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the\nclosure.",232,{"inputs":[{"name":"f"}],"output":{"name":"duration"}}],[11,"from_secs","","Creates a new `Duration` from the specified number of seconds.",232,{"inputs":[{"name":"u64"}],"output":{"name":"duration"}}],[11,"from_millis","","Creates a new `Duration` from the specified number of milliseconds.",232,{"inputs":[{"name":"u64"}],"output":{"name":"duration"}}],[11,"as_secs","","Returns the number of whole seconds represented by this duration.",232,{"inputs":[{"name":"duration"}],"output":{"name":"u64"}}],[11,"subsec_nanos","","Returns the nanosecond precision represented by this duration.",232,{"inputs":[{"name":"duration"}],"output":{"name":"u32"}}],[11,"add","","",232,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub","","",232,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"mul","","",232,{"inputs":[{"name":"duration"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"div","","",232,{"inputs":[{"name":"duration"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"cmp","std::time","",233,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",233,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"option"}}],[11,"lt","","",233,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"le","","",233,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"gt","","",233,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"ge","","",233,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"eq","","",233,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"ne","","",233,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"clone","","",233,{"inputs":[{"name":"instant"}],"output":{"name":"instant"}}],[11,"cmp","","",234,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",234,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"option"}}],[11,"lt","","",234,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"le","","",234,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"gt","","",234,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"ge","","",234,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"eq","","",234,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"ne","","",234,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"clone","","",234,{"inputs":[{"name":"systemtime"}],"output":{"name":"systemtime"}}],[11,"fmt","","",235,{"inputs":[{"name":"systemtimeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",235,{"inputs":[{"name":"systemtimeerror"}],"output":{"name":"systemtimeerror"}}],[11,"now","","Returns an instant corresponding to &quot;now&quot;.",233,{"inputs":[],"output":{"name":"instant"}}],[11,"duration_since","","Returns the amount of time elapsed from another instant to this one.",233,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"duration"}}],[11,"duration_from_earlier","","Deprecated, renamed to `duration_since`",233,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"duration"}}],[11,"elapsed","","Returns the amount of time elapsed since this instant was created.",233,{"inputs":[{"name":"instant"}],"output":{"name":"duration"}}],[11,"add","","",233,{"inputs":[{"name":"instant"},{"name":"duration"}],"output":{"name":"instant"}}],[11,"sub","","",233,{"inputs":[{"name":"instant"},{"name":"duration"}],"output":{"name":"instant"}}],[11,"sub","","",233,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"duration"}}],[11,"fmt","","",233,{"inputs":[{"name":"instant"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"now","","Returns the system time corresponding to &quot;now&quot;.",234,{"inputs":[],"output":{"name":"systemtime"}}],[11,"duration_since","","Returns the amount of time elapsed from an earlier point in time.",234,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"result"}}],[11,"duration_from_earlier","","Deprecated, renamed to `duration_since`",234,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"result"}}],[11,"elapsed","","Returns the amount of time elapsed since this system time was created.",234,{"inputs":[{"name":"systemtime"}],"output":{"name":"result"}}],[11,"add","","",234,{"inputs":[{"name":"systemtime"},{"name":"duration"}],"output":{"name":"systemtime"}}],[11,"sub","","",234,{"inputs":[{"name":"systemtime"},{"name":"duration"}],"output":{"name":"systemtime"}}],[11,"fmt","","",234,{"inputs":[{"name":"systemtime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"duration","","Returns the positive duration which represents how far forward the\nsecond system time was from the first.",235,{"inputs":[{"name":"systemtimeerror"}],"output":{"name":"duration"}}],[11,"description","","",235,{"inputs":[{"name":"systemtimeerror"}],"output":{"name":"str"}}],[11,"fmt","","",235,{"inputs":[{"name":"systemtimeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","std::sys_common::condvar","Creates a new condition variable for use.",236,{"inputs":[],"output":{"name":"condvar"}}],[11,"notify_one","","Signals one waiter on this condition variable to wake up.",236,null],[11,"notify_all","","Awakens all current waiters on this condition variable.",236,null],[11,"wait","","Waits for a signal on the specified mutex.",236,null],[11,"wait_timeout","","Waits for a signal on the specified mutex with a timeout duration\nspecified by `dur` (a relative time into the future).",236,{"inputs":[{"name":"condvar"},{"name":"mutex"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"destroy","","Deallocates all resources associated with this condition variable.",236,null],[11,"clone","std::sys_common::dwarf::eh","",237,{"inputs":[{"name":"ehcontext"}],"output":{"name":"ehcontext"}}],[11,"new","std::sys_common::dwarf","",238,null],[11,"read","","",238,{"inputs":[{"name":"dwarfreader"}],"output":{"name":"t"}}],[11,"read_uleb128","","",238,{"inputs":[{"name":"dwarfreader"}],"output":{"name":"u64"}}],[11,"read_sleb128","","",238,{"inputs":[{"name":"dwarfreader"}],"output":{"name":"i64"}}],[11,"clone","std::sys_common::libunwind","",239,{"inputs":[{"name":"_unwind_action"}],"output":{"name":"_unwind_action"}}],[11,"clone","","",240,{"inputs":[{"name":"_unwind_reason_code"}],"output":{"name":"_unwind_reason_code"}}],[11,"new","std::sys_common::mutex","Creates a new mutex for use.",241,{"inputs":[],"output":{"name":"mutex"}}],[11,"lock","","Locks the mutex blocking the current thread until it is available.",241,null],[11,"try_lock","","Attempts to lock the mutex without blocking, returning whether it was\nsuccessfully acquired or not.",241,{"inputs":[{"name":"mutex"}],"output":{"name":"bool"}}],[11,"unlock","","Unlocks the mutex.",241,null],[11,"destroy","","Deallocates all resources associated with this mutex.",241,null],[11,"next","std::sys_common::net","",242,{"inputs":[{"name":"lookuphost"}],"output":{"name":"option"}}],[11,"drop","","",242,null],[11,"connect","","",243,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"socket","","",243,{"inputs":[{"name":"tcpstream"}],"output":{"name":"socket"}}],[11,"into_socket","","",243,{"inputs":[{"name":"tcpstream"}],"output":{"name":"socket"}}],[11,"set_read_timeout","","",243,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",243,{"inputs":[{"name":"tcpstream"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","",243,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"write_timeout","","",243,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"read","","",243,null],[11,"write","","",243,null],[11,"peer_addr","","",243,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"socket_addr","","",243,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"shutdown","","",243,{"inputs":[{"name":"tcpstream"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"duplicate","","",243,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"fmt","","",243,{"inputs":[{"name":"tcpstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","",244,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"socket","","",244,{"inputs":[{"name":"tcplistener"}],"output":{"name":"socket"}}],[11,"into_socket","","",244,{"inputs":[{"name":"tcplistener"}],"output":{"name":"socket"}}],[11,"socket_addr","","",244,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"accept","","",244,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"duplicate","","",244,{"inputs":[{"name":"tcplistener"}],"output":{"name":"result"}}],[11,"fmt","","",244,{"inputs":[{"name":"tcplistener"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bind","","",245,{"inputs":[{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"socket","","",245,{"inputs":[{"name":"udpsocket"}],"output":{"name":"socket"}}],[11,"into_socket","","",245,{"inputs":[{"name":"udpsocket"}],"output":{"name":"socket"}}],[11,"socket_addr","","",245,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"recv_from","","",245,null],[11,"send_to","","",245,null],[11,"duplicate","","",245,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"set_read_timeout","","",245,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"set_write_timeout","","",245,{"inputs":[{"name":"udpsocket"},{"name":"option"}],"output":{"name":"result"}}],[11,"read_timeout","","",245,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"write_timeout","","",245,{"inputs":[{"name":"udpsocket"}],"output":{"name":"result"}}],[11,"fmt","","",245,{"inputs":[{"name":"udpsocket"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","std::sys_common::poison","",246,{"inputs":[],"output":{"name":"flag"}}],[11,"borrow","","",246,{"inputs":[{"name":"flag"}],"output":{"name":"result"}}],[11,"done","","",246,null],[11,"get","","",246,{"inputs":[{"name":"flag"}],"output":{"name":"bool"}}],[11,"fmt","","",247,{"inputs":[{"name":"poisonerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",247,{"inputs":[{"name":"poisonerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",247,{"inputs":[{"name":"poisonerror"}],"output":{"name":"str"}}],[11,"new","","Creates a `PoisonError`.",247,{"inputs":[{"name":"t"}],"output":{"name":"poisonerror"}}],[11,"into_inner","","Consumes this error indicating that a lock is poisoned, returning the\nunderlying guard to allow access regardless.",247,{"inputs":[{"name":"poisonerror"}],"output":{"name":"t"}}],[11,"get_ref","","Reaches into this error indicating that a lock is poisoned, returning a\nreference to the underlying guard to allow access regardless.",247,{"inputs":[{"name":"poisonerror"}],"output":{"name":"t"}}],[11,"get_mut","","Reaches into this error indicating that a lock is poisoned, returning a\nmutable reference to the underlying guard to allow access regardless.",247,{"inputs":[{"name":"poisonerror"}],"output":{"name":"t"}}],[11,"from","","",248,{"inputs":[{"name":"poisonerror"}],"output":{"name":"trylockerror"}}],[11,"fmt","","",248,{"inputs":[{"name":"trylockerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",248,{"inputs":[{"name":"trylockerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",248,{"inputs":[{"name":"trylockerror"}],"output":{"name":"str"}}],[11,"cause","","",248,{"inputs":[{"name":"trylockerror"}],"output":{"name":"option"}}],[11,"new","std::sys_common::remutex","Creates a new reentrant mutex in an unlocked state.",249,{"inputs":[{"name":"t"}],"output":{"name":"reentrantmutex"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",249,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"result"}}],[11,"try_lock","","Attempts to acquire this lock.",249,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"result"}}],[11,"drop","","",249,null],[11,"fmt","","",249,{"inputs":[{"name":"reentrantmutex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",250,{"inputs":[{"name":"reentrantmutexguard"}],"output":{"name":"t"}}],[11,"drop","","",250,null],[11,"new","std::sys_common::rwlock","Creates a new reader-writer lock for use.",251,{"inputs":[],"output":{"name":"rwlock"}}],[11,"read","","Acquires shared access to the underlying lock, blocking the current\nthread to do so.",251,null],[11,"try_read","","Attempts to acquire shared access to this lock, returning whether it\nsucceeded or not.",251,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"write","","Acquires write access to the underlying lock, blocking the current thread\nto do so.",251,null],[11,"try_write","","Attempts to acquire exclusive access to this lock, returning whether it\nsucceeded or not.",251,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"read_unlock","","Unlocks previously acquired shared access to this lock.",251,null],[11,"write_unlock","","Unlocks previously acquired exclusive access to this lock.",251,null],[11,"destroy","","Destroys OS-related resources with this RWLock.",251,null],[11,"new","std::sys_common::thread_local","",252,{"inputs":[{"name":"option"}],"output":{"name":"statickey"}}],[11,"get","","Gets the value associated with this TLS key",252,null],[11,"set","","Sets this TLS key to a new value.",252,null],[11,"destroy","","Deallocates this OS TLS key.",252,null],[11,"new","","Creates a new managed OS TLS key.",253,{"inputs":[{"name":"option"}],"output":{"name":"key"}}],[11,"get","","See StaticKey::get",253,null],[11,"set","","See StaticKey::set",253,null],[11,"drop","","",253,null],[11,"clone","std::sys_common::wtf8","",254,{"inputs":[{"name":"codepoint"}],"output":{"name":"codepoint"}}],[11,"partial_cmp","","",254,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"option"}}],[11,"lt","","",254,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"le","","",254,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"gt","","",254,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"ge","","",254,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"cmp","","",254,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"ordering"}}],[11,"eq","","",254,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"ne","","",254,{"inputs":[{"name":"codepoint"},{"name":"codepoint"}],"output":{"name":"bool"}}],[11,"fmt","","",254,{"inputs":[{"name":"codepoint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_u32_unchecked","","Unsafely creates a new `CodePoint` without checking the value.",254,{"inputs":[{"name":"u32"}],"output":{"name":"codepoint"}}],[11,"from_u32","","Creates a new `CodePoint` if the value is a valid code point.",254,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_char","","Creates a new `CodePoint` from a `char`.",254,{"inputs":[{"name":"char"}],"output":{"name":"codepoint"}}],[11,"to_u32","","Returns the numeric value of the code point.",254,{"inputs":[{"name":"codepoint"}],"output":{"name":"u32"}}],[11,"to_char","","Optionally returns a Unicode scalar value for the code point.",254,{"inputs":[{"name":"codepoint"}],"output":{"name":"option"}}],[11,"to_char_lossy","","Returns a Unicode scalar value for the code point.",254,{"inputs":[{"name":"codepoint"}],"output":{"name":"char"}}],[11,"clone","","",255,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8buf"}}],[11,"partial_cmp","","",255,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"option"}}],[11,"lt","","",255,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"le","","",255,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"gt","","",255,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"ge","","",255,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"cmp","","",255,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"ordering"}}],[11,"eq","","",255,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"ne","","",255,{"inputs":[{"name":"wtf8buf"},{"name":"wtf8buf"}],"output":{"name":"bool"}}],[11,"from_str","","Creates a WTF-8 slice from a UTF-8 `&amp;str` slice.",256,{"inputs":[{"name":"str"}],"output":{"name":"wtf8"}}],[11,"len","","Returns the length, in WTF-8 bytes.",256,{"inputs":[{"name":"wtf8"}],"output":{"name":"usize"}}],[11,"is_empty","","",256,{"inputs":[{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"ascii_byte_at","","Returns the code point at `position` if it is in the ASCII range,\nor `b&#39;\\xFF&#39; otherwise.",256,{"inputs":[{"name":"wtf8"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"code_points","","Returns an iterator for the string’s code points.",256,{"inputs":[{"name":"wtf8"}],"output":{"name":"wtf8codepoints"}}],[11,"as_str","","Tries to convert the string to UTF-8 and return a `&amp;str` slice.",256,{"inputs":[{"name":"wtf8"}],"output":{"name":"option"}}],[11,"to_string_lossy","","Lossily converts the string to UTF-8.\nReturns a UTF-8 `&amp;str` slice if the contents are well-formed in UTF-8.",256,{"inputs":[{"name":"wtf8"}],"output":{"name":"cow"}}],[11,"encode_wide","","Converts the WTF-8 string to potentially ill-formed UTF-16\nand return an iterator of 16-bit code units.",256,{"inputs":[{"name":"wtf8"}],"output":{"name":"encodewide"}}],[11,"deref","","",255,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8"}}],[11,"fmt","","",255,{"inputs":[{"name":"wtf8buf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new, empty WTF-8 string.",255,{"inputs":[],"output":{"name":"wtf8buf"}}],[11,"with_capacity","","Creates a new, empty WTF-8 string with pre-allocated capacity for `n` bytes.",255,{"inputs":[{"name":"usize"}],"output":{"name":"wtf8buf"}}],[11,"from_string","","Creates a WTF-8 string from a UTF-8 `String`.",255,{"inputs":[{"name":"string"}],"output":{"name":"wtf8buf"}}],[11,"from_str","","Creates a WTF-8 string from a UTF-8 `&amp;str` slice.",255,{"inputs":[{"name":"str"}],"output":{"name":"wtf8buf"}}],[11,"clear","","",255,null],[11,"from_wide","","Creates a WTF-8 string from a potentially ill-formed UTF-16 slice of 16-bit code units.",255,null],[11,"as_slice","","",255,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"wtf8"}}],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted\nin the given `Wtf8Buf`.\nThe collection may reserve more space to avoid frequent reallocations.",255,null],[11,"reserve_exact","","",255,null],[11,"capacity","","Returns the number of bytes that this string buffer can hold without reallocating.",255,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"usize"}}],[11,"push_str","","Append a UTF-8 slice at the end of the string.",255,null],[11,"push_wtf8","","Append a WTF-8 slice at the end of the string.",255,null],[11,"push_char","","Append a Unicode scalar value at the end of the string.",255,null],[11,"push","","Append a code point at the end of the string.",255,null],[11,"truncate","","Shortens a string to the specified length.",255,null],[11,"into_string","","Consumes the WTF-8 string and tries to convert it to UTF-8.",255,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"result"}}],[11,"into_string_lossy","","Consumes the WTF-8 string and converts it lossily to UTF-8.",255,{"inputs":[{"name":"wtf8buf"}],"output":{"name":"string"}}],[11,"from_iter","","",255,{"inputs":[{"name":"t"}],"output":{"name":"wtf8buf"}}],[11,"extend","","",255,null],[11,"partial_cmp","","",256,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"option"}}],[11,"lt","","",256,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"le","","",256,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"gt","","",256,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"ge","","",256,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"eq","","",256,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"ne","","",256,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"cmp","","",256,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"ordering"}}],[11,"fmt","","",256,{"inputs":[{"name":"wtf8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"index","","",256,{"inputs":[{"name":"wtf8"},{"name":"range"}],"output":{"name":"wtf8"}}],[11,"index","","",256,{"inputs":[{"name":"wtf8"},{"name":"rangefrom"}],"output":{"name":"wtf8"}}],[11,"index","","",256,{"inputs":[{"name":"wtf8"},{"name":"rangeto"}],"output":{"name":"wtf8"}}],[11,"index","","",256,{"inputs":[{"name":"wtf8"},{"name":"rangefull"}],"output":{"name":"wtf8"}}],[11,"clone","","",257,{"inputs":[{"name":"wtf8codepoints"}],"output":{"name":"wtf8codepoints"}}],[11,"next","","",257,{"inputs":[{"name":"wtf8codepoints"}],"output":{"name":"option"}}],[11,"size_hint","","",257,null],[11,"clone","","",258,{"inputs":[{"name":"encodewide"}],"output":{"name":"encodewide"}}],[11,"next","","",258,{"inputs":[{"name":"encodewide"}],"output":{"name":"option"}}],[11,"size_hint","","",258,null],[11,"hash","","",254,null],[11,"hash","","",255,null],[11,"hash","","",256,null],[11,"is_ascii","","",256,{"inputs":[{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"to_ascii_uppercase","","",256,{"inputs":[{"name":"wtf8"}],"output":{"name":"wtf8buf"}}],[11,"to_ascii_lowercase","","",256,{"inputs":[{"name":"wtf8"}],"output":{"name":"wtf8buf"}}],[11,"eq_ignore_ascii_case","","",256,{"inputs":[{"name":"wtf8"},{"name":"wtf8"}],"output":{"name":"bool"}}],[11,"make_ascii_uppercase","","",256,null],[11,"make_ascii_lowercase","","",256,null],[11,"new","std::sys::weak","",259,{"inputs":[{"name":"str"}],"output":{"name":"weak"}}],[11,"get","","",259,{"inputs":[{"name":"weak"}],"output":{"name":"option"}}],[11,"new","std::sys::condvar","",260,{"inputs":[],"output":{"name":"condvar"}}],[11,"notify_one","","",260,null],[11,"notify_all","","",260,null],[11,"wait","","",260,null],[11,"wait_timeout","","",260,{"inputs":[{"name":"condvar"},{"name":"mutex"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"destroy","","",260,null],[11,"new","std::sys::fd","",261,{"inputs":[{"name":"i32"}],"output":{"name":"filedesc"}}],[11,"raw","","",261,{"inputs":[{"name":"filedesc"}],"output":{"name":"i32"}}],[11,"into_raw","","Extracts the actual filedescriptor without closing it.",261,{"inputs":[{"name":"filedesc"}],"output":{"name":"i32"}}],[11,"read","","",261,null],[11,"write","","",261,null],[11,"set_cloexec","","",261,null],[11,"duplicate","","",261,{"inputs":[{"name":"filedesc"}],"output":{"name":"result"}}],[11,"drop","","",261,null],[11,"clone","std::sys::fs","",262,{"inputs":[{"name":"fileattr"}],"output":{"name":"fileattr"}}],[11,"clone","","",263,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"fmt","","",264,{"inputs":[{"name":"filepermissions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",264,{"inputs":[{"name":"filepermissions"},{"name":"filepermissions"}],"output":{"name":"bool"}}],[11,"ne","","",264,{"inputs":[{"name":"filepermissions"},{"name":"filepermissions"}],"output":{"name":"bool"}}],[11,"clone","","",264,{"inputs":[{"name":"filepermissions"}],"output":{"name":"filepermissions"}}],[11,"hash","","",265,null],[11,"eq","","",265,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"ne","","",265,{"inputs":[{"name":"filetype"},{"name":"filetype"}],"output":{"name":"bool"}}],[11,"clone","","",265,{"inputs":[{"name":"filetype"}],"output":{"name":"filetype"}}],[11,"size","","",262,{"inputs":[{"name":"fileattr"}],"output":{"name":"u64"}}],[11,"perm","","",262,{"inputs":[{"name":"fileattr"}],"output":{"name":"filepermissions"}}],[11,"file_type","","",262,{"inputs":[{"name":"fileattr"}],"output":{"name":"filetype"}}],[11,"modified","","",262,{"inputs":[{"name":"fileattr"}],"output":{"name":"result"}}],[11,"accessed","","",262,{"inputs":[{"name":"fileattr"}],"output":{"name":"result"}}],[11,"created","","",262,{"inputs":[{"name":"fileattr"}],"output":{"name":"result"}}],[11,"readonly","","",264,{"inputs":[{"name":"filepermissions"}],"output":{"name":"bool"}}],[11,"set_readonly","","",264,null],[11,"mode","","",264,{"inputs":[{"name":"filepermissions"}],"output":{"name":"u32"}}],[11,"is_dir","","",265,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_file","","",265,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is_symlink","","",265,{"inputs":[{"name":"filetype"}],"output":{"name":"bool"}}],[11,"is","","",265,{"inputs":[{"name":"filetype"},{"name":"u16"}],"output":{"name":"bool"}}],[11,"next","","",266,{"inputs":[{"name":"readdir"}],"output":{"name":"option"}}],[11,"drop","","",267,null],[11,"path","","",268,{"inputs":[{"name":"direntry"}],"output":{"name":"pathbuf"}}],[11,"file_name","","",268,{"inputs":[{"name":"direntry"}],"output":{"name":"osstring"}}],[11,"metadata","","",268,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"file_type","","",268,{"inputs":[{"name":"direntry"}],"output":{"name":"result"}}],[11,"ino","","",268,{"inputs":[{"name":"direntry"}],"output":{"name":"u64"}}],[11,"new","","",263,{"inputs":[],"output":{"name":"openoptions"}}],[11,"read","","",263,null],[11,"write","","",263,null],[11,"append","","",263,null],[11,"truncate","","",263,null],[11,"create","","",263,null],[11,"create_new","","",263,null],[11,"custom_flags","","",263,null],[11,"mode","","",263,null],[11,"open","","",269,{"inputs":[{"name":"path"},{"name":"openoptions"}],"output":{"name":"result"}}],[11,"open_c","","",269,{"inputs":[{"name":"cstr"},{"name":"openoptions"}],"output":{"name":"result"}}],[11,"file_attr","","",269,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"fsync","","",269,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"datasync","","",269,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"truncate","","",269,{"inputs":[{"name":"file"},{"name":"u64"}],"output":{"name":"result"}}],[11,"read","","",269,null],[11,"write","","",269,null],[11,"flush","","",269,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"seek","","",269,{"inputs":[{"name":"file"},{"name":"seekfrom"}],"output":{"name":"result"}}],[11,"duplicate","","",269,{"inputs":[{"name":"file"}],"output":{"name":"result"}}],[11,"fd","","",269,{"inputs":[{"name":"file"}],"output":{"name":"filedesc"}}],[11,"into_fd","","",269,{"inputs":[{"name":"file"}],"output":{"name":"filedesc"}}],[11,"new","","",270,{"inputs":[],"output":{"name":"dirbuilder"}}],[11,"mkdir","","",270,{"inputs":[{"name":"dirbuilder"},{"name":"path"}],"output":{"name":"result"}}],[11,"set_mode","","",270,null],[11,"fmt","","",269,{"inputs":[{"name":"file"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","std::sys::mutex","",271,{"inputs":[],"output":{"name":"mutex"}}],[11,"lock","","",271,null],[11,"unlock","","",271,null],[11,"try_lock","","",271,{"inputs":[{"name":"mutex"}],"output":{"name":"bool"}}],[11,"destroy","","",271,null],[11,"uninitialized","","",272,{"inputs":[],"output":{"name":"reentrantmutex"}}],[11,"init","","",272,null],[11,"lock","","",272,null],[11,"try_lock","","",272,{"inputs":[{"name":"reentrantmutex"}],"output":{"name":"bool"}}],[11,"unlock","","",272,null],[11,"destroy","","",272,null],[11,"new","std::sys::net","",273,{"inputs":[{"name":"socketaddr"},{"name":"i32"}],"output":{"name":"result"}}],[11,"accept","","",273,null],[11,"duplicate","","",273,{"inputs":[{"name":"socket"}],"output":{"name":"result"}}],[11,"read","","",273,null],[11,"set_timeout","","",273,{"inputs":[{"name":"socket"},{"name":"option"},{"name":"i32"}],"output":{"name":"result"}}],[11,"timeout","","",273,{"inputs":[{"name":"socket"},{"name":"i32"}],"output":{"name":"result"}}],[11,"shutdown","","",273,{"inputs":[{"name":"socket"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"clone","libc::unix","",274,{"inputs":[{"name":"utimbuf"}],"output":{"name":"utimbuf"}}],[11,"clone","","",275,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"clone","","",276,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"clone","","",277,{"inputs":[{"name":"rlimit"}],"output":{"name":"rlimit"}}],[11,"clone","","",278,{"inputs":[{"name":"rusage"}],"output":{"name":"rusage"}}],[11,"clone","","",279,{"inputs":[{"name":"in_addr"}],"output":{"name":"in_addr"}}],[11,"clone","","",280,{"inputs":[{"name":"in6_addr"}],"output":{"name":"in6_addr"}}],[11,"clone","","",281,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",282,{"inputs":[{"name":"ipv6_mreq"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",283,{"inputs":[{"name":"hostent"}],"output":{"name":"hostent"}}],[11,"clone","","",284,{"inputs":[{"name":"iovec"}],"output":{"name":"iovec"}}],[11,"clone","","",285,{"inputs":[{"name":"pollfd"}],"output":{"name":"pollfd"}}],[11,"clone","libc::unix::bsd","",286,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"clone","","",287,{"inputs":[{"name":"sockaddr_in6"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",288,{"inputs":[{"name":"sockaddr_un"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",289,{"inputs":[{"name":"passwd"}],"output":{"name":"passwd"}}],[11,"clone","","",290,{"inputs":[{"name":"ifaddrs"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",291,{"inputs":[{"name":"fd_set"}],"output":{"name":"fd_set"}}],[11,"clone","","",292,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"clone","","",293,{"inputs":[{"name":"utsname"}],"output":{"name":"utsname"}}],[11,"clone","","",294,{"inputs":[{"name":"msghdr"}],"output":{"name":"msghdr"}}],[11,"clone","","",295,{"inputs":[{"name":"fsid_t"}],"output":{"name":"fsid_t"}}],[11,"clone","libc::unix::bsd::apple","",296,{"inputs":[{"name":"glob_t"}],"output":{"name":"glob_t"}}],[11,"clone","","",297,{"inputs":[{"name":"sockaddr_storage"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",298,{"inputs":[{"name":"addrinfo"}],"output":{"name":"addrinfo"}}],[11,"clone","","",299,{"inputs":[{"name":"mach_timebase_info"}],"output":{"name":"mach_timebase_info"}}],[11,"clone","","",300,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"clone","","",301,{"inputs":[{"name":"dirent"}],"output":{"name":"dirent"}}],[11,"clone","","",302,{"inputs":[{"name":"pthread_mutex_t"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",303,{"inputs":[{"name":"pthread_mutexattr_t"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",304,{"inputs":[{"name":"pthread_cond_t"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",305,{"inputs":[{"name":"pthread_rwlock_t"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",306,{"inputs":[{"name":"siginfo_t"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",307,{"inputs":[{"name":"sigaction"}],"output":{"name":"sigaction"}}],[11,"clone","","",308,{"inputs":[{"name":"stack_t"}],"output":{"name":"stack_t"}}],[11,"clone","","",309,{"inputs":[{"name":"fstore_t"}],"output":{"name":"fstore_t"}}],[11,"clone","","",310,{"inputs":[{"name":"radvisory"}],"output":{"name":"radvisory"}}],[11,"clone","","",311,{"inputs":[{"name":"statvfs"}],"output":{"name":"statvfs"}}],[11,"clone","","",312,{"inputs":[{"name":"dl_info"}],"output":{"name":"dl_info"}}],[11,"clone","","",313,{"inputs":[{"name":"sockaddr_in"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",314,{"inputs":[{"name":"statfs"}],"output":{"name":"statfs"}}],[11,"clone","","",315,{"inputs":[{"name":"kevent"}],"output":{"name":"kevent"}}],[11,"clone","","",316,{"inputs":[{"name":"kevent64_s"}],"output":{"name":"kevent64_s"}}],[11,"clone","","",317,{"inputs":[{"name":"dqblk"}],"output":{"name":"dqblk"}}],[11,"clone","","",318,{"inputs":[{"name":"termios"}],"output":{"name":"termios"}}],[11,"clone","","",319,{"inputs":[{"name":"flock"}],"output":{"name":"flock"}}],[11,"clone","","",320,{"inputs":[{"name":"sf_hdtr"}],"output":{"name":"sf_hdtr"}}],[11,"clone","libc::unix::bsd::apple::b64","",321,{"inputs":[{"name":"pthread_attr_t"}],"output":{"name":"pthread_attr_t"}}],[11,"next","std::sys::os","",322,{"inputs":[{"name":"splitpaths"}],"output":{"name":"option"}}],[11,"size_hint","","",322,null],[11,"fmt","","",323,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",323,{"inputs":[{"name":"joinpathserror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",323,{"inputs":[{"name":"joinpathserror"}],"output":{"name":"str"}}],[11,"next","","",324,{"inputs":[{"name":"args"}],"output":{"name":"option"}}],[11,"size_hint","","",324,null],[11,"len","","",324,{"inputs":[{"name":"args"}],"output":{"name":"usize"}}],[11,"next","","",325,{"inputs":[{"name":"env"}],"output":{"name":"option"}}],[11,"size_hint","","",325,null],[11,"hash","std::sys::os_str","",326,null],[11,"clone","","",326,{"inputs":[{"name":"buf"}],"output":{"name":"buf"}}],[11,"fmt","","",327,{"inputs":[{"name":"slice"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",326,{"inputs":[{"name":"buf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_string","","",326,{"inputs":[{"name":"string"}],"output":{"name":"buf"}}],[11,"with_capacity","","",326,{"inputs":[{"name":"usize"}],"output":{"name":"buf"}}],[11,"clear","","",326,null],[11,"capacity","","",326,{"inputs":[{"name":"buf"}],"output":{"name":"usize"}}],[11,"reserve","","",326,null],[11,"reserve_exact","","",326,null],[11,"as_slice","","",326,{"inputs":[{"name":"buf"}],"output":{"name":"slice"}}],[11,"into_string","","",326,{"inputs":[{"name":"buf"}],"output":{"name":"result"}}],[11,"push_slice","","",326,null],[11,"from_str","","",327,{"inputs":[{"name":"str"}],"output":{"name":"slice"}}],[11,"to_str","","",327,{"inputs":[{"name":"slice"}],"output":{"name":"option"}}],[11,"to_string_lossy","","",327,{"inputs":[{"name":"slice"}],"output":{"name":"cow"}}],[11,"to_owned","","",327,{"inputs":[{"name":"slice"}],"output":{"name":"buf"}}],[11,"from_fd","std::sys::pipe","",328,{"inputs":[{"name":"i32"}],"output":{"name":"anonpipe"}}],[11,"read","","",328,null],[11,"write","","",328,null],[11,"fd","","",328,{"inputs":[{"name":"anonpipe"}],"output":{"name":"filedesc"}}],[11,"into_fd","","",328,{"inputs":[{"name":"anonpipe"}],"output":{"name":"filedesc"}}],[11,"new","std::sys::process","",329,{"inputs":[{"name":"osstr"}],"output":{"name":"command"}}],[11,"arg","","",329,null],[11,"env","","",329,null],[11,"env_remove","","",329,null],[11,"env_clear","","",329,null],[11,"cwd","","",329,null],[11,"uid","","",329,null],[11,"gid","","",329,null],[11,"session_leader","","",329,null],[11,"before_exec","","",329,null],[11,"stdin","","",329,null],[11,"stdout","","",329,null],[11,"stderr","","",329,null],[11,"spawn","","",329,{"inputs":[{"name":"command"},{"name":"stdio"}],"output":{"name":"result"}}],[11,"exec","","",329,{"inputs":[{"name":"command"},{"name":"stdio"}],"output":{"name":"error"}}],[11,"fmt","","",329,{"inputs":[{"name":"command"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",330,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",330,{"inputs":[{"name":"exitstatus"}],"output":{"name":"exitstatus"}}],[11,"eq","","",330,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"ne","","",330,{"inputs":[{"name":"exitstatus"},{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"success","","",330,{"inputs":[{"name":"exitstatus"}],"output":{"name":"bool"}}],[11,"code","","",330,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"signal","","",330,{"inputs":[{"name":"exitstatus"}],"output":{"name":"option"}}],[11,"fmt","","",330,{"inputs":[{"name":"exitstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"id","","",331,{"inputs":[{"name":"process"}],"output":{"name":"u32"}}],[11,"kill","","",331,{"inputs":[{"name":"process"}],"output":{"name":"result"}}],[11,"wait","","",331,{"inputs":[{"name":"process"}],"output":{"name":"result"}}],[11,"new","std::sys::rand::imp","Create a new `OsRng`.",332,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",332,{"inputs":[{"name":"osrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",332,{"inputs":[{"name":"osrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",332,null],[11,"new","std::sys::rwlock","",333,{"inputs":[],"output":{"name":"rwlock"}}],[11,"read","","",333,null],[11,"try_read","","",333,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"write","","",333,null],[11,"try_write","","",333,{"inputs":[{"name":"rwlock"}],"output":{"name":"bool"}}],[11,"read_unlock","","",333,null],[11,"write_unlock","","",333,null],[11,"destroy","","",333,null],[11,"new","std::sys::stack_overflow","",334,{"inputs":[],"output":{"name":"handler"}}],[11,"drop","","",334,null],[11,"new","std::sys::thread","",335,{"inputs":[{"name":"usize"},{"name":"box"}],"output":{"name":"result"}}],[11,"yield_now","","",335,null],[11,"set_name","","",335,null],[11,"sleep","","",335,null],[11,"join","","",335,null],[11,"id","","",335,{"inputs":[{"name":"thread"}],"output":{"name":"usize"}}],[11,"into_id","","",335,{"inputs":[{"name":"thread"}],"output":{"name":"usize"}}],[11,"drop","","",335,null],[11,"fmt","std::sys::time::inner","",336,{"inputs":[{"name":"instant"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",336,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",336,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"option"}}],[11,"lt","","",336,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"le","","",336,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"gt","","",336,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"ge","","",336,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"eq","","",336,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"ne","","",336,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"bool"}}],[11,"clone","","",336,{"inputs":[{"name":"instant"}],"output":{"name":"instant"}}],[11,"clone","","",337,{"inputs":[{"name":"systemtime"}],"output":{"name":"systemtime"}}],[11,"now","","",336,{"inputs":[],"output":{"name":"instant"}}],[11,"sub_instant","","",336,{"inputs":[{"name":"instant"},{"name":"instant"}],"output":{"name":"duration"}}],[11,"add_duration","","",336,{"inputs":[{"name":"instant"},{"name":"duration"}],"output":{"name":"instant"}}],[11,"sub_duration","","",336,{"inputs":[{"name":"instant"},{"name":"duration"}],"output":{"name":"instant"}}],[11,"now","","",337,{"inputs":[],"output":{"name":"systemtime"}}],[11,"sub_time","","",337,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"result"}}],[11,"add_duration","","",337,{"inputs":[{"name":"systemtime"},{"name":"duration"}],"output":{"name":"systemtime"}}],[11,"sub_duration","","",337,{"inputs":[{"name":"systemtime"},{"name":"duration"}],"output":{"name":"systemtime"}}],[11,"from","","",337,{"inputs":[{"name":"timeval"}],"output":{"name":"systemtime"}}],[11,"eq","","",337,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",337,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"option"}}],[11,"cmp","","",337,{"inputs":[{"name":"systemtime"},{"name":"systemtime"}],"output":{"name":"ordering"}}],[11,"fmt","","",337,{"inputs":[{"name":"systemtime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","std::sys::stdio","",338,{"inputs":[],"output":{"name":"result"}}],[11,"read","","",338,null],[11,"new","","",339,{"inputs":[],"output":{"name":"result"}}],[11,"write","","",339,null],[11,"new","","",340,{"inputs":[],"output":{"name":"result"}}],[11,"write","","",340,null],[11,"write","","",340,null],[11,"flush","","",340,{"inputs":[{"name":"stderr"}],"output":{"name":"result"}}],[11,"clone","std::panicking","",341,{"inputs":[{"name":"handler"}],"output":{"name":"handler"}}],[11,"payload","","Returns the payload associated with the panic.",342,{"inputs":[{"name":"panicinfo"}],"output":{"name":"any"}}],[11,"location","","Returns information about the location from which the panic originated,\nif available.",342,{"inputs":[{"name":"panicinfo"}],"output":{"name":"option"}}],[11,"file","","Returns the name of the source file from which the panic originated.",343,{"inputs":[{"name":"location"}],"output":{"name":"str"}}],[11,"line","","Returns the line number from which the panic originated.",343,{"inputs":[{"name":"location"}],"output":{"name":"u32"}}],[11,"new","std::rand::reader","Create a new `ReaderRng` from a `Read`.",344,{"inputs":[{"name":"r"}],"output":{"name":"readerrng"}}],[11,"next_u32","","",344,{"inputs":[{"name":"readerrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",344,{"inputs":[{"name":"readerrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",344,null],[11,"clone","std::rand","",345,{"inputs":[{"name":"stdrng"}],"output":{"name":"stdrng"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",345,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",345,{"inputs":[{"name":"stdrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",345,{"inputs":[{"name":"stdrng"}],"output":{"name":"u64"}}],[11,"reseed","","",345,null],[11,"from_seed","","",345,null],[11,"reseed","","",346,null],[11,"clone","","",347,{"inputs":[{"name":"threadrng"}],"output":{"name":"threadrng"}}],[11,"next_u32","","",347,{"inputs":[{"name":"threadrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",347,{"inputs":[{"name":"threadrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",347,null],[11,"new","","Create a new `OsRng`.",348,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",348,{"inputs":[{"name":"osrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",348,{"inputs":[{"name":"osrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",348,null],[11,"fmt","openssl","",349,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",349,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns true if the boxed type is the same as `T`",349,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",349,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",349,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",349,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",349,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",349,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"hash","core::any","",350,null],[11,"fmt","","",350,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",350,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",350,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"clone","","",350,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",350,{"inputs":[],"output":{"name":"typeid"}}],[11,"new","core::cell","Creates a new `Cell` containing the given value.",351,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",351,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",351,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",351,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",351,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"default","","",351,{"inputs":[],"output":{"name":"cell"}}],[11,"eq","","",351,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"fmt","","",352,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",352,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"ne","","",352,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"clone","","",352,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"new","","Creates a new `RefCell` containing `value`.",353,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",353,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",353,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",353,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",353,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",353,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",353,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"default","","",353,{"inputs":[],"output":{"name":"refcell"}}],[11,"eq","","",353,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"drop","","",354,null],[11,"clone","","",354,{"inputs":[{"name":"borrowref"}],"output":{"name":"borrowref"}}],[11,"deref","","",355,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",355,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",355,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",355,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",356,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",356,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"drop","","",357,null],[11,"deref","","",356,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",356,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",358,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",358,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",358,null],[11,"fmt","core::cmp","",359,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",359,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"ne","","",359,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"clone","","",359,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",359,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","","",359,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",359,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",360,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",360,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",360,null],[11,"finish","","",360,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"clone","","",360,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"default","","",360,{"inputs":[],"output":{"name":"siphasher"}}],[11,"build_hasher","core::hash","",361,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"h"}}],[11,"clone","","",361,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"buildhasherdefault"}}],[11,"default","","",361,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"clone","core::iter","",362,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"next","","",362,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",362,null],[11,"next_back","","",362,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"clone","","",363,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"next","","",363,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",363,null],[11,"next_back","","",363,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"clone","","",364,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"next","","",364,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",364,null],[11,"clone","","",365,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"clone","","",366,{"inputs":[{"name":"chainstate"}],"output":{"name":"chainstate"}}],[11,"next","","",365,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",365,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",365,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",365,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",365,null],[11,"next_back","","",365,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"clone","","",367,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"next","","",367,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",367,null],[11,"next_back","","",367,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"clone","","",368,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"next","","",368,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",368,null],[11,"next_back","","",368,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"clone","","",369,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"next","","",369,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",369,null],[11,"next_back","","",369,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"clone","","",370,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"next","","",370,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",370,null],[11,"next_back","","",370,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"clone","","",371,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"next","","# Overflow Behavior",371,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",371,null],[11,"nth","","",371,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",371,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"next_back","","",371,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"clone","","",372,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"next","","",372,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",372,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",372,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",372,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",372,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",372,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks if the iterator has finished iterating.",372,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"clone","","",373,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"next","","",373,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",373,null],[11,"clone","","",374,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"next","","",374,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",374,null],[11,"clone","","",375,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",375,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",375,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",375,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",375,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",375,null],[11,"clone","","",376,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"next","","",376,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",376,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",376,null],[11,"clone","","",377,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[11,"next","","",377,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",377,null],[11,"clone","","",378,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"next","","",378,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",378,null],[11,"next_back","","",378,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"clone","","",379,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"next","","",379,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",379,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",379,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",379,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",379,null],[11,"next_back","","",379,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"clone","","",380,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"next","","",380,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",380,null],[11,"next_back","","",380,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"clone","","",381,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",382,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",383,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","core::iter","",381,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",381,null],[11,"clone","","",384,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",384,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",384,null],[11,"next_back","","",384,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"next","","",381,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",381,null],[11,"next","core::ops","",383,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",383,null],[11,"next_back","","",383,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",382,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"clone","core::iter","",385,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"next","","",385,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",385,null],[11,"next_back","","",385,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"next","","",386,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",386,null],[11,"next_back","","",386,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"len","","",386,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"clone","","",386,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"default","","",386,{"inputs":[],"output":{"name":"empty"}}],[11,"clone","","",387,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"next","","",387,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",387,null],[11,"next_back","","",387,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"len","","",387,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"hash","core::marker","",388,null],[11,"eq","","",388,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",388,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",388,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",388,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"default","","",388,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",389,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"ne","","",389,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"clone","","",389,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"fmt","","",389,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",383,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",383,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",383,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"fmt","","",383,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",382,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",382,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"clone","","",382,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"fmt","","",382,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",390,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",390,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"clone","","",390,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"fmt","","",390,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","core::ptr","Creates a new `Unique`.",391,null],[11,"get","","Dereferences the content.",391,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",391,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"deref","","",391,null],[11,"fmt","","",391,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Shared`.",392,null],[11,"clone","","",392,{"inputs":[{"name":"shared"}],"output":{"name":"shared"}}],[11,"deref","","",392,null],[11,"fmt","","",392,{"inputs":[{"name":"shared"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","core::raw","",393,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"clone","","",394,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[11,"hash","core::result","",395,null],[11,"fmt","","",395,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",395,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",395,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",395,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",395,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",395,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",395,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","","",395,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",395,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"clone","","",395,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"is_ok","","Returns true if the result is `Ok`",395,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",395,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",395,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",395,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",395,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",395,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",395,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",395,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",395,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",395,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",395,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",395,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",395,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",395,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",395,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",395,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",395,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",395,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",395,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",395,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"next","","",396,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",396,null],[11,"next_back","","",396,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",396,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",397,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",397,null],[11,"next_back","","",397,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",398,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",398,null],[11,"next_back","","",398,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",395,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"hash","core::option","",399,null],[11,"fmt","","",399,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",399,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",399,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",399,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",399,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",399,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",399,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",399,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",399,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",399,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"is_some","","Returns `true` if the option is a `Some` value",399,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",399,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",399,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",399,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",399,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",399,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",399,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",399,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",399,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",399,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",399,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",399,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",399,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",399,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",399,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",399,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",399,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",399,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",399,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",399,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",399,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",399,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"default","","",399,{"inputs":[],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",399,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"clone","","",400,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[11,"next","","",400,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"size_hint","","",400,null],[11,"next_back","","",400,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"next","","",401,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",401,null],[11,"next_back","","",401,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",401,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",402,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",402,null],[11,"next_back","","",402,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",403,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",403,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",403,null],[11,"next_back","","",403,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",399,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"clone","alloc::boxed","",404,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"exchangeheapsingleton"}}],[11,"pointer","","",405,null],[11,"make_place","","",405,{"inputs":[],"output":{"name":"intermediatebox"}}],[11,"finalize","","",405,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"finalize","","",29,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",404,{"inputs":[{"name":"exchangeheapsingleton"}],"output":{"name":"intermediatebox"}}],[11,"drop","","",405,null],[11,"new","","Allocates memory on the heap and then places `x` into it.",29,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",29,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",29,null],[11,"default","","",29,{"inputs":[],"output":{"name":"box"}}],[11,"default","","",29,{"inputs":[],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box&#39;s contents.",29,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone_from","","Copies `source`&#39;s contents into `self` without creating a new allocation.",29,null],[11,"clone","","",29,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"eq","","",29,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",29,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"option"}}],[11,"lt","","",29,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"le","","",29,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"ge","","",29,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"gt","","",29,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"bool"}}],[11,"cmp","","",29,{"inputs":[{"name":"box"},{"name":"box"}],"output":{"name":"ordering"}}],[11,"hash","","",29,null],[11,"from","","",29,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",29,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",29,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"box"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",29,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"deref_mut","","",29,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"next","","",29,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"size_hint","","",29,null],[11,"next_back","","",29,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"call_once","","",29,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"call_once","","",29,{"inputs":[{"name":"box"},{"name":"a"}],"output":{"name":"r"}}],[11,"clone","","",29,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"borrow","","",29,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"borrow_mut","","",29,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"as_ref","","",29,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"as_mut","","",29,{"inputs":[{"name":"box"}],"output":{"name":"t"}}],[11,"new","alloc::rc","Constructs a new `Rc&lt;T&gt;`.",406,{"inputs":[{"name":"t"}],"output":{"name":"rc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Rc&lt;T&gt;` has only one strong reference.\nThis will succeed even if there are outstanding weak references.",406,{"inputs":[{"name":"rc"}],"output":{"name":"result"}}],[11,"would_unwrap","","Checks if `Rc::try_unwrap` would return `Ok`.",406,{"inputs":[{"name":"rc"}],"output":{"name":"bool"}}],[11,"downgrade","","Downgrades the `Rc&lt;T&gt;` to a `Weak&lt;T&gt;` reference.",406,{"inputs":[{"name":"rc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",406,{"inputs":[{"name":"rc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",406,{"inputs":[{"name":"rc"}],"output":{"name":"usize"}}],[11,"is_unique","","Returns true if there are no other `Rc` or `Weak&lt;T&gt;` values that share\nthe same inner value.",406,{"inputs":[{"name":"rc"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Rc&lt;T&gt;` has\none strong reference and no weak references.",406,{"inputs":[{"name":"rc"}],"output":{"name":"option"}}],[11,"make_mut","","Make a mutable reference into the given `Rc&lt;T&gt;` by cloning the inner\ndata if the `Rc&lt;T&gt;` doesn&#39;t have one strong reference and no weak\nreferences.",406,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"deref","","",406,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"drop","","Drops the `Rc&lt;T&gt;`.",406,null],[11,"clone","","Makes a clone of the `Rc&lt;T&gt;`.",406,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"default","","Creates a new `Rc&lt;T&gt;`, with the `Default` value for `T`.",406,{"inputs":[],"output":{"name":"rc"}}],[11,"eq","","Equality for two `Rc&lt;T&gt;`s.",406,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Rc&lt;T&gt;`s.",406,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","Partial comparison for two `Rc&lt;T&gt;`s.",406,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"option"}}],[11,"lt","","Less-than comparison for two `Rc&lt;T&gt;`s.",406,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"le","","&#39;Less-than or equal to&#39; comparison for two `Rc&lt;T&gt;`s.",406,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Rc&lt;T&gt;`s.",406,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ge","","&#39;Greater-than or equal to&#39; comparison for two `Rc&lt;T&gt;`s.",406,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"cmp","","Comparison for two `Rc&lt;T&gt;`s.",406,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"ordering"}}],[11,"hash","","",406,null],[11,"fmt","","",406,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",406,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",406,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",406,{"inputs":[{"name":"t"}],"output":{"name":"rc"}}],[11,"upgrade","","Upgrades a weak reference to a strong reference.",407,{"inputs":[{"name":"weak"}],"output":{"name":"option"}}],[11,"drop","","Drops the `Weak&lt;T&gt;`.",407,null],[11,"clone","","Makes a clone of the `Weak&lt;T&gt;`.",407,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"fmt","","",407,{"inputs":[{"name":"weak"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructs a new `Weak&lt;T&gt;` without an accompanying instance of T.",407,{"inputs":[],"output":{"name":"weak"}}],[11,"borrow","","",406,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"as_ref","","",406,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"borrow","collections::borrow","",114,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"clone","","",114,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",114,null],[11,"into_owned","","Extracts the owned data.",114,null],[11,"deref","","",114,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"cmp","","",114,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"ordering"}}],[11,"eq","","",114,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",114,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"option"}}],[11,"fmt","","",114,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",114,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",114,null],[11,"into_cow","","",114,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"as_ref","","",114,{"inputs":[{"name":"cow"}],"output":{"name":"t"}}],[11,"borrow","collections::vec","",86,null],[11,"borrow_mut","","",86,null],[11,"clone","collections::str","",408,{"inputs":[{"name":"encodeutf16"}],"output":{"name":"encodeutf16"}}],[11,"next","","",408,{"inputs":[{"name":"encodeutf16"}],"output":{"name":"option"}}],[11,"size_hint","","",408,null],[11,"borrow","collections::string","",115,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"fmt","core::str::pattern","",409,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",409,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",409,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",409,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",410,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[11,"into_searcher","","",411,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",410,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",410,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",410,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",412,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",412,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",412,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",412,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",412,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",412,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",412,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",412,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",413,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",413,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",413,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",413,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",413,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",413,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",413,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",413,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",414,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",414,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",414,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",414,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",414,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",414,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",414,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",414,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",415,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",415,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",416,{"inputs":[{"name":"strsearcherimpl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",416,{"inputs":[{"name":"strsearcherimpl"}],"output":{"name":"strsearcherimpl"}}],[11,"fmt","","",417,{"inputs":[{"name":"emptyneedle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",417,{"inputs":[{"name":"emptyneedle"}],"output":{"name":"emptyneedle"}}],[11,"haystack","","",415,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",415,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",415,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",415,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",415,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",418,{"inputs":[{"name":"twowaysearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",418,{"inputs":[{"name":"twowaysearcher"}],"output":{"name":"twowaysearcher"}}],[11,"use_early_reject","","",419,{"inputs":[],"output":{"name":"bool"}}],[11,"rejecting","","",419,null],[11,"matching","","",419,null],[11,"use_early_reject","","",420,{"inputs":[],"output":{"name":"bool"}}],[11,"rejecting","","",420,null],[11,"matching","","",420,null],[11,"cmp","collections::string","",115,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",115,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"option"}}],[11,"lt","","",115,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"le","","",115,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"gt","","",115,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ge","","",115,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"fmt","","",34,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",35,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new empty `String`.",115,{"inputs":[],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",115,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",115,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",115,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `Err`\nif `v` contains any invalid data.",115,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",115,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",115,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.",115,{"inputs":[{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",115,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"as_str","","Extracts a string slice containing the entire string.",115,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"as_mut_str","","Extracts a string slice containing the entire string.",115,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"push_str","","Appends a given string slice onto the end of this `String`.",115,null],[11,"capacity","","Returns this `String`&#39;s capacity, in bytes.",115,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"reserve","","Ensures that this `String`&#39;s capacity is at least `additional` bytes\nlarger than its length.",115,null],[11,"reserve_exact","","Ensures that this `String`&#39;s capacity is `additional` bytes\nlarger than its length.",115,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",115,null],[11,"push","","Appends the given `char` to the end of this `String`.",115,null],[11,"as_bytes","","Returns a byte slice of this `String`&#39;s contents.",115,null],[11,"truncate","","Shortens this `String` to the specified length.",115,null],[11,"pop","","Removes the last character from the string buffer and returns it.",115,{"inputs":[{"name":"string"}],"output":{"name":"option"}}],[11,"remove","","Removes a `char` from this `String` at a byte position and returns it.",115,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"char"}}],[11,"insert","","Inserts a character into this `String` at a byte position.",115,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",115,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of this `String`, in bytes.",115,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",115,{"inputs":[{"name":"string"}],"output":{"name":"bool"}}],[11,"clear","","Truncates this `String`, removing all contents.",115,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars.",115,{"inputs":[{"name":"string"},{"name":"r"}],"output":{"name":"drain"}}],[11,"into_boxed_str","","Converts this `String` into a `Box&lt;str&gt;`.",115,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",34,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"vec"}}],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",34,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"utf8error"}}],[11,"fmt","","",34,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",35,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",115,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"clone_from","","",115,null],[11,"from_iter","","",115,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",115,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",115,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",115,null],[11,"extend","","",115,null],[11,"extend","","",115,null],[11,"extend","","",115,null],[11,"eq","","",115,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",115,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",115,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",115,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",115,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",115,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::borrow","",114,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",114,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",114,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",114,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",114,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",114,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",115,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",115,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"default","","",115,{"inputs":[],"output":{"name":"string"}}],[11,"fmt","","",115,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",115,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",115,null],[11,"add","","",115,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"index","","",115,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index","","",115,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",115,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",115,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index_mut","","",115,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index_mut","","",115,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index_mut","","",115,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index_mut","","",115,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"deref","","",115,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"deref_mut","","",115,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"from_str","","",115,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"fmt","","",36,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",36,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",36,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"as_ref","","",115,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"as_ref","","",115,null],[11,"from","","",115,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",114,{"inputs":[{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",114,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",115,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"into_cow","","",115,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"write_str","","",115,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",115,{"inputs":[{"name":"string"},{"name":"char"}],"output":{"name":"result"}}],[11,"drop","","",421,null],[11,"next","","",421,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",421,null],[11,"next_back","","",421,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"new","collections::vec","Constructs a new, empty `Vec&lt;T&gt;`.",86,{"inputs":[],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec&lt;T&gt;` with the specified capacity.",86,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec&lt;T&gt;` directly from the raw components of another vector.",86,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",86,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec&lt;T&gt;`. The collection may reserve more space to avoid\nfrequent reallocations.",86,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec&lt;T&gt;`. Does nothing if the capacity is already\nsufficient.",86,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",86,null],[11,"into_boxed_slice","","Converts the vector into Box&lt;[T]&gt;.",86,{"inputs":[{"name":"vec"}],"output":{"name":"box"}}],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",86,null],[11,"as_slice","","Extracts a slice containing the entire vector.",86,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",86,null],[11,"set_len","","Sets the length of a vector.",86,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",86,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after it to the right.",86,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after it to the left.",86,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"retain","","Retains only the elements specified by the predicate.",86,null],[11,"push","","Appends an element to the back of a collection.",86,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",86,{"inputs":[{"name":"vec"}],"output":{"name":"option"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",86,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items.",86,{"inputs":[{"name":"vec"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the vector, removing all values.",86,null],[11,"len","","Returns the number of elements in the vector.",86,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector contains no elements.",86,{"inputs":[{"name":"vec"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the collection into two at the given index.",86,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",86,null],[11,"push_all","","",86,null],[11,"extend_from_slice","","Appends all elements in a slice to the `Vec`.",86,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",86,null],[11,"clone","","",86,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"clone_from","","",86,null],[11,"hash","","",86,null],[11,"index","","",86,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",86,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",86,null],[11,"index","","",86,null],[11,"index","","",86,null],[11,"index","","",86,null],[11,"index_mut","","",86,null],[11,"index_mut","","",86,null],[11,"index_mut","","",86,null],[11,"index_mut","","",86,null],[11,"deref","","",86,null],[11,"deref_mut","","",86,null],[11,"from_iter","","",86,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",86,{"inputs":[{"name":"vec"}],"output":{"name":"intoiter"}}],[11,"extend","","",86,null],[11,"extend","","",86,null],[11,"eq","","",86,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","collections::borrow","",114,null],[11,"ne","","",114,null],[11,"eq","","",114,null],[11,"ne","","",114,null],[11,"eq","","",114,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",114,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","collections::vec","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"partial_cmp","","",86,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"option"}}],[11,"cmp","","",86,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"ordering"}}],[11,"drop","","",86,null],[11,"default","","",86,{"inputs":[],"output":{"name":"vec"}}],[11,"fmt","","",86,{"inputs":[{"name":"vec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",86,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_mut","","",86,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_ref","","",86,null],[11,"as_mut","","",86,null],[11,"from","","",86,null],[11,"from","","",86,{"inputs":[{"name":"str"}],"output":{"name":"vec"}}],[11,"from","collections::borrow","",114,null],[11,"from","","",114,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"from_iter","","",114,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"into_cow","collections::vec","",86,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"next","","",422,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",422,null],[11,"count","","",422,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next_back","","",422,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"clone","","",422,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"drop","","",422,null],[11,"next","","",423,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",423,null],[11,"next_back","","",423,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"drop","","",423,null],[11,"next","rustc_unicode::char","",424,{"inputs":[{"name":"tolowercase"}],"output":{"name":"option"}}],[11,"next","","",425,{"inputs":[{"name":"touppercase"}],"output":{"name":"option"}}],[11,"next","","",426,{"inputs":[{"name":"casemappingiter"}],"output":{"name":"option"}}],[11,"clone","","",427,{"inputs":[{"name":"decodeutf16"}],"output":{"name":"decodeutf16"}}],[11,"next","","",427,{"inputs":[{"name":"decodeutf16"}],"output":{"name":"option"}}],[11,"size_hint","","",427,null],[11,"clone","openssl::ssl","",428,{"inputs":[{"name":"sslcontext"}],"output":{"name":"self"}}],[11,"fmt","","",428,{"inputs":[{"name":"sslcontext"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",428,{"inputs":[{"name":"sslcontext"}],"output":null}],[11,"new","","Creates a new SSL context.",428,{"inputs":[{"name":"sslmethod"}],"output":{"name":"result"}}],[11,"set_verify","","Configures the certificate verification method for new connections.",428,{"inputs":[{"name":"sslcontext"},{"name":"sslverifymode"},{"name":"option"}],"output":null}],[11,"set_verify_with_data","","Configures the certificate verification method for new connections also\ncarrying supplied data.",428,{"inputs":[{"name":"sslcontext"},{"name":"sslverifymode"},{"name":"verifycallbackdata"},{"name":"t"}],"output":null}],[11,"set_servername_callback","","Configures the server name indication (SNI) callback for new connections",428,{"inputs":[{"name":"sslcontext"},{"name":"option"}],"output":null}],[11,"set_servername_callback_with_data","","Configures the server name indication (SNI) callback for new connections\ncarrying supplied data",428,{"inputs":[{"name":"sslcontext"},{"name":"servernamecallbackdata"},{"name":"t"}],"output":null}],[11,"set_verify_depth","","Sets verification depth",428,{"inputs":[{"name":"sslcontext"},{"name":"u32"}],"output":null}],[11,"set_read_ahead","","",428,{"inputs":[{"name":"sslcontext"},{"name":"u32"}],"output":null}],[11,"set_tmp_dh","","",428,{"inputs":[{"name":"sslcontext"},{"name":"dh"}],"output":{"name":"result"}}],[11,"set_default_verify_paths","","Use the default locations of trusted certificates for verification.",428,{"inputs":[{"name":"sslcontext"}],"output":{"name":"result"}}],[11,"set_CA_file","","Specifies the file that contains trusted CA certificates.",428,{"inputs":[{"name":"sslcontext"},{"name":"p"}],"output":{"name":"result"}}],[11,"set_session_id_context","","Set the context identifier for sessions",428,null],[11,"set_certificate_file","","Specifies the file that contains certificate",428,{"inputs":[{"name":"sslcontext"},{"name":"p"},{"name":"x509filetype"}],"output":{"name":"result"}}],[11,"set_certificate_chain_file","","Specifies the file that contains certificate chain",428,{"inputs":[{"name":"sslcontext"},{"name":"p"},{"name":"x509filetype"}],"output":{"name":"result"}}],[11,"set_certificate","","Specifies the certificate",428,{"inputs":[{"name":"sslcontext"},{"name":"x509"}],"output":{"name":"result"}}],[11,"add_extra_chain_cert","","Adds a certificate to the certificate chain presented together with the\ncertificate specified using set_certificate()",428,{"inputs":[{"name":"sslcontext"},{"name":"x509"}],"output":{"name":"result"}}],[11,"set_private_key_file","","Specifies the file that contains private key",428,{"inputs":[{"name":"sslcontext"},{"name":"p"},{"name":"x509filetype"}],"output":{"name":"result"}}],[11,"set_private_key","","Specifies the private key",428,{"inputs":[{"name":"sslcontext"},{"name":"pkey"}],"output":{"name":"result"}}],[11,"check_private_key","","Check consistency of private key and certificate",428,{"inputs":[{"name":"sslcontext"}],"output":{"name":"result"}}],[11,"set_cipher_list","","",428,{"inputs":[{"name":"sslcontext"},{"name":"str"}],"output":{"name":"result"}}],[11,"set_options","","",428,{"inputs":[{"name":"sslcontext"},{"name":"sslcontextoptions"}],"output":{"name":"sslcontextoptions"}}],[11,"get_options","","",428,{"inputs":[{"name":"sslcontext"}],"output":{"name":"sslcontextoptions"}}],[11,"clear_options","","",428,{"inputs":[{"name":"sslcontext"},{"name":"sslcontextoptions"}],"output":{"name":"sslcontextoptions"}}],[11,"name","","Returns the name of cipher.",429,{"inputs":[{"name":"sslcipher"}],"output":{"name":"str"}}],[11,"version","","Returns the SSL/TLS protocol version that first defined the cipher.",429,{"inputs":[{"name":"sslcipher"}],"output":{"name":"str"}}],[11,"bits","","Returns the number of bits used for the cipher.",429,{"inputs":[{"name":"sslcipher"}],"output":{"name":"cipherbits"}}],[11,"description","","Returns a textual description of the cipher used",429,{"inputs":[{"name":"sslcipher"}],"output":{"name":"option"}}],[11,"fmt","","",430,{"inputs":[{"name":"ssl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",430,{"inputs":[{"name":"ssl"}],"output":null}],[11,"clone","","# Deprecated",430,{"inputs":[{"name":"ssl"}],"output":{"name":"ssl"}}],[11,"new","","",430,{"inputs":[{"name":"sslcontext"}],"output":{"name":"result"}}],[11,"set_verify","","Sets the verification mode to be used during the handshake process.",430,{"inputs":[{"name":"ssl"},{"name":"sslverifymode"}],"output":null}],[11,"set_verify_callback","","Sets the certificate verification callback to be used during the\nhandshake process.",430,{"inputs":[{"name":"ssl"},{"name":"sslverifymode"},{"name":"f"}],"output":null}],[11,"get_current_cipher","","",430,{"inputs":[{"name":"ssl"}],"output":{"name":"option"}}],[11,"state_string","","",430,{"inputs":[{"name":"ssl"}],"output":{"name":"str"}}],[11,"state_string_long","","",430,{"inputs":[{"name":"ssl"}],"output":{"name":"str"}}],[11,"set_hostname","","Sets the host name to be used with SNI (Server Name Indication).",430,{"inputs":[{"name":"ssl"},{"name":"str"}],"output":{"name":"result"}}],[11,"peer_certificate","","Returns the certificate of the peer, if present.",430,{"inputs":[{"name":"ssl"}],"output":{"name":"option"}}],[11,"version","","Returns the name of the protocol used for the connection, e.g. &quot;TLSv1.2&quot;, &quot;SSLv3&quot;, etc.",430,{"inputs":[{"name":"ssl"}],"output":{"name":"str"}}],[11,"pending","","Returns the number of bytes remaining in the currently processed TLS\nrecord.",430,{"inputs":[{"name":"ssl"}],"output":{"name":"usize"}}],[11,"compression","","Returns the compression currently in use.",430,{"inputs":[{"name":"ssl"}],"output":{"name":"option"}}],[11,"get_ssl_method","","",430,{"inputs":[{"name":"ssl"}],"output":{"name":"option"}}],[11,"get_servername","","Returns the server&#39;s name for the current connection",430,{"inputs":[{"name":"ssl"}],"output":{"name":"option"}}],[11,"set_ssl_context","","change the context corresponding to the current connection",430,{"inputs":[{"name":"ssl"},{"name":"sslcontext"}],"output":{"name":"sslcontext"}}],[11,"get_ssl_context","","obtain the context corresponding to the current connection",430,{"inputs":[{"name":"ssl"}],"output":{"name":"sslcontext"}}],[11,"clone","","",431,{"inputs":[{"name":"sslstream"}],"output":{"name":"sslstream"}}],[11,"fmt","","",431,{"inputs":[{"name":"sslstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_raw_fd","","",431,{"inputs":[{"name":"sslstream"}],"output":{"name":"rawfd"}}],[11,"connect","","Creates an SSL/TLS client operating over the provided stream.",431,{"inputs":[{"name":"t"},{"name":"s"}],"output":{"name":"result"}}],[11,"accept","","Creates an SSL/TLS server operating over the provided stream.",431,{"inputs":[{"name":"t"},{"name":"s"}],"output":{"name":"result"}}],[11,"connect_generic","","### Deprecated",431,{"inputs":[{"name":"t"},{"name":"s"}],"output":{"name":"result"}}],[11,"accept_generic","","### Deprecated",431,{"inputs":[{"name":"t"},{"name":"s"}],"output":{"name":"result"}}],[11,"ssl_read","","Like `read`, but returns an `ssl::Error` rather than an `io::Error`.",431,null],[11,"ssl_write","","Like `write`, but returns an `ssl::Error` rather than an `io::Error`.",431,null],[11,"get_ref","","Returns a reference to the underlying stream.",431,{"inputs":[{"name":"sslstream"}],"output":{"name":"s"}}],[11,"get_mut","","Returns a mutable reference to the underlying stream.",431,{"inputs":[{"name":"sslstream"}],"output":{"name":"s"}}],[11,"ssl","","Returns the OpenSSL `Ssl` object associated with this stream.",431,{"inputs":[{"name":"sslstream"}],"output":{"name":"ssl"}}],[11,"try_clone","","# Deprecated",431,{"inputs":[{"name":"sslstream"}],"output":{"name":"result"}}],[11,"read","","",431,null],[11,"write","","",431,null],[11,"flush","","",431,{"inputs":[{"name":"sslstream"}],"output":{"name":"result"}}],[11,"into_ssl","","",430,{"inputs":[{"name":"ssl"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"maybesslstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",20,null],[11,"write","","",20,null],[11,"flush","","",20,{"inputs":[{"name":"maybesslstream"}],"output":{"name":"result"}}],[11,"get_ref","","Returns a reference to the underlying stream.",20,{"inputs":[{"name":"maybesslstream"}],"output":{"name":"s"}}],[11,"get_mut","","Returns a mutable reference to the underlying stream.",20,{"inputs":[{"name":"maybesslstream"}],"output":{"name":"s"}}],[11,"try_clone","","Like `TcpStream::try_clone`.",20,{"inputs":[{"name":"maybesslstream"}],"output":{"name":"result"}}],[11,"clone","","",432,{"inputs":[{"name":"nonblockingsslstream"}],"output":{"name":"self"}}],[11,"as_raw_fd","","",432,{"inputs":[{"name":"nonblockingsslstream"}],"output":{"name":"rawfd"}}],[11,"try_clone","","",432,{"inputs":[{"name":"nonblockingsslstream"}],"output":{"name":"result"}}],[11,"get_ref","","Returns a reference to the underlying stream.",432,{"inputs":[{"name":"nonblockingsslstream"}],"output":{"name":"s"}}],[11,"get_mut","","Returns a mutable reference to the underlying stream.",432,{"inputs":[{"name":"nonblockingsslstream"}],"output":{"name":"s"}}],[11,"ssl","","Returns a reference to the Ssl.",432,{"inputs":[{"name":"nonblockingsslstream"}],"output":{"name":"ssl"}}],[11,"connect","","Create a new nonblocking client ssl connection on wrapped `stream`.",432,{"inputs":[{"name":"t"},{"name":"s"}],"output":{"name":"result"}}],[11,"accept","","Create a new nonblocking server ssl connection on wrapped `stream`.",432,{"inputs":[{"name":"t"},{"name":"s"}],"output":{"name":"result"}}],[11,"read","","Read bytes from the SSL stream into `buf`.",432,null],[11,"write","","Write bytes from `buf` to the SSL stream.",432,null],[0,"x509","openssl","",null,null],[3,"SslString","openssl::x509","",null,null],[3,"X509StoreContext","","",null,null],[3,"X509Generator","","Generator of private key/certificate pairs",null,null],[3,"X509","","A public key certificate",null,null],[3,"X509Name","","",null,null],[3,"X509NameEntry","","",null,null],[3,"X509Req","","A certificate signing request",null,null],[3,"GeneralNames","","A collection of OpenSSL `GENERAL_NAME`s.",null,null],[3,"GeneralNamesIter","","An iterator over OpenSSL `GENERAL_NAME`s.",null,null],[3,"GeneralName","","An OpenSSL `GENERAL_NAME`.",null,null],[4,"X509FileType","","",null,null],[13,"PEM","","",433,null],[13,"ASN1","","",433,null],[13,"Default","","",433,null],[4,"X509ValidationError","","",null,null],[13,"X509UnableToGetIssuerCert","","",434,null],[13,"X509UnableToGetCrl","","",434,null],[13,"X509UnableToDecryptCertSignature","","",434,null],[13,"X509UnableToDecryptCrlSignature","","",434,null],[13,"X509UnableToDecodeIssuerPublicKey","","",434,null],[13,"X509CertSignatureFailure","","",434,null],[13,"X509CrlSignatureFailure","","",434,null],[13,"X509CertNotYetValid","","",434,null],[13,"X509CertHasExpired","","",434,null],[13,"X509CrlNotYetValid","","",434,null],[13,"X509CrlHasExpired","","",434,null],[13,"X509ErrorInCertNotBeforeField","","",434,null],[13,"X509ErrorInCertNotAfterField","","",434,null],[13,"X509ErrorInCrlLastUpdateField","","",434,null],[13,"X509ErrorInCrlNextUpdateField","","",434,null],[13,"X509OutOfMem","","",434,null],[13,"X509DepthZeroSelfSignedCert","","",434,null],[13,"X509SelfSignedCertInChain","","",434,null],[13,"X509UnableToGetIssuerCertLocally","","",434,null],[13,"X509UnableToVerifyLeafSignature","","",434,null],[13,"X509CertChainTooLong","","",434,null],[13,"X509CertRevoked","","",434,null],[13,"X509InvalidCA","","",434,null],[13,"X509PathLengthExceeded","","",434,null],[13,"X509InvalidPurpose","","",434,null],[13,"X509CertUntrusted","","",434,null],[13,"X509CertRejected","","",434,null],[13,"X509SubjectIssuerMismatch","","",434,null],[13,"X509AkidSkidMismatch","","",434,null],[13,"X509AkidIssuerSerialMismatch","","",434,null],[13,"X509KeyusageNoCertsign","","",434,null],[13,"X509UnableToGetCrlIssuer","","",434,null],[13,"X509UnhandledCriticalExtension","","",434,null],[13,"X509KeyusageNoCrlSign","","",434,null],[13,"X509UnhandledCriticalCrlExtension","","",434,null],[13,"X509InvalidNonCA","","",434,null],[13,"X509ProxyPathLengthExceeded","","",434,null],[13,"X509KeyusageNoDigitalSignature","","",434,null],[13,"X509ProxyCertificatesNotAllowed","","",434,null],[13,"X509InvalidExtension","","",434,null],[13,"X509InavlidPolicyExtension","","",434,null],[13,"X509NoExplicitPolicy","","",434,null],[13,"X509DifferentCrlScope","","",434,null],[13,"X509UnsupportedExtensionFeature","","",434,null],[13,"X509UnnestedResource","","",434,null],[13,"X509PermittedVolation","","",434,null],[13,"X509ExcludedViolation","","",434,null],[13,"X509SubtreeMinmax","","",434,null],[13,"X509UnsupportedConstraintType","","",434,null],[13,"X509UnsupportedConstraintSyntax","","",434,null],[13,"X509UnsupportedNameSyntax","","",434,null],[13,"X509CrlPathValidationError","","",434,null],[13,"X509ApplicationVerification","","",434,null],[13,"X509UnknownError","","",434,null],[0,"extension","","",null,null],[4,"ExtensionType","openssl::x509::extension","Type-only version of the `Extension` enum.",null,null],[13,"KeyUsage","","",435,null],[13,"ExtKeyUsage","","",435,null],[13,"SubjectAltName","","",435,null],[13,"IssuerAltName","","",435,null],[13,"OtherNid","","",435,null],[13,"OtherStr","","",435,null],[4,"Extension","","A X.509 v3 certificate extension.",null,null],[13,"KeyUsage","","The purposes of the key contained in the certificate",436,null],[13,"ExtKeyUsage","","The extended purposes of the key contained in the certificate",436,null],[13,"SubjectAltName","","Subject Alternative Names",436,null],[13,"IssuerAltName","","Issuer Alternative Names",436,null],[13,"OtherNid","","Arbitrary extensions by NID. See `man x509v3_config` for value syntax.",436,null],[13,"OtherStr","","Arbitrary extensions by OID string. See `man ASN1_generate_nconf` for value syntax.",436,null],[4,"KeyUsageOption","","",null,null],[13,"DigitalSignature","","",437,null],[13,"NonRepudiation","","",437,null],[13,"KeyEncipherment","","",437,null],[13,"DataEncipherment","","",437,null],[13,"KeyAgreement","","",437,null],[13,"KeyCertSign","","",437,null],[13,"CRLSign","","",437,null],[13,"EncipherOnly","","",437,null],[13,"DecipherOnly","","",437,null],[4,"ExtKeyUsageOption","","",null,null],[13,"ServerAuth","","",438,null],[13,"ClientAuth","","",438,null],[13,"CodeSigning","","",438,null],[13,"EmailProtection","","",438,null],[13,"TimeStamping","","",438,null],[13,"MsCodeInd","","",438,null],[13,"MsCodeCom","","",438,null],[13,"MsCtlSign","","",438,null],[13,"MsSgc","","",438,null],[13,"MsEfs","","",438,null],[13,"NsSgc","","",438,null],[13,"Other","","An arbitrary key usage by OID.",438,null],[4,"AltNameOption","","",null,null],[13,"Other","","The value is specified as OID;content. See `man ASN1_generate_nconf` for more information on the content syntax.",439,null],[13,"Email","","",439,null],[13,"DNS","","",439,null],[13,"Directory","","",439,null],[13,"URI","","",439,null],[13,"IPAddress","","",439,null],[13,"RegisteredID","","",439,null],[11,"eq","","",435,{"inputs":[{"name":"extensiontype"},{"name":"extensiontype"}],"output":{"name":"bool"}}],[11,"ne","","",435,{"inputs":[{"name":"extensiontype"},{"name":"extensiontype"}],"output":{"name":"bool"}}],[11,"hash","","",435,null],[11,"clone","","",435,{"inputs":[{"name":"extensiontype"}],"output":{"name":"extensiontype"}}],[11,"clone","","",436,{"inputs":[{"name":"extension"}],"output":{"name":"extension"}}],[11,"get_type","","",436,{"inputs":[{"name":"extension"}],"output":{"name":"extensiontype"}}],[11,"get_nid","","",435,{"inputs":[{"name":"extensiontype"}],"output":{"name":"option"}}],[11,"get_name","","",435,{"inputs":[{"name":"extensiontype"}],"output":{"name":"option"}}],[11,"to_string","","",436,{"inputs":[{"name":"extension"}],"output":{"name":"string"}}],[11,"clone","","",437,{"inputs":[{"name":"keyusageoption"}],"output":{"name":"keyusageoption"}}],[11,"fmt","","",437,{"inputs":[{"name":"keyusageoption"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",438,{"inputs":[{"name":"extkeyusageoption"}],"output":{"name":"extkeyusageoption"}}],[11,"fmt","","",438,{"inputs":[{"name":"extkeyusageoption"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",439,{"inputs":[{"name":"altnameoption"}],"output":{"name":"altnameoption"}}],[11,"fmt","","",439,{"inputs":[{"name":"altnameoption"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","openssl::x509","",440,{"inputs":[{"name":"sslstring"}],"output":null}],[11,"deref","","",440,{"inputs":[{"name":"sslstring"}],"output":{"name":"str"}}],[11,"fmt","","",440,{"inputs":[{"name":"sslstring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",440,{"inputs":[{"name":"sslstring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",433,{"inputs":[{"name":"x509filetype"}],"output":{"name":"x509filetype"}}],[11,"new","","",441,null],[11,"get_error","","",441,{"inputs":[{"name":"x509storecontext"}],"output":{"name":"option"}}],[11,"get_current_cert","","",441,{"inputs":[{"name":"x509storecontext"}],"output":{"name":"option"}}],[11,"error_depth","","",441,{"inputs":[{"name":"x509storecontext"}],"output":{"name":"u32"}}],[11,"new","","Creates a new generator with the following defaults:",442,{"inputs":[],"output":{"name":"x509generator"}}],[11,"set_bitlength","","Sets desired bit length",442,{"inputs":[{"name":"x509generator"},{"name":"u32"}],"output":{"name":"x509generator"}}],[11,"set_valid_period","","Sets certificate validity period in days since today",442,{"inputs":[{"name":"x509generator"},{"name":"u32"}],"output":{"name":"x509generator"}}],[11,"add_name","","Add attribute to the name of the certificate",442,{"inputs":[{"name":"x509generator"},{"name":"string"},{"name":"string"}],"output":{"name":"x509generator"}}],[11,"add_names","","Add multiple attributes to the name of the certificate",442,{"inputs":[{"name":"x509generator"},{"name":"i"}],"output":{"name":"x509generator"}}],[11,"add_extension","","Add an extension to a certificate",442,{"inputs":[{"name":"x509generator"},{"name":"extension"}],"output":{"name":"x509generator"}}],[11,"add_extensions","","Add multiple extensions to a certificate",442,{"inputs":[{"name":"x509generator"},{"name":"i"}],"output":{"name":"x509generator"}}],[11,"set_sign_hash","","",442,{"inputs":[{"name":"x509generator"},{"name":"type"}],"output":{"name":"x509generator"}}],[11,"generate","","Generates a private key and a self-signed certificate and returns them",442,{"inputs":[{"name":"x509generator"}],"output":{"name":"result"}}],[11,"sign","","Sets the certificate public-key, then self-sign and return it\nNote: That the bit-length of the private key is used (set_bitlength is ignored)",442,{"inputs":[{"name":"x509generator"},{"name":"pkey"}],"output":{"name":"result"}}],[11,"request","","Obtain a certificate signing request (CSR)",442,{"inputs":[{"name":"x509generator"},{"name":"pkey"}],"output":{"name":"result"}}],[11,"new","","Creates new from handle with desired ownership.",443,null],[11,"new_in_ctx","","Creates a new certificate from context. Doesn&#39;t take ownership\nof handle.",443,null],[11,"from_pem","","Reads certificate from PEM, takes ownership of handle",443,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"get_handle","","",443,null],[11,"subject_name","","",443,{"inputs":[{"name":"x509"}],"output":{"name":"x509name"}}],[11,"subject_alt_names","","Returns this certificate&#39;s SAN entries, if they exist.",443,{"inputs":[{"name":"x509"}],"output":{"name":"option"}}],[11,"public_key","","",443,{"inputs":[{"name":"x509"}],"output":{"name":"pkey"}}],[11,"fingerprint","","Returns certificate fingerprint calculated using provided hash",443,{"inputs":[{"name":"x509"},{"name":"type"}],"output":{"name":"option"}}],[11,"write_pem","","Writes certificate as PEM",443,{"inputs":[{"name":"x509"},{"name":"w"}],"output":{"name":"result"}}],[11,"clone","","",443,{"inputs":[{"name":"x509"}],"output":{"name":"x509"}}],[11,"drop","","",443,{"inputs":[{"name":"x509"}],"output":null}],[11,"text_by_nid","","",444,{"inputs":[{"name":"x509name"},{"name":"nid"}],"output":{"name":"option"}}],[11,"new","","Creates new from handle",445,null],[11,"from_pem","","Reads CSR from PEM",445,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[11,"write_pem","","Writes CSR as PEM",445,{"inputs":[{"name":"x509req"},{"name":"w"}],"output":{"name":"result"}}],[11,"drop","","",445,{"inputs":[{"name":"x509req"}],"output":null}],[11,"clone","","",434,{"inputs":[{"name":"x509validationerror"}],"output":{"name":"x509validationerror"}}],[11,"len","","Returns the number of `GeneralName`s in this structure.",446,{"inputs":[{"name":"generalnames"}],"output":{"name":"usize"}}],[11,"get","","Returns the specified `GeneralName`.",446,{"inputs":[{"name":"generalnames"},{"name":"usize"}],"output":{"name":"generalname"}}],[11,"iter","","Returns an iterator over the `GeneralName`s in this structure.",446,{"inputs":[{"name":"generalnames"}],"output":{"name":"generalnamesiter"}}],[11,"next","","",447,{"inputs":[{"name":"generalnamesiter"}],"output":{"name":"option"}}],[11,"size_hint","","",447,null],[11,"dnsname","","Returns the contents of this `GeneralName` if it is a `dNSName`.",448,{"inputs":[{"name":"generalname"}],"output":{"name":"option"}}],[11,"ipaddress","","Returns the contents of this `GeneralName` if it is an `iPAddress`.",448,{"inputs":[{"name":"generalname"}],"output":{"name":"option"}}],[0,"nid","openssl","",null,null],[4,"Nid","openssl::nid","",null,null],[13,"Undefined","","",449,null],[13,"Rsadsi","","",449,null],[13,"Pkcs","","",449,null],[13,"MD2","","",449,null],[13,"MD4","","",449,null],[13,"MD5","","",449,null],[13,"RC4","","",449,null],[13,"RsaEncryption","","",449,null],[13,"RSA_MD2","","",449,null],[13,"RSA_MD5","","",449,null],[13,"PBE_MD2_DES","","",449,null],[13,"X500","","",449,null],[13,"x509","","",449,null],[13,"CN","","",449,null],[13,"C","","",449,null],[13,"L","","",449,null],[13,"ST","","",449,null],[13,"O","","",449,null],[13,"OU","","",449,null],[13,"RSA","","",449,null],[13,"Pkcs7","","",449,null],[13,"Pkcs7_data","","",449,null],[13,"Pkcs7_signedData","","",449,null],[13,"Pkcs7_envelopedData","","",449,null],[13,"Pkcs7_signedAndEnvelopedData","","",449,null],[13,"Pkcs7_digestData","","",449,null],[13,"Pkcs7_encryptedData","","",449,null],[13,"Pkcs3","","",449,null],[13,"DhKeyAgreement","","",449,null],[13,"DES_ECB","","",449,null],[13,"DES_CFB","","",449,null],[13,"DES_CBC","","",449,null],[13,"DES_EDE","","",449,null],[13,"DES_EDE3","","",449,null],[13,"IDEA_CBC","","",449,null],[13,"IDEA_CFB","","",449,null],[13,"IDEA_ECB","","",449,null],[13,"RC2_CBC","","",449,null],[13,"RC2_ECB","","",449,null],[13,"RC2_CFB","","",449,null],[13,"RC2_OFB","","",449,null],[13,"SHA","","",449,null],[13,"RSA_SHA","","",449,null],[13,"DES_EDE_CBC","","",449,null],[13,"DES_EDE3_CBC","","",449,null],[13,"DES_OFB","","",449,null],[13,"IDEA_OFB","","",449,null],[13,"Pkcs9","","",449,null],[13,"Email","","",449,null],[13,"UnstructuredName","","",449,null],[13,"ContentType","","",449,null],[13,"MessageDigest","","",449,null],[13,"SigningTime","","",449,null],[13,"CounterSignature","","",449,null],[13,"ChallengePassword","","",449,null],[13,"UnstructuredAddress","","",449,null],[13,"ExtendedCertificateAttributes","","",449,null],[13,"Netscape","","",449,null],[13,"NetscapeCertExtention","","",449,null],[13,"NetscapeDatatype","","",449,null],[13,"DES_EDE_CFB64","","",449,null],[13,"DES_EDE3_CFB64","","",449,null],[13,"DES_EDE_OFB64","","",449,null],[13,"DES_EDE3_OFB64","","",449,null],[13,"SHA1","","",449,null],[13,"RSA_SHA1","","",449,null],[13,"DSA_SHA","","",449,null],[13,"DSA_OLD","","",449,null],[13,"PBE_SHA1_RC2_64","","",449,null],[13,"PBKDF2","","",449,null],[13,"DSA_SHA1_OLD","","",449,null],[13,"NetscapeCertType","","",449,null],[13,"NetscapeBaseUrl","","",449,null],[13,"NetscapeRevocationUrl","","",449,null],[13,"NetscapeCARevocationUrl","","",449,null],[13,"NetscapeRenewalUrl","","",449,null],[13,"NetscapeCAPolicyUrl","","",449,null],[13,"NetscapeSSLServerName","","",449,null],[13,"NetscapeComment","","",449,null],[13,"NetscapeCertSequence","","",449,null],[13,"DESX_CBC","","",449,null],[13,"ID_CE","","",449,null],[13,"SubjectKeyIdentifier","","",449,null],[13,"KeyUsage","","",449,null],[13,"PrivateKeyUsagePeriod","","",449,null],[13,"SubjectAltName","","",449,null],[13,"IssuerAltName","","",449,null],[13,"BasicConstraints","","",449,null],[13,"CrlNumber","","",449,null],[13,"CertificatePolicies","","",449,null],[13,"AuthorityKeyIdentifier","","",449,null],[13,"BF_CBC","","",449,null],[13,"BF_ECB","","",449,null],[13,"BF_CFB","","",449,null],[13,"BF_OFB","","",449,null],[13,"MDC2","","",449,null],[13,"RSA_MDC2","","",449,null],[13,"RC4_40","","",449,null],[13,"RC2_40_CBC","","",449,null],[13,"G","","",449,null],[13,"S","","",449,null],[13,"I","","",449,null],[13,"UID","","uniqueIdentifier",449,null],[13,"CrlDistributionPoints","","",449,null],[13,"RSA_NP_MD5","","",449,null],[13,"SN","","",449,null],[13,"T","","",449,null],[13,"D","","",449,null],[13,"CAST5_CBC","","",449,null],[13,"CAST5_ECB","","",449,null],[13,"CAST5_CFB","","",449,null],[13,"CAST5_OFB","","",449,null],[13,"PbeWithMD5AndCast5CBC","","",449,null],[13,"DSA_SHA1","","",449,null],[13,"MD5_SHA1","","",449,null],[13,"RSA_SHA1_2","","",449,null],[13,"DSA","","",449,null],[13,"RIPEMD160","","",449,null],[13,"RSA_RIPEMD160","","",449,null],[13,"RC5_CBC","","",449,null],[13,"RC5_ECB","","",449,null],[13,"RC5_CFB","","",449,null],[13,"RC5_OFB","","",449,null],[13,"RLE","","",449,null],[13,"ZLIB","","",449,null],[13,"ExtendedKeyUsage","","",449,null],[13,"PKIX","","",449,null],[13,"ID_KP","","",449,null],[13,"ServerAuth","","",449,null],[13,"ClientAuth","","",449,null],[13,"CodeSigning","","",449,null],[13,"EmailProtection","","",449,null],[13,"TimeStamping","","",449,null],[13,"MsCodeInd","","",449,null],[13,"MsCodeCom","","",449,null],[13,"MsCtlSigh","","",449,null],[13,"MsSGC","","",449,null],[13,"MsEFS","","",449,null],[13,"NsSGC","","",449,null],[13,"DeltaCRL","","",449,null],[13,"CRLReason","","",449,null],[13,"InvalidityDate","","",449,null],[13,"SXNetID","","",449,null],[13,"PBE_SHA1_RC4_128","","",449,null],[13,"PBE_SHA1_RC4_40","","",449,null],[13,"PBE_SHA1_3DES","","",449,null],[13,"PBE_SHA1_2DES","","",449,null],[13,"PBE_SHA1_RC2_128","","",449,null],[13,"PBE_SHA1_RC2_40","","",449,null],[13,"KeyBag","","",449,null],[13,"Pkcs8ShroudedKeyBag","","",449,null],[13,"CertBag","","",449,null],[13,"CrlBag","","",449,null],[13,"SecretBag","","",449,null],[13,"SafeContentsBag","","",449,null],[13,"FriendlyName","","",449,null],[13,"LocalKeyID","","",449,null],[13,"X509Certificate","","",449,null],[13,"SdsiCertificate","","",449,null],[13,"X509Crl","","",449,null],[13,"PBES2","","",449,null],[13,"PBMAC1","","",449,null],[13,"HmacWithSha1","","",449,null],[13,"ID_QT_CPS","","",449,null],[13,"ID_QT_UNOTICE","","",449,null],[13,"RC2_64_CBC","","",449,null],[13,"SMIMECaps","","",449,null],[13,"PBE_MD2_RC2_64","","",449,null],[13,"PBE_MD5_RC2_64","","",449,null],[13,"PBE_SHA1_DES","","",449,null],[13,"MicrosoftExtensionRequest","","",449,null],[13,"ExtensionRequest","","",449,null],[13,"Name","","",449,null],[13,"DnQualifier","","",449,null],[13,"IdPe","","",449,null],[13,"IdAd","","",449,null],[13,"AuthorityInfoAccess","","",449,null],[13,"OCSP","","",449,null],[13,"CaIssuers","","",449,null],[13,"OCSPSigning","","",449,null],[13,"UserId","","Shown as UID in cert subject",449,null],[13,"SHA256","","",449,null],[13,"SHA384","","",449,null],[13,"SHA512","","",449,null],[13,"SHA224","","",449,null],[11,"eq","","",449,{"inputs":[{"name":"nid"},{"name":"nid"}],"output":{"name":"bool"}}],[11,"ne","","",449,{"inputs":[{"name":"nid"},{"name":"nid"}],"output":{"name":"bool"}}],[11,"hash","","",449,null],[11,"clone","","",449,{"inputs":[{"name":"nid"}],"output":{"name":"nid"}}],[0,"version","openssl","",null,null],[5,"number","openssl::version","OPENSSL_VERSION_NUMBER is a numeric release version identifier:",null,{"inputs":[],"output":{"name":"i64"}}],[5,"version","","The text variant of the version number and the release date. For example, &quot;OpenSSL 0.9.5a 1 Apr 2000&quot;.",null,{"inputs":[],"output":{"name":"str"}}],[5,"c_flags","","The compiler flags set for the compilation process in the form &quot;compiler: ...&quot; if available or\n&quot;compiler: information not available&quot; otherwise.",null,{"inputs":[],"output":{"name":"str"}}],[5,"built_on","","The date of the build process in the form &quot;built on: ...&quot; if available or &quot;built on: date not available&quot; otherwise.",null,{"inputs":[],"output":{"name":"str"}}],[5,"platform","","The &quot;Configure&quot; target of the library build in the form &quot;platform: ...&quot; if available or &quot;platform: information not available&quot; otherwise.",null,{"inputs":[],"output":{"name":"str"}}],[5,"dir","","The &quot;OPENSSLDIR&quot; setting of the library build in the form &quot;OPENSSLDIR: &quot;...&quot;&quot; if available or &quot;OPENSSLDIR: N/A&quot; otherwise.",null,{"inputs":[],"output":{"name":"str"}}]],"paths":[[3,"Asn1Time"],[4,"RNGProperty"],[3,"BigNum"],[3,"MemBio"],[4,"Type"],[3,"Hasher"],[3,"HMAC"],[3,"KeyIvPair"],[4,"Parts"],[4,"Role"],[4,"EncryptionPadding"],[3,"PKey"],[4,"Mode"],[4,"Type"],[3,"Crypter"],[3,"RSA"],[3,"DH"],[3,"CipherBits"],[4,"Error"],[4,"SslMethod"],[4,"MaybeSslStream"],[4,"SslError"],[4,"NonblockingSslError"],[4,"OpensslError"],[3,"OpenSslError"],[8,"IntoSsl"],[3,"SslContextOptions"],[3,"SslVerifyMode"],[3,"Mutex"],[3,"Box"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"ParseIntError"],[3,"ParseFloatError"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[4,"ParseError"],[8,"Error"],[3,"EscapeDefault"],[3,"Wrapping"],[4,"LocalKeyState"],[3,"LocalKey"],[3,"ScopedKey"],[3,"Builder"],[3,"Thread"],[3,"JoinHandle"],[3,"RawBucket"],[3,"Bucket"],[3,"SafeHash"],[3,"FullBucket"],[3,"EmptyBucket"],[4,"BucketState"],[3,"GapThenFull"],[3,"RawTable"],[3,"RawBuckets"],[3,"RevMoveBuckets"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"DefaultResizePolicy"],[3,"HashMap"],[3,"Iter"],[3,"Keys"],[3,"Values"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[4,"Entry"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"RandomState"],[3,"HashSet"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Union"],[3,"DefaultState"],[3,"BinaryHeap"],[3,"Hole"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Vec"],[3,"Iter"],[3,"IntoIter"],[3,"Rawlink"],[3,"LinkedList"],[3,"IterMut"],[3,"FrontPlace"],[3,"BackPlace"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"DynamicLibrary"],[3,"Vars"],[3,"VarsOs"],[4,"VarError"],[3,"SplitPaths"],[3,"JoinPathsError"],[3,"Args"],[3,"ArgsOs"],[3,"CString"],[3,"CStr"],[3,"NulError"],[3,"IntoStringError"],[3,"Error"],[3,"OsString"],[3,"OsStr"],[4,"Cow"],[3,"String"],[3,"Metadata"],[3,"OpenOptions"],[3,"Permissions"],[3,"FileType"],[3,"File"],[3,"ReadDir"],[3,"DirEntry"],[3,"WalkDir"],[3,"DirBuilder"],[3,"BufReader"],[3,"IntoInnerError"],[3,"BufWriter"],[3,"LineWriter"],[3,"Cursor"],[3,"Custom"],[4,"ErrorKind"],[4,"Repr"],[3,"Lazy"],[3,"Empty"],[3,"Repeat"],[3,"Sink"],[3,"StdinRaw"],[3,"StdoutRaw"],[3,"StderrRaw"],[4,"Maybe"],[3,"Stdin"],[3,"StdinLock"],[3,"Stdout"],[3,"StdoutLock"],[3,"Stderr"],[3,"StderrLock"],[4,"SeekFrom"],[3,"Broadcast"],[3,"Chain"],[3,"Take"],[3,"Tee"],[3,"Bytes"],[4,"CharsError"],[3,"Chars"],[3,"Split"],[3,"Lines"],[4,"IpAddr"],[4,"Ipv6MulticastScope"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[4,"SocketAddr"],[3,"SocketAddrV4"],[3,"SocketAddrV6"],[3,"TcpStream"],[3,"TcpListener"],[3,"Incoming"],[3,"UdpSocket"],[3,"AddrParseError"],[4,"Shutdown"],[3,"LookupHost"],[3,"stat"],[3,"Command"],[3,"ExitStatus"],[3,"Stdio"],[3,"ChildStdin"],[3,"ChildStdout"],[3,"ChildStderr"],[3,"AssertRecoverSafe"],[4,"Prefix"],[4,"State"],[3,"PrefixComponent"],[4,"Component"],[3,"Components"],[3,"Iter"],[3,"PathBuf"],[3,"Path"],[3,"StripPrefixError"],[3,"Display"],[3,"Output"],[3,"Child"],[3,"SignalToken"],[3,"WaitToken"],[3,"Packet"],[4,"StartResult"],[3,"Select"],[3,"Handle"],[3,"Packets"],[3,"Packet"],[3,"Packet"],[4,"Failure"],[3,"Packet"],[3,"Queue"],[3,"Queue"],[3,"SendError"],[3,"RecvError"],[4,"TryRecvError"],[4,"TrySendError"],[3,"Sender"],[3,"SyncSender"],[3,"Receiver"],[3,"Iter"],[3,"IntoIter"],[3,"Barrier"],[3,"BarrierWaitResult"],[3,"WaitTimeoutResult"],[3,"Condvar"],[3,"StaticCondvar"],[3,"StaticMutex"],[3,"MutexGuard"],[3,"Once"],[3,"RwLock"],[3,"StaticRwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"Semaphore"],[3,"SemaphoreGuard"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[4,"Ordering"],[3,"Duration"],[3,"Instant"],[3,"SystemTime"],[3,"SystemTimeError"],[3,"Condvar"],[3,"EHContext"],[3,"DwarfReader"],[4,"_Unwind_Action"],[4,"_Unwind_Reason_Code"],[3,"Mutex"],[3,"LookupHost"],[3,"TcpStream"],[3,"TcpListener"],[3,"UdpSocket"],[3,"Flag"],[3,"PoisonError"],[4,"TryLockError"],[3,"ReentrantMutex"],[3,"ReentrantMutexGuard"],[3,"RWLock"],[3,"StaticKey"],[3,"Key"],[3,"CodePoint"],[3,"Wtf8Buf"],[3,"Wtf8"],[3,"Wtf8CodePoints"],[3,"EncodeWide"],[3,"Weak"],[3,"Condvar"],[3,"FileDesc"],[3,"FileAttr"],[3,"OpenOptions"],[3,"FilePermissions"],[3,"FileType"],[3,"ReadDir"],[3,"Dir"],[3,"DirEntry"],[3,"File"],[3,"DirBuilder"],[3,"Mutex"],[3,"ReentrantMutex"],[3,"Socket"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"sockaddr"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"passwd"],[3,"ifaddrs"],[3,"fd_set"],[3,"tm"],[3,"utsname"],[3,"msghdr"],[3,"fsid_t"],[3,"glob_t"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"mach_timebase_info"],[3,"stat"],[3,"dirent"],[3,"pthread_mutex_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"pthread_rwlock_t"],[3,"siginfo_t"],[3,"sigaction"],[3,"stack_t"],[3,"fstore_t"],[3,"radvisory"],[3,"statvfs"],[3,"Dl_info"],[3,"sockaddr_in"],[3,"statfs"],[3,"kevent"],[3,"kevent64_s"],[3,"dqblk"],[3,"termios"],[3,"flock"],[3,"sf_hdtr"],[3,"pthread_attr_t"],[3,"SplitPaths"],[3,"JoinPathsError"],[3,"Args"],[3,"Env"],[3,"Buf"],[3,"Slice"],[3,"AnonPipe"],[3,"Command"],[3,"ExitStatus"],[3,"Process"],[3,"OsRng"],[3,"RWLock"],[3,"Handler"],[3,"Thread"],[3,"Instant"],[3,"SystemTime"],[3,"Stdin"],[3,"Stdout"],[3,"Stderr"],[4,"Handler"],[3,"PanicInfo"],[3,"Location"],[3,"ReaderRng"],[3,"StdRng"],[3,"ThreadRngReseeder"],[3,"ThreadRng"],[3,"OsRng"],[8,"Any"],[3,"TypeId"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"RefMut"],[3,"BorrowRefMut"],[3,"UnsafeCell"],[4,"Ordering"],[3,"SipHasher"],[3,"BuildHasherDefault"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[4,"ChainState"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"StepBy"],[3,"RangeFrom"],[3,"Range"],[3,"RangeInclusive"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"PhantomData"],[3,"RangeFull"],[3,"RangeTo"],[3,"Unique"],[3,"Shared"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[4,"Option"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"Rc"],[3,"Weak"],[3,"EncodeUtf16"],[4,"SearchStep"],[3,"CharEqSearcher"],[3,"CharEqPattern"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[4,"StrSearcherImpl"],[3,"EmptyNeedle"],[3,"TwoWaySearcher"],[4,"MatchOnly"],[4,"RejectAndMatch"],[3,"Drain"],[3,"IntoIter"],[3,"Drain"],[3,"ToLowercase"],[3,"ToUppercase"],[4,"CaseMappingIter"],[3,"DecodeUtf16"],[3,"SslContext"],[3,"SslCipher"],[3,"Ssl"],[3,"SslStream"],[3,"NonblockingSslStream"],[4,"X509FileType"],[4,"X509ValidationError"],[4,"ExtensionType"],[4,"Extension"],[4,"KeyUsageOption"],[4,"ExtKeyUsageOption"],[4,"AltNameOption"],[3,"SslString"],[3,"X509StoreContext"],[3,"X509Generator"],[3,"X509"],[3,"X509Name"],[3,"X509Req"],[3,"GeneralNames"],[3,"GeneralNamesIter"],[3,"GeneralName"],[4,"Nid"]]};
searchIndex["idna"] = {"doc":"This Rust crate implements IDNA\n[per the WHATWG URL Standard](https://url.spec.whatwg.org/#idna).","items":[[5,"domain_to_ascii","idna","The [domain to ASCII](https://url.spec.whatwg.org/#concept-domain-to-ascii) algorithm.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"domain_to_unicode","","The [domain to Unicode](https://url.spec.whatwg.org/#concept-domain-to-unicode) algorithm.",null,null],[0,"punycode","","Punycode ([RFC 3492](http://tools.ietf.org/html/rfc3492)) implementation.",null,null],[5,"decode_to_string","idna::punycode","Convert Punycode to an Unicode `String`.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"decode","","Convert Punycode to Unicode.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"encode_str","","Convert an Unicode `str` to Punycode.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"encode","","Convert Unicode to Punycode.",null,null],[0,"uts46","idna","[*Unicode IDNA Compatibility Processing*\n(Unicode Technical Standard #46)](http://www.unicode.org/reports/tr46/)",null,null],[3,"Flags","idna::uts46","",null,null],[12,"use_std3_ascii_rules","","",0,null],[12,"transitional_processing","","",0,null],[12,"verify_dns_length","","",0,null],[3,"Errors","","Errors recorded during UTS #46 processing.",null,null],[5,"to_ascii","","http://www.unicode.org/reports/tr46/#ToASCII",null,{"inputs":[{"name":"str"},{"name":"flags"}],"output":{"name":"result"}}],[5,"to_unicode","","http://www.unicode.org/reports/tr46/#ToUnicode",null,null],[11,"clone","","",0,{"inputs":[{"name":"flags"}],"output":{"name":"flags"}}],[11,"fmt","","",1,{"inputs":[{"name":"errors"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Flags"],[3,"Errors"]]};
searchIndex["openssl_sys_extras"] = {"doc":"","items":[[5,"SSL_CTX_set_options","openssl_sys_extras","",null,null],[5,"SSL_CTX_get_options","","",null,null],[5,"SSL_CTX_clear_options","","",null,null],[5,"HMAC_Init_ex","","",null,null],[5,"HMAC_Final","","",null,null],[5,"HMAC_Update","","",null,null],[5,"HMAC_CTX_copy","","",null,null],[5,"BIO_eof","","",null,null],[5,"BIO_set_nbio","","",null,null],[5,"BIO_set_mem_eof_return","","",null,null],[5,"BIO_clear_retry_flags","","",null,null],[5,"BIO_set_retry_read","","",null,null],[5,"BIO_set_retry_write","","",null,null],[5,"BIO_flush","","",null,null],[5,"SSL_CTX_set_options_shim","","",null,null],[5,"SSL_CTX_get_options_shim","","",null,null],[5,"SSL_CTX_clear_options_shim","","",null,null],[5,"SSL_CTX_add_extra_chain_cert","","",null,null],[5,"SSL_CTX_set_read_ahead","","",null,null],[5,"SSL_set_tlsext_host_name","","",null,null],[5,"SSL_CTX_set_tmp_dh","","",null,null],[5,"X509_get_extensions","","",null,null],[5,"SSL_CTX_set_tlsext_servername_callback","","",null,null],[5,"SSL_CTX_set_tlsext_servername_arg","","",null,null],[17,"SSL_OP_MICROSOFT_SESS_ID_BUG","","",null,null],[17,"SSL_OP_NETSCAPE_CHALLENGE_BUG","","",null,null],[17,"SSL_OP_LEGACY_SERVER_CONNECT","","",null,null],[17,"SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG","","",null,null],[17,"SSL_OP_TLSEXT_PADDING","","",null,null],[17,"SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER","","",null,null],[17,"SSL_OP_SAFARI_ECDHE_ECDSA_BUG","","",null,null],[17,"SSL_OP_SSLEAY_080_CLIENT_DH_BUG","","",null,null],[17,"SSL_OP_TLS_D5_BUG","","",null,null],[17,"SSL_OP_TLS_BLOCK_PADDING_BUG","","",null,null],[17,"SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS","","",null,null],[17,"SSL_OP_NO_QUERY_MTU","","",null,null],[17,"SSL_OP_COOKIE_EXCHANGE","","",null,null],[17,"SSL_OP_NO_TICKET","","",null,null],[17,"SSL_OP_CISCO_ANYCONNECT","","",null,null],[17,"SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION","","",null,null],[17,"SSL_OP_NO_COMPRESSION","","",null,null],[17,"SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION","","",null,null],[17,"SSL_OP_SINGLE_ECDH_USE","","",null,null],[17,"SSL_OP_SINGLE_DH_USE","","",null,null],[17,"SSL_OP_CIPHER_SERVER_PREFERENCE","","",null,null],[17,"SSL_OP_TLS_ROLLBACK_BUG","","",null,null],[17,"SSL_OP_NO_SSLv2","","",null,null],[17,"SSL_OP_NO_SSLv3","","",null,null],[17,"SSL_OP_NO_DTLSv1","","",null,null],[17,"SSL_OP_NO_TLSv1","","",null,null],[17,"SSL_OP_NO_DTLSv1_2","","",null,null],[17,"SSL_OP_NO_TLSv1_2","","",null,null],[17,"SSL_OP_NO_TLSv1_1","","",null,null],[17,"SSL_OP_NETSCAPE_CA_DN_BUG","","",null,null],[17,"SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG","","",null,null],[17,"SSL_OP_CRYPTOPRO_TLSEXT_BUG","","",null,null],[17,"SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG","","",null,null],[17,"SSL_OP_MSIE_SSLV2_RSA_PADDING","","",null,null],[17,"SSL_OP_PKCS1_CHECK_1","","",null,null],[17,"SSL_OP_PKCS1_CHECK_2","","",null,null],[17,"SSL_OP_EPHEMERAL_RSA","","",null,null]],"paths":[]};
searchIndex["time"] = {"doc":"Simple time handling.","items":[[3,"Duration","time","ISO 8601 time duration with nanosecond precision.\nThis also allows for the negative duration; see individual methods for details.",null,null],[3,"OutOfRangeError","","Represents error when converting `Duration` to/from a standard library\nimplementation",null,null],[3,"Timespec","","A record specifying a time value in seconds and nanoseconds, where\nnanoseconds represent the offset from the given second.",null,null],[12,"sec","","",0,null],[12,"nsec","","",0,null],[3,"PreciseTime","","An opaque structure representing a moment in time.",null,null],[3,"SteadyTime","","A structure representing a moment in time.",null,null],[3,"Tm","","Holds a calendar date and time broken down into its components (year, month,\nday, and so on), also called a broken-down time value.",null,null],[12,"tm_sec","","Seconds after the minute - [0, 60]",1,null],[12,"tm_min","","Minutes after the hour - [0, 59]",1,null],[12,"tm_hour","","Hours after midnight - [0, 23]",1,null],[12,"tm_mday","","Day of the month - [1, 31]",1,null],[12,"tm_mon","","Months since January - [0, 11]",1,null],[12,"tm_year","","Years since 1900",1,null],[12,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1,null],[12,"tm_yday","","Days since January 1 - [0, 365]",1,null],[12,"tm_isdst","","Daylight Saving Time flag.",1,null],[12,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time\nvalue, including any adjustment for Daylight Saving Time. This is the\nnumber of seconds east of UTC. For example, for U.S. Pacific Daylight\nTime, the value is -7*60*60 = -25200.",1,null],[12,"tm_nsec","","Nanoseconds after the second - [0, 10&lt;sup&gt;9&lt;/sup&gt; - 1]",1,null],[3,"TmFmt","","A wrapper around a `Tm` and format string that implements Display.",null,null],[4,"ParseError","","",null,null],[13,"InvalidSecond","","",2,null],[13,"InvalidMinute","","",2,null],[13,"InvalidHour","","",2,null],[13,"InvalidDay","","",2,null],[13,"InvalidMonth","","",2,null],[13,"InvalidYear","","",2,null],[13,"InvalidDayOfWeek","","",2,null],[13,"InvalidDayOfMonth","","",2,null],[13,"InvalidDayOfYear","","",2,null],[13,"InvalidZoneOffset","","",2,null],[13,"InvalidTime","","",2,null],[13,"InvalidSecondsSinceEpoch","","",2,null],[13,"MissingFormatConverter","","",2,null],[13,"InvalidFormatSpecifier","","",2,null],[13,"UnexpectedCharacter","","",2,null],[5,"strptime","","Parses the time from the string according to the format string.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[5,"get_time","","Returns the current time as a `timespec` containing the seconds and\nnanoseconds since 1970-01-01T00:00:00Z.",null,{"inputs":[],"output":{"name":"timespec"}}],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter\nin nanoseconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter\nin seconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"f64"}}],[5,"tzset","","",null,{"inputs":[],"output":null}],[5,"empty_tm","","",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at_utc","","Returns the specified time in UTC",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now_utc","","Returns the current time in UTC",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at","","Returns the specified time in the local timezone",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now","","Returns the current time in the local timezone",null,{"inputs":[],"output":{"name":"tm"}}],[5,"strftime","","Formats the time according to the format string.",null,{"inputs":[{"name":"str"},{"name":"tm"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"tmfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"weeks","","Makes a new `Duration` with given number of weeks.\nEquivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days.\nEquivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours.\nEquivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes.\nEquivalent to `Duration::seconds(minutes * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds.\nPanics when the duration is more than `i64::MAX` milliseconds\nor less than `i64::MIN` milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the\nclosure.",4,{"inputs":[{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_days","","Returns the total number of whole days in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_hours","","Returns the total number of whole hours in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration,\nor `None` on overflow (exceeding 2^63 microseconds in either direction).",4,{"inputs":[{"name":"duration"}],"output":{"name":"option"}}],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration,\nor `None` on overflow (exceeding 2^63 nanoseconds in either direction).",4,{"inputs":[{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",4,{"inputs":[{"name":"duration"}],"output":{"name":"bool"}}],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",4,{"inputs":[{"name":"stdduration"}],"output":{"name":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",4,{"inputs":[{"name":"duration"}],"output":{"name":"result"}}],[11,"neg","","",4,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"add","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"mul","","",4,{"inputs":[{"name":"duration"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"div","","",4,{"inputs":[{"name":"duration"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"fmt","","",4,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"outofrangeerror"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"outofrangeerror"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"outofrangeerror"}],"output":{"name":"outofrangeerror"}}],[11,"fmt","","",5,{"inputs":[{"name":"outofrangeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"outofrangeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"outofrangeerror"}],"output":{"name":"str"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"timespec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"new","","",0,{"inputs":[{"name":"i64"},{"name":"i32"}],"output":{"name":"timespec"}}],[11,"add","","",0,{"inputs":[{"name":"timespec"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"timespec"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"duration"}}],[11,"clone","","",6,{"inputs":[{"name":"precisetime"}],"output":{"name":"precisetime"}}],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",6,{"inputs":[],"output":{"name":"precisetime"}}],[11,"to","","Returns a `Duration` representing the span of time from the value of\n`self` to the value of `later`.",6,{"inputs":[{"name":"precisetime"},{"name":"precisetime"}],"output":{"name":"duration"}}],[11,"fmt","","",7,{"inputs":[{"name":"steadytime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"cmp","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"steadytime"}],"output":{"name":"steadytime"}}],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",7,{"inputs":[],"output":{"name":"steadytime"}}],[11,"fmt","","",7,{"inputs":[{"name":"steadytime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sub","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"duration"}}],[11,"sub","","",7,{"inputs":[{"name":"steadytime"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"add","","",7,{"inputs":[{"name":"steadytime"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"hash","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"tm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"add","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"tm"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"tm"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"duration"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"ordering"}}],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",1,{"inputs":[{"name":"tm"}],"output":{"name":"timespec"}}],[11,"to_local","","Convert time to the local timezone",1,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"to_utc","","Convert time to the UTC",1,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC, in the local timezone.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"strftime","","Formats the time according to the format string.",1,{"inputs":[{"name":"tm"},{"name":"str"}],"output":{"name":"result"}}],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is\ncompatible with ISO 8601.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"clone","","",2,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"fmt","","",2,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"parseerror"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"tmfmt"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Timespec"],[3,"Tm"],[4,"ParseError"],[3,"TmFmt"],[3,"Duration"],[3,"OutOfRangeError"],[3,"PreciseTime"],[3,"SteadyTime"]]};
searchIndex["solicit"] = {"doc":"","items":[[0,"http","solicit","The module implements the framing layer of HTTP/2 and exposes an API for using it.",null,null],[3,"Response","solicit::http","A struct representing the full raw response received on an HTTP/2 connection.",null,null],[12,"stream_id","","The ID of the stream to which the response is associated. HTTP/1.1 does\nnot really have an equivalent to this.",0,null],[12,"headers","","Exposes *all* the raw response headers, including the meta-headers.\n(For now the only meta header allowed in HTTP/2 responses is the\n`:status`.)",0,null],[12,"body","","The full body of the response as an uninterpreted sequence of bytes.",0,null],[3,"Request","","A struct representing a full HTTP/2 request, along with the full body, as a\nsequence of bytes.",null,null],[12,"stream_id","","",1,null],[12,"headers","","",1,null],[12,"body","","",1,null],[4,"HttpError","","An enum representing errors that can arise when performing operations\ninvolving an HTTP/2 connection.",null,null],[13,"IoError","","",2,null],[13,"InvalidFrame","","",2,null],[13,"CompressionError","","",2,null],[13,"UnknownStreamId","","",2,null],[13,"UnableToConnect","","",2,null],[13,"MalformedResponse","","",2,null],[13,"Other","","",2,null],[4,"HttpScheme","","An enum representing the two possible HTTP schemes.",null,null],[13,"Http","","The variant corresponding to `http://`",3,null],[13,"Https","","The variant corresponding to `https://`",3,null],[0,"frame","","The module contains the implementation of HTTP/2 frames.",null,null],[3,"RawFrame","solicit::http::frame","A struct that defines the format of the raw HTTP/2 frame, i.e. the frame\nas it is read from the wire.",null,null],[5,"unpack_header","","Deconstructs a `FrameHeader` into its corresponding 4 components,\nrepresented as a 4-tuple: `(length, frame_type, flags, stream_id)`.",null,{"inputs":[{"name":"frameheaderbuffer"}],"output":{"name":"frameheader"}}],[5,"pack_header","","Constructs a buffer of 9 bytes that represents the given `FrameHeader`.",null,{"inputs":[{"name":"frameheader"}],"output":{"name":"frameheaderbuffer"}}],[0,"data","","The module contains the implementation of the `DATA` frame and associated flags.",null,null],[3,"DataFrame","solicit::http::frame::data","A struct representing the DATA frames of HTTP/2, as defined in the HTTP/2\nspec, section 6.1.",null,null],[12,"data","","The data found in the frame as an opaque byte sequence. It never\nincludes padding bytes.",4,null],[4,"DataFlag","","An enum representing the flags that a `DataFrame` can have.\nThe integer representation associated to each variant is that flag&#39;s\nbitmask.",null,null],[13,"EndStream","","",5,null],[13,"Padded","","",5,null],[11,"clone","","",5,{"inputs":[{"name":"dataflag"}],"output":{"name":"dataflag"}}],[11,"eq","","",5,{"inputs":[{"name":"dataflag"},{"name":"dataflag"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"dataflag"},{"name":"dataflag"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"dataflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bitmask","","",5,{"inputs":[{"name":"dataflag"}],"output":{"name":"u8"}}],[11,"eq","","",4,{"inputs":[{"name":"dataframe"},{"name":"dataframe"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"dataframe"},{"name":"dataframe"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"dataframe"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"dataframe"}],"output":{"name":"dataframe"}}],[11,"new","","Creates a new empty `DataFrame`, associated to the stream with the\ngiven ID.",4,{"inputs":[{"name":"streamid"}],"output":{"name":"dataframe"}}],[11,"is_padded","","Returns `true` if the DATA frame is padded, otherwise false.",4,{"inputs":[{"name":"dataframe"}],"output":{"name":"bool"}}],[11,"is_end_of_stream","","Returns whther this frame ends the stream it is associated with.",4,{"inputs":[{"name":"dataframe"}],"output":{"name":"bool"}}],[11,"set_padding","","Sets the number of bytes that should be used as padding for this\nframe.",4,{"inputs":[{"name":"dataframe"},{"name":"u8"}],"output":null}],[11,"from_raw","","Creates a new `DataFrame` from the given `RawFrame` (i.e. header and\npayload), if possible.  Returns `None` if a valid `DataFrame` cannot be\nconstructed from the given `RawFrame`.",4,{"inputs":[{"name":"rawframe"}],"output":{"name":"option"}}],[11,"is_set","","Tests if the given flag is set for the frame.",4,{"inputs":[{"name":"dataframe"},{"name":"dataflag"}],"output":{"name":"bool"}}],[11,"set_flag","","Sets the given flag for the frame.",4,{"inputs":[{"name":"dataframe"},{"name":"dataflag"}],"output":null}],[11,"get_stream_id","","Returns the `StreamId` of the stream to which the frame is associated.",4,{"inputs":[{"name":"dataframe"}],"output":{"name":"streamid"}}],[11,"get_header","","Returns a `FrameHeader` based on the current state of the frame.",4,{"inputs":[{"name":"dataframe"}],"output":{"name":"frameheader"}}],[11,"serialize","","Returns a `Vec` with the serialized representation of the frame.",4,{"inputs":[{"name":"dataframe"}],"output":{"name":"vec"}}],[0,"headers","solicit::http::frame","The module contains the implementation of the `HEADERS` frame and associated flags.",null,null],[3,"StreamDependency","solicit::http::frame::headers","The struct represents the dependency information that can be attached to\na stream and sent within a HEADERS frame (one with the Priority flag set).",null,null],[12,"stream_id","","The ID of the stream that a particular stream depends on",6,null],[12,"weight","","The weight for the stream. The value exposed (and set) here is always\nin the range [0, 255], instead of [1, 256] \\(as defined in section 5.3.2.)\nso that the value fits into a `u8`.",6,null],[12,"is_exclusive","","A flag indicating whether the stream dependency is exclusive.",6,null],[3,"HeadersFrame","","A struct representing the HEADERS frames of HTTP/2, as defined in the\nHTTP/2 spec, section 6.2.",null,null],[12,"header_fragment","","The header fragment bytes stored within the frame.",7,null],[12,"stream_id","","The ID of the stream with which this frame is associated",7,null],[12,"stream_dep","","The stream dependency information, if any.",7,null],[12,"padding_len","","The length of the padding, if any.",7,null],[4,"HeadersFlag","","An enum representing the flags that a `HeadersFrame` can have.\nThe integer representation associated to each variant is that flag&#39;s\nbitmask.",null,null],[13,"EndStream","","",8,null],[13,"EndHeaders","","",8,null],[13,"Padded","","",8,null],[13,"Priority","","",8,null],[11,"clone","","",8,{"inputs":[{"name":"headersflag"}],"output":{"name":"headersflag"}}],[11,"eq","","",8,{"inputs":[{"name":"headersflag"},{"name":"headersflag"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"headersflag"},{"name":"headersflag"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"headersflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bitmask","","",8,{"inputs":[{"name":"headersflag"}],"output":{"name":"u8"}}],[11,"eq","","",6,{"inputs":[{"name":"streamdependency"},{"name":"streamdependency"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"streamdependency"},{"name":"streamdependency"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"streamdependency"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"streamdependency"}],"output":{"name":"streamdependency"}}],[11,"new","","Creates a new `StreamDependency` with the given stream ID, weight, and\nexclusivity.",6,{"inputs":[{"name":"streamid"},{"name":"u8"},{"name":"bool"}],"output":{"name":"streamdependency"}}],[11,"parse","","Parses the first 5 bytes in the buffer as a `StreamDependency`.\n(Each 5-byte sequence is always decodable into a stream dependency\nstructure).",6,null],[11,"serialize","","Serializes the `StreamDependency` into a 5-byte buffer representing the\ndependency description, as described in section 6.2. of the HTTP/2\nspec:",6,null],[11,"eq","","",7,{"inputs":[{"name":"headersframe"},{"name":"headersframe"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"headersframe"},{"name":"headersframe"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"headersframe"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"headersframe"}],"output":{"name":"headersframe"}}],[11,"new","","Creates a new `HeadersFrame` with the given header fragment and stream\nID. No padding, no stream dependency, and no flags are set.",7,{"inputs":[{"name":"vec"},{"name":"streamid"}],"output":{"name":"headersframe"}}],[11,"with_dependency","","Creates a new `HeadersFrame` with the given header fragment, stream ID\nand stream dependency information. No padding and no flags are set.",7,{"inputs":[{"name":"vec"},{"name":"streamid"},{"name":"streamdependency"}],"output":{"name":"headersframe"}}],[11,"is_headers_end","","Returns whether this frame ends the headers. If not, there MUST be a\nnumber of follow up CONTINUATION frames that send the rest of the\nheader data.",7,{"inputs":[{"name":"headersframe"}],"output":{"name":"bool"}}],[11,"is_end_of_stream","","Returns whther this frame ends the stream it is associated with.",7,{"inputs":[{"name":"headersframe"}],"output":{"name":"bool"}}],[11,"set_padding","","Sets the padding length for the frame, as well as the corresponding\nPadded flag.",7,{"inputs":[{"name":"headersframe"},{"name":"u8"}],"output":null}],[11,"from_raw","","Creates a new `HeadersFrame` with the given `RawFrame` (i.e. header and\npayload), if possible.",7,{"inputs":[{"name":"rawframe"}],"output":{"name":"option"}}],[11,"is_set","","Tests if the given flag is set for the frame.",7,{"inputs":[{"name":"headersframe"},{"name":"headersflag"}],"output":{"name":"bool"}}],[11,"get_stream_id","","Returns the `StreamId` of the stream to which the frame is associated.",7,{"inputs":[{"name":"headersframe"}],"output":{"name":"streamid"}}],[11,"get_header","","Returns a `FrameHeader` based on the current state of the `Frame`.",7,{"inputs":[{"name":"headersframe"}],"output":{"name":"frameheader"}}],[11,"set_flag","","Sets the given flag for the frame.",7,{"inputs":[{"name":"headersframe"},{"name":"headersflag"}],"output":null}],[11,"serialize","","Returns a `Vec` with the serialized representation of the frame.",7,{"inputs":[{"name":"headersframe"}],"output":{"name":"vec"}}],[0,"settings","solicit::http::frame","The module contains the implementation of the `SETTINGS` frame and associated flags.",null,null],[3,"SettingsFrame","solicit::http::frame::settings","A struct representing the SETTINGS frames of HTTP/2, as defined in the\nHTTP/2 spec, section 6.5.",null,null],[12,"settings","","Contains all the settings that are currently set in the frame. It is\nsafe to access this field (to read, add, or remove settings), even\nthough a helper method `add_setting` exists.",9,null],[4,"HttpSetting","","An enum that lists all valid settings that can be sent in a SETTINGS\nframe.",null,null],[13,"HeaderTableSize","","",10,null],[13,"EnablePush","","",10,null],[13,"MaxConcurrentStreams","","",10,null],[13,"InitialWindowSize","","",10,null],[13,"MaxFrameSize","","",10,null],[13,"MaxHeaderListSize","","",10,null],[4,"SettingsFlag","","An enum representing the flags that a `SettingsFrame` can have.\nThe integer representation associated to each variant is that flag&#39;s\nbitmask.",null,null],[13,"Ack","","",11,null],[11,"clone","","",10,{"inputs":[{"name":"httpsetting"}],"output":{"name":"httpsetting"}}],[11,"eq","","",10,{"inputs":[{"name":"httpsetting"},{"name":"httpsetting"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"httpsetting"},{"name":"httpsetting"}],"output":{"name":"bool"}}],[11,"fmt","","",10,{"inputs":[{"name":"httpsetting"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_id","","Creates a new `HttpSetting` with the correct variant corresponding to\nthe given setting id, based on the settings IDs defined in section\n6.5.2.",10,{"inputs":[{"name":"u16"},{"name":"u32"}],"output":{"name":"option"}}],[11,"get_id","","Returns the setting ID as an unsigned 16 bit integer, as defined in\nsection 6.5.2.",10,{"inputs":[{"name":"httpsetting"}],"output":{"name":"u16"}}],[11,"get_val","","Gets the setting value by unpacking it from the wrapped `u32`.",10,{"inputs":[{"name":"httpsetting"}],"output":{"name":"u32"}}],[11,"clone","","",11,{"inputs":[{"name":"settingsflag"}],"output":{"name":"settingsflag"}}],[11,"eq","","",11,{"inputs":[{"name":"settingsflag"},{"name":"settingsflag"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"settingsflag"},{"name":"settingsflag"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"settingsflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bitmask","","",11,{"inputs":[{"name":"settingsflag"}],"output":{"name":"u8"}}],[11,"eq","","",9,{"inputs":[{"name":"settingsframe"},{"name":"settingsframe"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"settingsframe"},{"name":"settingsframe"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"settingsframe"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"settingsframe"}],"output":{"name":"settingsframe"}}],[11,"new","","Creates a new `SettingsFrame`",9,{"inputs":[],"output":{"name":"settingsframe"}}],[11,"new_ack","","A convenience constructor that returns a `SettingsFrame` with the ACK\nflag already set and no settings.",9,{"inputs":[],"output":{"name":"settingsframe"}}],[11,"add_setting","","Adds the given setting to the frame.",9,{"inputs":[{"name":"settingsframe"},{"name":"httpsetting"}],"output":null}],[11,"set_ack","","Sets the ACK flag for the frame. This method is just a convenience\nmethod for calling `frame.set_flag(SettingsFlag::Ack)`.",9,{"inputs":[{"name":"settingsframe"}],"output":null}],[11,"is_ack","","Checks whether the `SettingsFrame` has an ACK attached to it.",9,{"inputs":[{"name":"settingsframe"}],"output":{"name":"bool"}}],[11,"from_raw","","Creates a new `SettingsFrame` with the given `RawFrame` (i.e. header and\npayload), if possible.",9,{"inputs":[{"name":"rawframe"}],"output":{"name":"option"}}],[11,"is_set","","Tests if the given flag is set for the frame.",9,{"inputs":[{"name":"settingsframe"},{"name":"settingsflag"}],"output":{"name":"bool"}}],[11,"get_stream_id","","Returns the `StreamId` of the stream to which the frame is associated.",9,{"inputs":[{"name":"settingsframe"}],"output":{"name":"streamid"}}],[11,"get_header","","Returns a `FrameHeader` based on the current state of the `Frame`.",9,{"inputs":[{"name":"settingsframe"}],"output":{"name":"frameheader"}}],[11,"set_flag","","Sets the given flag for the frame.",9,{"inputs":[{"name":"settingsframe"},{"name":"settingsflag"}],"output":null}],[11,"serialize","","Returns a `Vec` with the serialized representation of the frame.",9,{"inputs":[{"name":"settingsframe"}],"output":{"name":"vec"}}],[6,"FrameHeaderBuffer","solicit::http::frame","An alias for the 9-byte buffer that each HTTP/2 frame header must be stored\nin.",null,null],[6,"FrameHeader","","An alias for the 4-tuple representing the components of each HTTP/2 frame\nheader.",null,null],[8,"Flag","","A trait that all HTTP/2 frame header flags need to implement.",null,null],[10,"bitmask","","Returns a bit mask that represents the flag.",12,{"inputs":[{"name":"flag"}],"output":{"name":"u8"}}],[8,"Frame","","A trait that all HTTP/2 frame structs need to implement.",null,null],[16,"FlagType","","The type that represents the flags that the particular `Frame` can take.\nThis makes sure that only valid `Flag`s are used with each `Frame`.",13,null],[10,"from_raw","","Creates a new `Frame` from the given `RawFrame` (i.e. header and\npayload), if possible.",13,{"inputs":[{"name":"rawframe"}],"output":{"name":"option"}}],[10,"is_set","","Tests if the given flag is set for the frame.",13,{"inputs":[{"name":"frame"},{"name":"flagtype"}],"output":{"name":"bool"}}],[10,"get_stream_id","","Returns the `StreamId` of the stream to which the frame is associated",13,{"inputs":[{"name":"frame"}],"output":{"name":"streamid"}}],[10,"get_header","","Returns a `FrameHeader` based on the current state of the `Frame`.",13,{"inputs":[{"name":"frame"}],"output":{"name":"frameheader"}}],[10,"set_flag","","Sets the given flag for the frame.",13,{"inputs":[{"name":"frame"},{"name":"flagtype"}],"output":null}],[10,"serialize","","Returns a `Vec` with the serialized representation of the frame.",13,{"inputs":[{"name":"frame"}],"output":{"name":"vec"}}],[11,"eq","","",14,{"inputs":[{"name":"rawframe"},{"name":"rawframe"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"rawframe"},{"name":"rawframe"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"rawframe"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"rawframe"}],"output":{"name":"rawframe"}}],[11,"new","","Creates a new `RawFrame` with the given `FrameHeader`. The payload is\nleft empty.",14,{"inputs":[{"name":"frameheader"}],"output":{"name":"rawframe"}}],[11,"with_payload","","Creates a new `RawFrame` with the given header and payload.\nDoes not do any validation to determine whether the frame is in a correct\nstate as constructed.",14,{"inputs":[{"name":"frameheader"},{"name":"vec"}],"output":{"name":"rawframe"}}],[11,"from_buf","","Creates a new `RawFrame` by parsing the given buffer.",14,null],[11,"serialize","","Returns a `Vec` of bytes representing the serialized (on-the-wire)\nrepresentation of this raw frame.",14,{"inputs":[{"name":"rawframe"}],"output":{"name":"vec"}}],[11,"header","","Returns a `FrameHeader` instance corresponding to the headers of the\n`RawFrame`.",14,{"inputs":[{"name":"rawframe"}],"output":{"name":"frameheader"}}],[11,"payload","","Returns a slice representing the payload of the `RawFrame`.",14,null],[11,"into","","",14,{"inputs":[{"name":"rawframe"}],"output":{"name":"vec"}}],[11,"from","","",14,{"inputs":[{"name":"vec"}],"output":{"name":"rawframe"}}],[0,"transport","solicit::http","The module contains implementations of the transport layer functionality\nthat HTTP/2 requires. It exposes APIs that allow the HTTP/2 connection to\nuse the transport layer without requiring it to know which exact\nimplementation they are using (e.g. a clear-text TCP connection, a TLS\nprotected connection, or even a mock implementation).",null,null],[8,"TransportStream","solicit::http::transport","A trait that any struct that wants to provide the transport layer for\nHTTP/2 needs to implement.",null,null],[11,"read_exact","","A convenience method that performs as many `read` calls on the\nunderlying `Read` implementation as it takes to fill the given buffer.",15,null],[10,"try_split","","Attempts to split the `TransportStream` instance into a new independently\nowned handle to the same underlying stream.",15,{"inputs":[{"name":"transportstream"}],"output":{"name":"result"}}],[10,"close","","Attempts to shutdown both ends of the transport stream.",15,{"inputs":[{"name":"transportstream"}],"output":{"name":"result"}}],[11,"try_split","std::net::tcp","",16,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[11,"close","","",16,{"inputs":[{"name":"tcpstream"}],"output":{"name":"result"}}],[0,"connection","solicit::http","The module contains the implementation of an HTTP/2 connection.",null,null],[3,"HttpConnection","solicit::http::connection","The struct implements the HTTP/2 connection level logic.",null,null],[12,"receiver","","The instance handling the reading of frames.",17,null],[12,"sender","","The instance handling the writing of frames.",17,null],[12,"scheme","","The scheme of the connection",17,null],[3,"DataChunk","","The struct represents a chunk of data that should be sent to the peer on a particular stream.",null,null],[12,"data","","The data that should be sent.",18,null],[12,"stream_id","","The ID of the stream on which the data should be sent.",18,null],[12,"end_stream","","Whether the data chunk will also end the stream.",18,null],[4,"HttpFrame","","An enum representing all frame variants that can be returned by an\n`HttpConnection`.",null,null],[13,"DataFrame","","",19,null],[13,"HeadersFrame","","",19,null],[13,"SettingsFrame","","",19,null],[13,"UnknownFrame","","",19,null],[4,"SendStatus","","The enum represents the success status of the operation of sending a next data chunk on an\nHTTP/2 connection.",null,null],[13,"Sent","","Indicates that a DATA frame was successfully sent",20,null],[13,"Nothing","","Indicates that nothing was sent, but that no errors occurred.",20,null],[4,"EndStream","","An enum indicating whether the `HttpConnection` send operation should end the stream.",null,null],[13,"Yes","","The stream should be closed",21,null],[13,"No","","The stream should still be kept open",21,null],[8,"SendFrame","","A trait that should be implemented by types that can provide the functionality\nof sending HTTP/2 frames.",null,null],[10,"send_raw_frame","","Sends the given raw frame.",22,{"inputs":[{"name":"sendframe"},{"name":"rawframe"}],"output":{"name":"httpresult"}}],[11,"send_frame","","Sends the given concrete frame.",22,{"inputs":[{"name":"sendframe"},{"name":"f"}],"output":{"name":"httpresult"}}],[8,"ReceiveFrame","","A trait that should be implemented by types that can provide the functionality\nof receiving HTTP/2 frames.",null,null],[10,"recv_frame","","Return a new `HttpFrame` instance. Unknown frames can be wrapped in the\n`HttpFrame::UnknownFrame` variant (i.e. their `RawFrame` representation).",23,{"inputs":[{"name":"receiveframe"}],"output":{"name":"httpresult"}}],[11,"eq","","",19,{"inputs":[{"name":"httpframe"},{"name":"httpframe"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"httpframe"},{"name":"httpframe"}],"output":{"name":"bool"}}],[11,"fmt","","",19,{"inputs":[{"name":"httpframe"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"httpframe"}],"output":{"name":"httpframe"}}],[11,"from_raw","","",19,{"inputs":[{"name":"rawframe"}],"output":{"name":"httpresult"}}],[11,"fmt","","",20,{"inputs":[{"name":"sendstatus"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"sendstatus"},{"name":"sendstatus"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"sendstatus"},{"name":"sendstatus"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"sendstatus"}],"output":{"name":"sendstatus"}}],[11,"new","","Creates a new `DataChunk`.",18,{"inputs":[{"name":"cow"},{"name":"streamid"},{"name":"endstream"}],"output":{"name":"datachunk"}}],[11,"new_borrowed","","Creates a new `DataChunk` from a borrowed slice. This method should become obsolete if we\ncan take an `Into&lt;Cow&lt;_, _&gt;&gt;` without using unstable features.",18,{"inputs":[{"name":"d"},{"name":"streamid"},{"name":"endstream"}],"output":{"name":"datachunk"}}],[11,"fmt","","",21,{"inputs":[{"name":"endstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"endstream"},{"name":"endstream"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"endstream"},{"name":"endstream"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"endstream"}],"output":{"name":"endstream"}}],[11,"new","","Creates a new `HttpConnection` that will use the given sender and receiver instances\nfor writing and reading frames, respectively.",17,{"inputs":[{"name":"s"},{"name":"r"},{"name":"httpscheme"}],"output":{"name":"httpconnection"}}],[11,"with_stream","","Creates a new `HttpConnection` that will use the given stream as its\nunderlying transport layer.",17,{"inputs":[{"name":"ts"},{"name":"httpscheme"}],"output":{"name":"httpconnection"}}],[11,"send_headers","","A helper function that inserts the frames required to send the given headers onto the\n`SendFrame` stream.",17,{"inputs":[{"name":"httpconnection"},{"name":"h"},{"name":"streamid"},{"name":"endstream"}],"output":{"name":"httpresult"}}],[11,"send_data","","A helper function that inserts a frame representing the given data into the `SendFrame`\nstream.",17,{"inputs":[{"name":"httpconnection"},{"name":"datachunk"}],"output":{"name":"httpresult"}}],[11,"send_next_data","","Sends the chunk of data provided by the given `DataPrioritizer`.",17,{"inputs":[{"name":"httpconnection"},{"name":"p"}],"output":{"name":"httpresult"}}],[11,"expect_settings","","The method processes the next incoming frame, expecting it to be a SETTINGS frame.\nAdditionally, the frame cannot be an ACK settings frame, but rather it should contain the\npeer&#39;s settings.",17,{"inputs":[{"name":"httpconnection"},{"name":"sess"}],"output":{"name":"httpresult"}}],[11,"handle_next_frame","","Handles the next frame incoming on the `ReceiveFrame` instance.",17,{"inputs":[{"name":"httpconnection"},{"name":"sess"}],"output":{"name":"httpresult"}}],[0,"session","solicit::http","Defines the interface for the session-level management of HTTP/2\ncommunication. This is effectively an API that allows hooking into an\nHTTP/2 connection in order to handle events arising on the connection.",null,null],[3,"StreamIter","solicit::http::session","A newtype for an iterator over `Stream`s saved in a `SessionState`.",null,null],[3,"DefaultSessionState","","An implementation of the `SessionState` trait that tracks the active streams in a `HashMap`,\nmapping the stream ID to the concrete `Stream` instance.",null,null],[3,"DefaultStream","","An implementation of the `Stream` trait that saves all headers and data\nin memory.",null,null],[12,"stream_id","","The ID of the stream",24,null],[12,"headers","","The headers associated with the stream (i.e. the response headers)",24,null],[12,"body","","The body of the stream (i.e. the response body)",24,null],[12,"state","","The current stream state.",24,null],[4,"StreamState","","The enum represents all the states that an HTTP/2 stream can be found in.",null,null],[13,"Idle","","",25,null],[13,"ReservedLocal","","",25,null],[13,"ReservedRemote","","",25,null],[13,"Open","","",25,null],[13,"HalfClosedRemote","","",25,null],[13,"HalfClosedLocal","","",25,null],[13,"Closed","","",25,null],[4,"StreamDataError","","The enum represents errors that can be returned from the `Stream::get_data_chunk` method.",null,null],[13,"Closed","","Indicates that the stream cannot provide any data, since it is closed for further writes\nfrom the peer&#39;s side.",26,null],[13,"Other","","A different error while trying to obtain the data chunk. Wraps a boxed `Error` impl.",26,null],[4,"StreamDataChunk","","The enum represents the successful completion of the `Stream::get_data_chunk` method.",null,null],[13,"Chunk","","A data chunk of the given size, after which more chunks can follow.",27,null],[13,"Last","","The chunk was the last one that the stream will ever write.",27,null],[13,"Unavailable","","No data currently available, but the stream isn&#39;t closed yet",27,null],[8,"Session","","A trait that defines the interface between an `HttpConnection` and the higher-levels that use\nit. Essentially, it allows the `HttpConnection` to pass information onto those higher levels\nthrough a well-defined interface.",null,null],[10,"new_data_chunk","","Notifies the `Session` that a new data chunk has arrived on the\nconnection for a particular stream. Only the raw data is passed\nto the callback (all padding is already discarded by the connection).",28,null],[10,"new_headers","","Notifies the `Session` that headers have arrived for a particular\nstream. The given list of headers is already decoded by the connection.",28,{"inputs":[{"name":"session"},{"name":"streamid"},{"name":"vec"}],"output":null}],[10,"end_of_stream","","Notifies the `Session` that a particular stream got closed by the peer.",28,{"inputs":[{"name":"session"},{"name":"streamid"}],"output":null}],[8,"SessionState","","A trait defining a set of methods for accessing and influencing an HTTP/2 session&#39;s state.",null,null],[16,"Stream","","The type of the `Stream` that the `SessionState` manages.",29,null],[10,"insert_stream","","Inserts the given `Stream` into the session&#39;s state, starting to track it.",29,{"inputs":[{"name":"sessionstate"},{"name":"stream"}],"output":null}],[10,"get_stream_ref","","Returns a reference to a `Stream` with the given `StreamId`, if it is found in the current\nsession.",29,{"inputs":[{"name":"sessionstate"},{"name":"streamid"}],"output":{"name":"option"}}],[10,"get_stream_mut","","Returns a mutable reference to a `Stream` with the given `StreamId`, if it is found in the\ncurrent session.",29,{"inputs":[{"name":"sessionstate"},{"name":"streamid"}],"output":{"name":"option"}}],[10,"remove_stream","","Removes the stream with the given `StreamId` from the session. If the stream was found in\nthe session, it is returned in the result.",29,{"inputs":[{"name":"sessionstate"},{"name":"streamid"}],"output":{"name":"option"}}],[10,"iter","","Returns an iterator over the streams currently found in the session.",29,{"inputs":[{"name":"sessionstate"}],"output":{"name":"streamiter"}}],[11,"get_closed","","Returns all streams that are closed and tracked by the session state.",29,{"inputs":[{"name":"sessionstate"}],"output":{"name":"vec"}}],[8,"Stream","","A trait representing a single HTTP/2 stream. An HTTP/2 connection multiplexes a number of\nstreams.",null,null],[10,"new","","Create a new stream with the given ID",30,{"inputs":[{"name":"streamid"}],"output":{"name":"self"}}],[10,"new_data_chunk","","Handle a new data chunk that has arrived for the stream.",30,null],[10,"set_headers","","Set headers for a stream. A stream is only allowed to have one set of\nheaders.",30,{"inputs":[{"name":"stream"},{"name":"vec"}],"output":null}],[10,"set_state","","Sets the stream state to the newly provided state.",30,{"inputs":[{"name":"stream"},{"name":"streamstate"}],"output":null}],[10,"get_data_chunk","","Places the next data chunk that should be written onto the stream into the given buffer.",30,null],[10,"id","","Returns the ID of the stream.",30,{"inputs":[{"name":"stream"}],"output":{"name":"streamid"}}],[10,"state","","Returns the current state of the stream.",30,{"inputs":[{"name":"stream"}],"output":{"name":"streamstate"}}],[11,"close","","Transitions the stream state to closed. After this, the stream is considered to be closed\nfor any further reads or writes.",30,{"inputs":[{"name":"stream"}],"output":null}],[11,"close_local","","Updates the `Stream` status to indicate that it is closed locally.",30,{"inputs":[{"name":"stream"}],"output":null}],[11,"close_remote","","Updates the `Stream` status to indicate that it is closed on the remote peer&#39;s side.",30,{"inputs":[{"name":"stream"}],"output":null}],[11,"is_closed","","Returns whether the stream is closed.",30,{"inputs":[{"name":"stream"}],"output":{"name":"bool"}}],[11,"is_closed_local","","Returns whether the stream is closed locally.",30,{"inputs":[{"name":"stream"}],"output":{"name":"bool"}}],[11,"is_closed_remote","","Returns whether the remote peer has closed the stream. This includes a fully closed stream.",30,{"inputs":[{"name":"stream"}],"output":{"name":"bool"}}],[11,"next","","",31,{"inputs":[{"name":"streamiter"}],"output":{"name":"option"}}],[11,"new","","Creates a new `DefaultSessionState` with no known streams.",32,{"inputs":[],"output":{"name":"defaultsessionstate"}}],[11,"insert_stream","","",32,{"inputs":[{"name":"defaultsessionstate"},{"name":"stream"}],"output":null}],[11,"get_stream_ref","","",32,{"inputs":[{"name":"defaultsessionstate"},{"name":"streamid"}],"output":{"name":"option"}}],[11,"get_stream_mut","","",32,{"inputs":[{"name":"defaultsessionstate"},{"name":"streamid"}],"output":{"name":"option"}}],[11,"remove_stream","","",32,{"inputs":[{"name":"defaultsessionstate"},{"name":"streamid"}],"output":{"name":"option"}}],[11,"iter","","",32,{"inputs":[{"name":"defaultsessionstate"}],"output":{"name":"streamiter"}}],[11,"fmt","","",25,{"inputs":[{"name":"streamstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",25,{"inputs":[{"name":"streamstate"},{"name":"streamstate"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"streamstate"},{"name":"streamstate"}],"output":{"name":"bool"}}],[11,"clone","","",25,{"inputs":[{"name":"streamstate"}],"output":{"name":"streamstate"}}],[11,"fmt","","",26,{"inputs":[{"name":"streamdataerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",26,{"inputs":[{"name":"e"}],"output":{"name":"streamdataerror"}}],[11,"fmt","","",27,{"inputs":[{"name":"streamdatachunk"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",27,{"inputs":[{"name":"streamdatachunk"},{"name":"streamdatachunk"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"streamdatachunk"},{"name":"streamdatachunk"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"streamdatachunk"}],"output":{"name":"streamdatachunk"}}],[11,"clone","","",24,{"inputs":[{"name":"defaultstream"}],"output":{"name":"defaultstream"}}],[11,"new","","Create a new `DefaultStream` with the given ID.",24,{"inputs":[{"name":"streamid"}],"output":{"name":"defaultstream"}}],[11,"set_full_data","","Sets the outgoing data of the stream to the given `Vec`.",24,{"inputs":[{"name":"defaultstream"},{"name":"vec"}],"output":null}],[11,"new","","",24,{"inputs":[{"name":"streamid"}],"output":{"name":"defaultstream"}}],[11,"new_data_chunk","","",24,null],[11,"set_headers","","",24,{"inputs":[{"name":"defaultstream"},{"name":"vec"}],"output":null}],[11,"set_state","","",24,{"inputs":[{"name":"defaultstream"},{"name":"streamstate"}],"output":null}],[11,"id","","",24,{"inputs":[{"name":"defaultstream"}],"output":{"name":"streamid"}}],[11,"state","","",24,{"inputs":[{"name":"defaultstream"}],"output":{"name":"streamstate"}}],[11,"get_data_chunk","","",24,null],[0,"priority","solicit::http","The module exposes an API for defining data prioritization strategies.",null,null],[3,"SimplePrioritizer","solicit::http::priority","An implementation of the `DataPrioritizer` trait that is based on finding the first stream from\nthe given `SessionState` instance that can send data and returning this chunk.",null,null],[8,"DataPrioritizer","","A trait that types that want to provide data to an HTTP/2 connection need to implement.",null,null],[10,"get_next_chunk","","Returns the next `DataChunk` that should be sent on the HTTP/2 connection. `None` indicates\nthat currently there was no data that could be sent at that point.",33,{"inputs":[{"name":"dataprioritizer"}],"output":{"name":"httpresult"}}],[11,"new","","Creates a new `SimplePrioritizer` that will use the given state to find stream data that\nshould be sent and use the given buffer to hold the data of the returned chunk.",34,null],[11,"get_next_chunk","","",34,{"inputs":[{"name":"simpleprioritizer"}],"output":{"name":"httpresult"}}],[0,"client","solicit::http","The module contains a number of reusable components for implementing the client side of an\nHTTP/2 connection.",null,null],[3,"ClientStream","solicit::http::client","A convenience wrapper type that represents an established client network transport stream.\nIt wraps the stream itself, the scheme of the protocol to be used, and the remote\nhost name.",null,null],[3,"CleartextConnector","","A struct that establishes a cleartext TCP connection that can be used by an HTTP/2\nconnection. Defaults to using port 80.",null,null],[12,"host","","The host to which the connection should be established",35,null],[12,"port","","The port on which the connection should be established",35,null],[3,"CleartextConnectError","","A newtype wrapping the `io::Error`, as it occurs when attempting to\nestablish an HTTP/2 connection over cleartext TCP (with prior knowledge).",null,null],[3,"RequestStream","","A struct representing a request stream. It provides the headers that are to be sent when\ninitiating the request, as well as a `Stream` instance that handles the received response and\nprovides the request body.",null,null],[12,"headers","","The list of headers that will be sent with the request.",36,null],[12,"stream","","The underlying `Stream` instance, which will handle the response, as well as optionally\nprovide the body of the request.",36,null],[3,"ClientConnection","","The struct extends the `HttpConnection` API with client-specific methods (such as\n`start_request`) and wires the `HttpConnection` to the client `Session` callbacks.",null,null],[12,"state","","The state of the session associated to this client connection. Maintains the status of the\nconnection streams.",37,null],[3,"ClientSession","","An implementation of the `Session` trait specific to handling client HTTP/2 connections.",null,null],[5,"write_preface","","Writes the client preface to the underlying HTTP/2 connection.",null,{"inputs":[{"name":"w"}],"output":{"name":"result"}}],[8,"HttpConnectError","","A marker trait for errors raised by attempting to establish an HTTP/2\nconnection.",null,null],[8,"HttpConnect","","A trait that can be implemented by structs that want to provide the\nfunctionality of establishing network connections for use by HTTP/2 connections.",null,null],[16,"Stream","","The type of the underlying transport stream that the `HttpConnection`s\nproduced by this `HttpConnect` implementation will be based on.",38,null],[16,"Err","","The type of the error that can be produced by trying to establish the\nconnection (i.e. calling the `connect` method).",38,null],[10,"connect","","Establishes a network connection that can be used by HTTP/2 connections.",38,{"inputs":[{"name":"httpconnect"}],"output":{"name":"result"}}],[11,"from","solicit::http","",2,{"inputs":[{"name":"e"}],"output":{"name":"httperror"}}],[11,"new","solicit::http::client","Creates a new `CleartextConnector` that will attempt to establish a connection to the given\nhost on port 80.",35,{"inputs":[{"name":"str"}],"output":{"name":"cleartextconnector"}}],[11,"with_port","","Creates a new `CleartextConnector` that will attempt to establish a connection to the given\nhost on the given port.",35,{"inputs":[{"name":"str"},{"name":"u16"}],"output":{"name":"cleartextconnector"}}],[11,"fmt","","",39,{"inputs":[{"name":"cleartextconnecterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"cleartextconnecterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",39,{"inputs":[{"name":"cleartextconnecterror"}],"output":{"name":"str"}}],[11,"cause","","",39,{"inputs":[{"name":"cleartextconnecterror"}],"output":{"name":"option"}}],[11,"from","","",39,{"inputs":[{"name":"error"}],"output":{"name":"cleartextconnecterror"}}],[11,"connect","","Establishes a cleartext TCP connection based on the host and port.\nIf it is not possible, returns an `HttpError`.",35,{"inputs":[{"name":"cleartextconnector"}],"output":{"name":"result"}}],[11,"with_connection","","Creates a new `ClientConnection` that will use the given `HttpConnection`\nfor all its underlying HTTP/2 communication.",37,{"inputs":[{"name":"httpconnection"},{"name":"state"}],"output":{"name":"clientconnection"}}],[11,"scheme","","Returns the scheme of the underlying `HttpConnection`.",37,{"inputs":[{"name":"clientconnection"}],"output":{"name":"httpscheme"}}],[11,"init","","Performs the initialization of the `ClientConnection`.",37,{"inputs":[{"name":"clientconnection"}],"output":{"name":"httpresult"}}],[11,"start_request","","Starts a new request based on the given `RequestStream`.",37,{"inputs":[{"name":"clientconnection"},{"name":"requeststream"}],"output":{"name":"httpresult"}}],[11,"handle_next_frame","","Fully handles the next incoming frame. Events are passed on to the internal `session`\ninstance.",37,{"inputs":[{"name":"clientconnection"}],"output":{"name":"httpresult"}}],[11,"send_next_data","","Queues a new DATA frame onto the underlying `SendFrame`.",37,{"inputs":[{"name":"clientconnection"}],"output":{"name":"httpresult"}}],[11,"new","","Returns a new `ClientSession` associated to the given state.",40,{"inputs":[{"name":"state"}],"output":{"name":"clientsession"}}],[11,"new_data_chunk","","",40,null],[11,"new_headers","","",40,{"inputs":[{"name":"clientsession"},{"name":"streamid"},{"name":"vec"}],"output":null}],[11,"end_of_stream","","",40,{"inputs":[{"name":"clientsession"},{"name":"streamid"}],"output":null}],[0,"server","solicit::http","The module contains a number of reusable components for implementing the server side of an\nHTTP/2 connection.",null,null],[3,"ServerSession","solicit::http::server","An implementation of the `Session` trait for a server-side HTTP/2 connection.",null,null],[3,"ServerConnection","","The struct provides a more convenient API for server-related functionality of an HTTP/2\nconnection, such as sending a response back to the client.",null,null],[12,"state","","The state of the session associated to this client connection. Maintains the status of the\nconnection streams.",41,null],[11,"new","","",42,{"inputs":[{"name":"state"}],"output":{"name":"serversession"}}],[11,"new_data_chunk","","",42,null],[11,"new_headers","","",42,{"inputs":[{"name":"serversession"},{"name":"streamid"},{"name":"vec"}],"output":null}],[11,"end_of_stream","","",42,{"inputs":[{"name":"serversession"},{"name":"streamid"}],"output":null}],[11,"with_connection","","Creates a new `ServerConnection` that will use the given `HttpConnection` for its\nunderlying HTTP/2 communication.",41,{"inputs":[{"name":"httpconnection"},{"name":"state"}],"output":{"name":"serverconnection"}}],[11,"scheme","","Returns the scheme of the underlying `HttpConnection`.",41,{"inputs":[{"name":"serverconnection"}],"output":{"name":"httpscheme"}}],[11,"init","","Initializes the `ServerConnection` by sending the server&#39;s settings and processing the\nclient&#39;s.\nIf the client does not provide a settings frame, returns an error.",41,{"inputs":[{"name":"serverconnection"}],"output":{"name":"httpresult"}}],[11,"handle_next_frame","","Fully handles the next incoming frame. Events are passed on to the internal `session`\ninstance.",41,{"inputs":[{"name":"serverconnection"}],"output":{"name":"httpresult"}}],[11,"start_response","","Starts a response on the stream with the given ID by sending the given headers.",41,{"inputs":[{"name":"serverconnection"},{"name":"vec"},{"name":"streamid"},{"name":"endstream"}],"output":{"name":"httpresult"}}],[11,"send_next_data","","Queues a new DATA frame onto the underlying `SendFrame`.",41,{"inputs":[{"name":"serverconnection"}],"output":{"name":"httpresult"}}],[6,"StreamId","solicit::http","An alias for the type that represents the ID of an HTTP/2 stream",null,null],[6,"Header","","An alias for the type that represents HTTP/2 headers. For now we only alias\nthe tuple of byte vectors instead of going with a full struct representation.",null,null],[6,"HttpResult","","A convenience `Result` type that has the `HttpError` type as the error\ntype and a generic Ok result type.",null,null],[17,"ALPN_PROTOCOLS","","A set of protocol names that the library should use to indicate that HTTP/2\nis supported during protocol negotiation (NPN or ALPN).\nWe include some of the drafts&#39; protocol names, since there is basically no\ndifference for all intents and purposes (and some servers out there still\nonly officially advertise draft support).\nTODO: Eventually only use &quot;h2&quot;.",null,null],[11,"fmt","","",2,{"inputs":[{"name":"httperror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",2,{"inputs":[{"name":"error"}],"output":{"name":"httperror"}}],[11,"fmt","","",2,{"inputs":[{"name":"httperror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"httperror"}],"output":{"name":"str"}}],[11,"cause","","",2,{"inputs":[{"name":"httperror"}],"output":{"name":"option"}}],[11,"eq","","",3,{"inputs":[{"name":"httpscheme"},{"name":"httpscheme"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"httpscheme"},{"name":"httpscheme"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"httpscheme"}],"output":{"name":"httpscheme"}}],[11,"fmt","","",3,{"inputs":[{"name":"httpscheme"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_bytes","","Returns a byte string representing the scheme.",3,null],[11,"clone","","",0,{"inputs":[{"name":"response"}],"output":{"name":"response"}}],[11,"new","","Creates a new `Response` with all the components already provided.",0,{"inputs":[{"name":"streamid"},{"name":"vec"},{"name":"vec"}],"output":{"name":"response"}}],[11,"status_code","","Gets the response status code from the pseudo-header. If the response\ndoes not contain the response as the first pseuo-header, an error is\nreturned as such a response is malformed.",0,{"inputs":[{"name":"response"}],"output":{"name":"httpresult"}}],[11,"clone","","",1,{"inputs":[{"name":"request"}],"output":{"name":"request"}}],[0,"client","solicit","The module contains implementations of HTTP/2 clients that could be\ndirectly used to access HTTP/2 servers, i.e. send requests and read\nresponses.",null,null],[3,"SimpleClient","solicit::client","A struct implementing a simple HTTP/2 client.",null,null],[3,"Client","","A struct representing an HTTP/2 client that receives responses to its\nrequests asynchronously. Additionally, this client can be cloned and all\nclones can issue (concurrently) requests to the server, using the same\nunderlying HTTP/2 connection.",null,null],[11,"with_connection","","Create a new `SimpleClient` instance that will use the given `HttpConnection`\nto communicate to the server.",43,{"inputs":[{"name":"httpconnection"},{"name":"string"}],"output":{"name":"httpresult"}}],[11,"with_connector","","A convenience constructor that first tries to establish an HTTP/2\nconnection by using the given connector instance (an implementation of\nthe `HttpConnect` trait).",43,{"inputs":[{"name":"c"}],"output":{"name":"httpresult"}}],[11,"request","","Send a request to the server. Blocks until the entire request has been\nsent.",43,null],[11,"get_response","","Gets the response for the stream with the given ID. If a valid stream ID\nis given, it blocks until a response is received.",43,{"inputs":[{"name":"simpleclient"},{"name":"streamid"}],"output":{"name":"httpresult"}}],[11,"get","","Performs a GET request on the given path. This is a shortcut method for\ncalling `request` followed by `get_response` for the returned stream ID.",43,null],[11,"post","","Performs a POST request on the given path.",43,null],[11,"clone","","",44,{"inputs":[{"name":"client"}],"output":{"name":"client"}}],[11,"drop","","",44,{"inputs":[{"name":"client"}],"output":null}],[11,"with_connector","","Creates a brand new HTTP/2 client. This means that a new HTTP/2\nconnection will be established behind the scenes. A thread is spawned\nto handle the connection in the background, so that the thread that\ncreates the client can use it asynchronously.",44,{"inputs":[{"name":"c"}],"output":{"name":"option"}}],[11,"request","","Issues a new request to the server.",44,null],[11,"get","","Issues a GET request to the server.",44,null],[11,"post","","Issues a POST request to the server.",44,null],[0,"server","solicit","The module contains a simple HTTP/2 server implementation.",null,null],[3,"ServerRequest","solicit::server","The struct represents a fully received request.",null,null],[12,"stream_id","","",45,null],[12,"headers","","",45,null],[12,"body","","",45,null],[3,"SimpleServer","","The struct implements a simple HTTP/2 server that allows users to register a request handler (a\ncallback taking a `ServerRequest` and returning a `Response`) which is run on all received\nrequests.",null,null],[11,"new","","Creates a new `SimpleServer` that will use the given `TransportStream` to communicate to\nthe client. Assumes that the stream is fully uninitialized -- no preface sent or read yet.",46,{"inputs":[{"name":"ts"},{"name":"h"}],"output":{"name":"httpresult"}}],[11,"handle_next","","Handles the next incoming frame, blocking to receive it if nothing is available on the\nunderlying stream.",46,{"inputs":[{"name":"simpleserver"}],"output":{"name":"httpresult"}}]],"paths":[[3,"Response"],[3,"Request"],[4,"HttpError"],[4,"HttpScheme"],[3,"DataFrame"],[4,"DataFlag"],[3,"StreamDependency"],[3,"HeadersFrame"],[4,"HeadersFlag"],[3,"SettingsFrame"],[4,"HttpSetting"],[4,"SettingsFlag"],[8,"Flag"],[8,"Frame"],[3,"RawFrame"],[8,"TransportStream"],[3,"TcpStream"],[3,"HttpConnection"],[3,"DataChunk"],[4,"HttpFrame"],[4,"SendStatus"],[4,"EndStream"],[8,"SendFrame"],[8,"ReceiveFrame"],[3,"DefaultStream"],[4,"StreamState"],[4,"StreamDataError"],[4,"StreamDataChunk"],[8,"Session"],[8,"SessionState"],[8,"Stream"],[3,"StreamIter"],[3,"DefaultSessionState"],[8,"DataPrioritizer"],[3,"SimplePrioritizer"],[3,"CleartextConnector"],[3,"RequestStream"],[3,"ClientConnection"],[8,"HttpConnect"],[3,"CleartextConnectError"],[3,"ClientSession"],[3,"ServerConnection"],[3,"ServerSession"],[3,"SimpleClient"],[3,"Client"],[3,"ServerRequest"],[3,"SimpleServer"]]};
searchIndex["openssl_sys"] = {"doc":"","items":[[3,"stack_st_X509_EXTENSION","openssl_sys","",null,null],[12,"stack","","",0,null],[3,"stack_st_GENERAL_NAME","","",null,null],[12,"stack","","",1,null],[3,"stack_st_void","","",null,null],[12,"stack","","",2,null],[3,"BIO_METHOD","","",null,null],[12,"type_","","",3,null],[12,"name","","",3,null],[12,"bwrite","","",3,null],[12,"bread","","",3,null],[12,"bputs","","",3,null],[12,"bgets","","",3,null],[12,"ctrl","","",3,null],[12,"create","","",3,null],[12,"destroy","","",3,null],[12,"callback_ctrl","","",3,null],[3,"_STACK","","",null,null],[12,"num","","",4,null],[12,"data","","",4,null],[12,"sorted","","",4,null],[12,"num_alloc","","",4,null],[12,"comp","","",4,null],[3,"RSA","","",null,null],[12,"pad","","",5,null],[12,"version","","",5,null],[12,"meth","","",5,null],[12,"engine","","",5,null],[12,"n","","",5,null],[12,"e","","",5,null],[12,"d","","",5,null],[12,"p","","",5,null],[12,"q","","",5,null],[12,"dmp1","","",5,null],[12,"dmq1","","",5,null],[12,"iqmp","","",5,null],[12,"ex_data","","",5,null],[12,"references","","",5,null],[12,"flags","","",5,null],[12,"_method_mod_n","","",5,null],[12,"_method_mod_p","","",5,null],[12,"_method_mod_q","","",5,null],[12,"bignum_data","","",5,null],[12,"blinding","","",5,null],[12,"mt_blinding","","",5,null],[3,"EVP_PKEY","","",null,null],[12,"type_","","",6,null],[12,"save_type","","",6,null],[12,"references","","",6,null],[12,"ameth","","",6,null],[12,"engine","","",6,null],[12,"pkey","","",6,null],[12,"save_parameters","","",6,null],[12,"attributes","","",6,null],[3,"BIO","","",null,null],[12,"method","","",7,null],[12,"callback","","",7,null],[12,"cb_arg","","",7,null],[12,"init","","",7,null],[12,"shutdown","","",7,null],[12,"flags","","",7,null],[12,"retry_reason","","",7,null],[12,"num","","",7,null],[12,"ptr","","",7,null],[12,"next_bio","","",7,null],[12,"prev_bio","","",7,null],[12,"references","","",7,null],[12,"num_read","","",7,null],[12,"num_write","","",7,null],[12,"ex_data","","",7,null],[3,"CRYPTO_EX_DATA","","",null,null],[12,"sk","","",8,null],[12,"dummy","","",8,null],[3,"EVP_MD_CTX","","",null,null],[3,"HMAC_CTX","","",null,null],[3,"X509V3_CTX","","",null,null],[3,"GENERAL_NAME","","",null,null],[12,"type_","","",9,null],[12,"d","","",9,null],[3,"BIGNUM","","",null,null],[12,"d","","",10,null],[12,"top","","",10,null],[12,"dmax","","",10,null],[12,"neg","","",10,null],[12,"flags","","",10,null],[5,"init","","",null,{"inputs":[],"output":null}],[5,"ASN1_INTEGER_set","","",null,null],[5,"ASN1_STRING_type_new","","",null,null],[5,"ASN1_TIME_free","","",null,null],[5,"BIO_ctrl","","",null,null],[5,"BIO_free_all","","",null,null],[5,"BIO_new","","",null,null],[5,"BIO_new_socket","","",null,null],[5,"BIO_read","","",null,null],[5,"BIO_write","","",null,null],[5,"BIO_s_mem","","",null,null],[5,"BN_new","","",null,null],[5,"BN_dup","","",null,null],[5,"BN_clear_free","","",null,null],[5,"BN_CTX_new","","",null,null],[5,"BN_CTX_free","","",null,null],[5,"BN_num_bits","","",null,null],[5,"BN_set_negative","","",null,null],[5,"BN_set_word","","",null,null],[5,"BN_add","","",null,null],[5,"BN_div","","",null,null],[5,"BN_exp","","",null,null],[5,"BN_gcd","","",null,null],[5,"BN_mod_add","","",null,null],[5,"BN_mod_exp","","",null,null],[5,"BN_mod_inverse","","",null,null],[5,"BN_mod_mul","","",null,null],[5,"BN_mod_sqr","","",null,null],[5,"BN_mod_sub","","",null,null],[5,"BN_mul","","",null,null],[5,"BN_nnmod","","",null,null],[5,"BN_add_word","","",null,null],[5,"BN_sub_word","","",null,null],[5,"BN_mul_word","","",null,null],[5,"BN_div_word","","",null,null],[5,"BN_mod_word","","",null,null],[5,"BN_sqr","","",null,null],[5,"BN_sub","","",null,null],[5,"BN_clear_bit","","",null,null],[5,"BN_is_bit_set","","",null,null],[5,"BN_lshift","","",null,null],[5,"BN_lshift1","","",null,null],[5,"BN_mask_bits","","",null,null],[5,"BN_rshift","","",null,null],[5,"BN_set_bit","","",null,null],[5,"BN_rshift1","","",null,null],[5,"BN_cmp","","",null,null],[5,"BN_ucmp","","",null,null],[5,"BN_generate_prime_ex","","",null,null],[5,"BN_is_prime_ex","","",null,null],[5,"BN_is_prime_fasttest_ex","","",null,null],[5,"BN_rand","","",null,null],[5,"BN_pseudo_rand","","",null,null],[5,"BN_rand_range","","",null,null],[5,"BN_pseudo_rand_range","","",null,null],[5,"BN_bin2bn","","",null,null],[5,"BN_bn2bin","","",null,null],[5,"BN_dec2bn","","",null,null],[5,"BN_bn2dec","","",null,null],[5,"BN_hex2bn","","",null,null],[5,"BN_bn2hex","","",null,null],[5,"CRYPTO_num_locks","","",null,null],[5,"CRYPTO_set_locking_callback","","",null,null],[5,"CRYPTO_set_id_callback","","",null,null],[5,"CRYPTO_free","","",null,null],[5,"CRYPTO_memcmp","","",null,null],[5,"DH_free","","",null,null],[5,"DH_new_from_params","","",null,null],[5,"ERR_get_error","","",null,null],[5,"ERR_lib_error_string","","",null,null],[5,"ERR_func_error_string","","",null,null],[5,"ERR_reason_error_string","","",null,null],[5,"ERR_load_crypto_strings","","",null,null],[5,"EVP_md5","","",null,null],[5,"EVP_ripemd160","","",null,null],[5,"EVP_sha1","","",null,null],[5,"EVP_sha224","","",null,null],[5,"EVP_sha256","","",null,null],[5,"EVP_sha384","","",null,null],[5,"EVP_sha512","","",null,null],[5,"EVP_aes_128_cbc","","",null,null],[5,"EVP_aes_128_ecb","","",null,null],[5,"EVP_aes_128_cfb1","","",null,null],[5,"EVP_aes_128_cfb128","","",null,null],[5,"EVP_aes_128_cfb8","","",null,null],[5,"EVP_aes_256_cbc","","",null,null],[5,"EVP_aes_256_ecb","","",null,null],[5,"EVP_aes_256_cfb1","","",null,null],[5,"EVP_aes_256_cfb128","","",null,null],[5,"EVP_aes_256_cfb8","","",null,null],[5,"EVP_rc4","","",null,null],[5,"EVP_des_cbc","","",null,null],[5,"EVP_des_ecb","","",null,null],[5,"EVP_BytesToKey","","",null,null],[5,"EVP_CIPHER_CTX_new","","",null,null],[5,"EVP_CIPHER_CTX_set_padding","","",null,null],[5,"EVP_CIPHER_CTX_free","","",null,null],[5,"EVP_CipherInit","","",null,null],[5,"EVP_CipherUpdate","","",null,null],[5,"EVP_CipherFinal","","",null,null],[5,"EVP_DigestInit","","",null,null],[5,"EVP_DigestInit_ex","","",null,null],[5,"EVP_DigestUpdate","","",null,null],[5,"EVP_DigestFinal","","",null,null],[5,"EVP_DigestFinal_ex","","",null,null],[5,"EVP_MD_CTX_create","","",null,null],[5,"EVP_MD_CTX_copy_ex","","",null,null],[5,"EVP_MD_CTX_destroy","","",null,null],[5,"EVP_PKEY_new","","",null,null],[5,"EVP_PKEY_free","","",null,null],[5,"EVP_PKEY_assign","","",null,null],[5,"EVP_PKEY_copy_parameters","","",null,null],[5,"EVP_PKEY_get1_RSA","","",null,null],[5,"EVP_PKEY_set1_RSA","","",null,null],[5,"EVP_PKEY_cmp","","",null,null],[5,"HMAC_CTX_init","","",null,null],[5,"HMAC_CTX_cleanup","","",null,null],[5,"PEM_read_bio_DHparams","","",null,null],[5,"PEM_read_bio_X509","","",null,null],[5,"PEM_read_bio_X509_REQ","","",null,null],[5,"PEM_read_bio_PrivateKey","","",null,null],[5,"PEM_read_bio_PUBKEY","","",null,null],[5,"PEM_read_bio_RSAPrivateKey","","",null,null],[5,"PEM_read_bio_RSA_PUBKEY","","",null,null],[5,"PEM_write_bio_PrivateKey","","",null,null],[5,"PEM_write_bio_PUBKEY","","",null,null],[5,"PEM_write_bio_RSAPrivateKey","","",null,null],[5,"PEM_write_bio_RSAPublicKey","","",null,null],[5,"PEM_write_bio_RSA_PUBKEY","","",null,null],[5,"PEM_write_bio_X509","","",null,null],[5,"PEM_write_bio_X509_REQ","","",null,null],[5,"PKCS5_PBKDF2_HMAC_SHA1","","",null,null],[5,"RAND_bytes","","",null,null],[5,"RSA_new","","",null,null],[5,"RSA_free","","",null,null],[5,"RSA_generate_key","","",null,null],[5,"RSA_generate_key_ex","","",null,null],[5,"RSA_private_decrypt","","",null,null],[5,"RSA_public_decrypt","","",null,null],[5,"RSA_private_encrypt","","",null,null],[5,"RSA_public_encrypt","","",null,null],[5,"RSA_sign","","",null,null],[5,"RSA_size","","",null,null],[5,"RSA_verify","","",null,null],[5,"SSL_library_init","","",null,null],[5,"SSL_load_error_strings","","",null,null],[5,"SSLv3_method","","",null,null],[5,"TLSv1_method","","",null,null],[5,"SSLv23_method","","",null,null],[5,"SSL_new","","",null,null],[5,"SSL_pending","","",null,null],[5,"SSL_free","","",null,null],[5,"SSL_set_bio","","",null,null],[5,"SSL_get_rbio","","",null,null],[5,"SSL_get_wbio","","",null,null],[5,"SSL_accept","","",null,null],[5,"SSL_connect","","",null,null],[5,"SSL_ctrl","","",null,null],[5,"SSL_get_error","","",null,null],[5,"SSL_read","","",null,null],[5,"SSL_write","","",null,null],[5,"SSL_get_ex_data_X509_STORE_CTX_idx","","",null,null],[5,"SSL_get_SSL_CTX","","",null,null],[5,"SSL_set_SSL_CTX","","",null,null],[5,"SSL_get_current_compression","","",null,null],[5,"SSL_get_peer_certificate","","",null,null],[5,"SSL_get_ssl_method","","",null,null],[5,"SSL_get_version","","",null,null],[5,"SSL_state_string","","",null,null],[5,"SSL_state_string_long","","",null,null],[5,"SSL_set_verify","","",null,null],[5,"SSL_get_ex_new_index","","",null,null],[5,"SSL_set_ex_data","","",null,null],[5,"SSL_get_ex_data","","",null,null],[5,"SSL_get_servername","","",null,null],[5,"SSL_COMP_get_name","","",null,null],[5,"SSL_get_current_cipher","","",null,null],[5,"SSL_CIPHER_get_name","","",null,null],[5,"SSL_CIPHER_get_bits","","",null,null],[5,"SSL_CIPHER_get_version","","",null,null],[5,"SSL_CIPHER_description","","",null,null],[5,"SSL_CTX_new","","",null,null],[5,"SSL_CTX_free","","",null,null],[5,"SSL_CTX_set_verify","","",null,null],[5,"SSL_CTX_set_verify_depth","","",null,null],[5,"SSL_CTX_load_verify_locations","","",null,null],[5,"SSL_CTX_set_default_verify_paths","","",null,null],[5,"SSL_CTX_get_ex_new_index","","",null,null],[5,"SSL_CTX_set_ex_data","","",null,null],[5,"SSL_CTX_get_ex_data","","",null,null],[5,"SSL_CTX_set_session_id_context","","",null,null],[5,"SSL_CTX_use_certificate_file","","",null,null],[5,"SSL_CTX_use_certificate_chain_file","","",null,null],[5,"SSL_CTX_use_certificate","","",null,null],[5,"SSL_CTX_use_PrivateKey_file","","",null,null],[5,"SSL_CTX_use_PrivateKey","","",null,null],[5,"SSL_CTX_check_private_key","","",null,null],[5,"SSL_CTX_set_cipher_list","","",null,null],[5,"X509_add_ext","","",null,null],[5,"X509_digest","","",null,null],[5,"X509_free","","",null,null],[5,"X509_REQ_free","","",null,null],[5,"X509_get_serialNumber","","",null,null],[5,"X509_get_subject_name","","",null,null],[5,"X509_gmtime_adj","","",null,null],[5,"X509_new","","",null,null],[5,"X509_set_issuer_name","","",null,null],[5,"X509_set_notAfter","","",null,null],[5,"X509_set_notBefore","","",null,null],[5,"X509_set_version","","",null,null],[5,"X509_set_pubkey","","",null,null],[5,"X509_sign","","",null,null],[5,"X509_get_pubkey","","",null,null],[5,"X509_to_X509_REQ","","",null,null],[5,"X509_get_ext_d2i","","",null,null],[5,"X509_EXTENSION_free","","",null,null],[5,"X509_NAME_add_entry_by_txt","","",null,null],[5,"X509_NAME_get_index_by_NID","","",null,null],[5,"X509_NAME_get_entry","","",null,null],[5,"X509_NAME_ENTRY_get_data","","",null,null],[5,"ASN1_STRING_to_UTF8","","",null,null],[5,"ASN1_STRING_length","","",null,null],[5,"ASN1_STRING_data","","",null,null],[5,"X509_STORE_CTX_get_current_cert","","",null,null],[5,"X509_STORE_CTX_get_error","","",null,null],[5,"X509_STORE_CTX_get_ex_data","","",null,null],[5,"X509_STORE_CTX_get_error_depth","","",null,null],[5,"X509V3_EXT_conf_nid","","",null,null],[5,"X509V3_EXT_conf","","",null,null],[5,"X509V3_set_ctx","","",null,null],[5,"X509_REQ_add_extensions","","",null,null],[5,"X509_REQ_sign","","",null,null],[5,"i2d_RSA_PUBKEY","","",null,null],[5,"d2i_RSA_PUBKEY","","",null,null],[5,"i2d_RSAPrivateKey","","",null,null],[5,"d2i_RSAPrivateKey","","",null,null],[5,"SSLeay","","",null,null],[5,"SSLeay_version","","",null,null],[0,"probe","","",null,null],[3,"ProbeResult","openssl_sys::probe","",null,null],[12,"cert_file","","",11,null],[12,"cert_dir","","",11,null],[5,"find_certs_dirs","","Probe the system for the directory in which CA certificates should likely be\nfound.",null,{"inputs":[],"output":{"name":"vec"}}],[5,"init_ssl_cert_env_vars","","",null,{"inputs":[],"output":null}],[5,"probe","","",null,{"inputs":[],"output":{"name":"proberesult"}}],[6,"ASN1_INTEGER","openssl_sys","",null,null],[6,"ASN1_STRING","","",null,null],[6,"ASN1_TIME","","",null,null],[6,"BN_CTX","","",null,null],[6,"COMP_METHOD","","",null,null],[6,"DH","","",null,null],[6,"ENGINE","","",null,null],[6,"EVP_CIPHER","","",null,null],[6,"EVP_CIPHER_CTX","","",null,null],[6,"EVP_MD","","",null,null],[6,"EVP_PKEY_CTX","","",null,null],[6,"SSL","","",null,null],[6,"SSL_CIPHER","","",null,null],[6,"SSL_CTX","","",null,null],[6,"SSL_METHOD","","",null,null],[6,"X509","","",null,null],[6,"X509_CRL","","",null,null],[6,"X509_EXTENSION","","",null,null],[6,"X509_NAME","","",null,null],[6,"X509_NAME_ENTRY","","",null,null],[6,"X509_REQ","","",null,null],[6,"X509_STORE_CTX","","",null,null],[6,"bio_st","","",null,null],[6,"bio_info_cb","","",null,null],[6,"CRYPTO_EX_new","","",null,null],[6,"CRYPTO_EX_dup","","",null,null],[6,"CRYPTO_EX_free","","",null,null],[6,"PasswordCallback","","",null,null],[17,"BIO_TYPE_NONE","","",null,null],[17,"BIO_CTRL_EOF","","",null,null],[17,"BIO_CTRL_FLUSH","","",null,null],[17,"BIO_C_SET_BUF_MEM_EOF_RETURN","","",null,null],[17,"CRYPTO_LOCK","","",null,null],[17,"MBSTRING_ASC","","",null,null],[17,"MBSTRING_BMP","","",null,null],[17,"MBSTRING_FLAG","","",null,null],[17,"MBSTRING_UNIV","","",null,null],[17,"MBSTRING_UTF8","","",null,null],[17,"NID_ext_key_usage","","",null,null],[17,"NID_key_usage","","",null,null],[17,"PKCS5_SALT_LEN","","",null,null],[17,"SSL_CTRL_OPTIONS","","",null,null],[17,"SSL_CTRL_CLEAR_OPTIONS","","",null,null],[17,"SSL_CTRL_SET_TLSEXT_SERVERNAME_CB","","",null,null],[17,"SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG","","",null,null],[17,"SSL_CTRL_SET_TLSEXT_HOSTNAME","","",null,null],[17,"SSL_CTRL_EXTRA_CHAIN_CERT","","",null,null],[17,"SSL_CTRL_SET_READ_AHEAD","","",null,null],[17,"SSL_ERROR_NONE","","",null,null],[17,"SSL_ERROR_SSL","","",null,null],[17,"SSL_ERROR_SYSCALL","","",null,null],[17,"SSL_ERROR_WANT_ACCEPT","","",null,null],[17,"SSL_ERROR_WANT_CONNECT","","",null,null],[17,"SSL_ERROR_WANT_READ","","",null,null],[17,"SSL_ERROR_WANT_WRITE","","",null,null],[17,"SSL_ERROR_WANT_X509_LOOKUP","","",null,null],[17,"SSL_ERROR_ZERO_RETURN","","",null,null],[17,"SSL_VERIFY_NONE","","",null,null],[17,"SSL_VERIFY_PEER","","",null,null],[17,"SSL_VERIFY_FAIL_IF_NO_PEER_CERT","","",null,null],[17,"TLSEXT_NAMETYPE_host_name","","",null,null],[17,"SSL_TLSEXT_ERR_OK","","",null,null],[17,"SSL_TLSEXT_ERR_ALERT_WARNING","","",null,null],[17,"SSL_TLSEXT_ERR_ALERT_FATAL","","",null,null],[17,"SSL_TLSEXT_ERR_NOACK","","",null,null],[17,"SSLEAY_VERSION","","",null,null],[17,"SSLEAY_CFLAGS","","",null,null],[17,"SSLEAY_BUILT_ON","","",null,null],[17,"SSLEAY_PLATFORM","","",null,null],[17,"SSLEAY_DIR","","",null,null],[17,"V_ASN1_GENERALIZEDTIME","","",null,null],[17,"V_ASN1_UTCTIME","","",null,null],[17,"X509_FILETYPE_ASN1","","",null,null],[17,"X509_FILETYPE_DEFAULT","","",null,null],[17,"X509_FILETYPE_PEM","","",null,null],[17,"X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH","","",null,null],[17,"X509_V_ERR_AKID_SKID_MISMATCH","","",null,null],[17,"X509_V_ERR_APPLICATION_VERIFICATION","","",null,null],[17,"X509_V_ERR_CERT_CHAIN_TOO_LONG","","",null,null],[17,"X509_V_ERR_CERT_HAS_EXPIRED","","",null,null],[17,"X509_V_ERR_CERT_NOT_YET_VALID","","",null,null],[17,"X509_V_ERR_CERT_REJECTED","","",null,null],[17,"X509_V_ERR_CERT_REVOKED","","",null,null],[17,"X509_V_ERR_CERT_SIGNATURE_FAILURE","","",null,null],[17,"X509_V_ERR_CERT_UNTRUSTED","","",null,null],[17,"X509_V_ERR_CRL_HAS_EXPIRED","","",null,null],[17,"X509_V_ERR_CRL_NOT_YET_VALID","","",null,null],[17,"X509_V_ERR_CRL_PATH_VALIDATION_ERROR","","",null,null],[17,"X509_V_ERR_CRL_SIGNATURE_FAILURE","","",null,null],[17,"X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT","","",null,null],[17,"X509_V_ERR_DIFFERENT_CRL_SCOPE","","",null,null],[17,"X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD","","",null,null],[17,"X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD","","",null,null],[17,"X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD","","",null,null],[17,"X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD","","",null,null],[17,"X509_V_ERR_EXCLUDED_VIOLATION","","",null,null],[17,"X509_V_ERR_INVALID_CA","","",null,null],[17,"X509_V_ERR_INVALID_EXTENSION","","",null,null],[17,"X509_V_ERR_INVALID_NON_CA","","",null,null],[17,"X509_V_ERR_INVALID_POLICY_EXTENSION","","",null,null],[17,"X509_V_ERR_INVALID_PURPOSE","","",null,null],[17,"X509_V_ERR_KEYUSAGE_NO_CERTSIGN","","",null,null],[17,"X509_V_ERR_KEYUSAGE_NO_CRL_SIGN","","",null,null],[17,"X509_V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE","","",null,null],[17,"X509_V_ERR_NO_EXPLICIT_POLICY","","",null,null],[17,"X509_V_ERR_OUT_OF_MEM","","",null,null],[17,"X509_V_ERR_PATH_LENGTH_EXCEEDED","","",null,null],[17,"X509_V_ERR_PERMITTED_VIOLATION","","",null,null],[17,"X509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED","","",null,null],[17,"X509_V_ERR_PROXY_PATH_LENGTH_EXCEEDED","","",null,null],[17,"X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN","","",null,null],[17,"X509_V_ERR_SUBJECT_ISSUER_MISMATCH","","",null,null],[17,"X509_V_ERR_SUBTREE_MINMAX","","",null,null],[17,"X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY","","",null,null],[17,"X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE","","",null,null],[17,"X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE","","",null,null],[17,"X509_V_ERR_UNABLE_TO_GET_CRL","","",null,null],[17,"X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER","","",null,null],[17,"X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT","","",null,null],[17,"X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY","","",null,null],[17,"X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE","","",null,null],[17,"X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION","","",null,null],[17,"X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION","","",null,null],[17,"X509_V_ERR_UNNESTED_RESOURCE","","",null,null],[17,"X509_V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX","","",null,null],[17,"X509_V_ERR_UNSUPPORTED_CONSTRAINT_TYPE","","",null,null],[17,"X509_V_ERR_UNSUPPORTED_EXTENSION_FEATURE","","",null,null],[17,"X509_V_ERR_UNSUPPORTED_NAME_SYNTAX","","",null,null],[17,"X509_V_OK","","",null,null],[17,"GEN_OTHERNAME","","",null,null],[17,"GEN_EMAIL","","",null,null],[17,"GEN_DNS","","",null,null],[17,"GEN_X400","","",null,null],[17,"GEN_DIRNAME","","",null,null],[17,"GEN_EDIPARTY","","",null,null],[17,"GEN_URI","","",null,null],[17,"GEN_IPADD","","",null,null],[17,"GEN_RID","","",null,null],[11,"clone","","",3,{"inputs":[{"name":"bio_method"}],"output":{"name":"bio_method"}}],[11,"clone","","",12,{"inputs":[{"name":"evp_md_ctx"}],"output":{"name":"evp_md_ctx"}}],[11,"clone","","",13,{"inputs":[{"name":"hmac_ctx"}],"output":{"name":"hmac_ctx"}}],[11,"clone","","",9,{"inputs":[{"name":"general_name"}],"output":{"name":"general_name"}}],[11,"clone","","",14,{"inputs":[{"name":"x509v3_ctx"}],"output":{"name":"x509v3_ctx"}}],[11,"clone","","",10,{"inputs":[{"name":"bignum"}],"output":{"name":"bignum"}}]],"paths":[[3,"stack_st_X509_EXTENSION"],[3,"stack_st_GENERAL_NAME"],[3,"stack_st_void"],[3,"BIO_METHOD"],[3,"_STACK"],[3,"RSA"],[3,"EVP_PKEY"],[3,"BIO"],[3,"CRYPTO_EX_DATA"],[3,"GENERAL_NAME"],[3,"BIGNUM"],[3,"ProbeResult"],[3,"EVP_MD_CTX"],[3,"HMAC_CTX"],[3,"X509V3_CTX"]]};
searchIndex["unicase"] = {"doc":"# Case","items":[[3,"UniCase","unicase","Case Insensitive wrapper of strings.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"unicase"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"unicase"}],"output":{"name":"unicase"}}],[11,"deref","","",0,{"inputs":[{"name":"unicase"}],"output":{"name":"s"}}],[11,"deref_mut","","",0,{"inputs":[{"name":"unicase"}],"output":{"name":"s"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"unicase"},{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"unicase"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"as_ref","","",0,{"inputs":[{"name":"unicase"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"unicase"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"unicase"},{"name":"s2"}],"output":{"name":"bool"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"hash","","",0,{"inputs":[{"name":"unicase"},{"name":"h"}],"output":null}],[11,"from","","",0,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"into","","",0,{"inputs":[{"name":"unicase"}],"output":{"name":"str"}}],[11,"into","","",0,{"inputs":[{"name":"unicase"}],"output":{"name":"string"}}]],"paths":[[3,"UniCase"]]};
searchIndex["traitobject"] = {"doc":"# traitobject","items":[[5,"data","traitobject","Get the data pointer from this trait object.",null,null],[5,"data_mut","","Get the data pointer from this trait object, mutably.",null,null]],"paths":[]};
searchIndex["kernel32"] = {"doc":"","items":[],"paths":[]};
searchIndex["hpack"] = {"doc":"A module implementing HPACK functionality. Exposes a simple API for\nperforming the encoding and decoding of header sets, according to the\nHPACK spec.","items":[[0,"encoder","hpack","Implements all functionality related to encoding header blocks using\nHPACK.",null,null],[3,"Encoder","hpack::encoder","Represents an HPACK encoder. Allows clients to encode arbitrary header sets\nand tracks the encoding context. That is, encoding subsequent header sets\nwill use the context built by previous encode calls.",null,null],[5,"encode_integer","","Encode an integer to the representation defined by HPACK.",null,{"inputs":[{"name":"usize"},{"name":"u8"}],"output":{"name":"vec"}}],[11,"new","","Creates a new `Encoder` with a default static table, as defined by the\nHPACK spec (Appendix A).",0,{"inputs":[],"output":{"name":"encoder"}}],[11,"encode","","Encodes the given headers using the HPACK rules and returns a newly\nallocated `Vec` containing the bytes representing the encoded header\nset.",0,{"inputs":[{"name":"encoder"},{"name":"vec"}],"output":{"name":"vec"}}],[0,"decoder","hpack","Exposes the struct `Decoder` that allows for HPACK-encoded header blocks to\nbe decoded into a header list.",null,null],[3,"Decoder","hpack::decoder","Decodes headers encoded using HPACK.",null,null],[4,"IntegerDecodingError","","Represents all errors that can be encountered while decoding an\ninteger.",null,null],[13,"TooManyOctets","","5.1. specifies that &quot;excessively large integer decodings&quot; MUST be\nconsidered an error (whether the size is the number of octets or\nvalue). This variant corresponds to the encoding containing too many\noctets.",1,null],[13,"ValueTooLarge","","The variant corresponds to the case where the value of the integer\nbeing decoded exceeds a certain threshold.",1,null],[13,"NotEnoughOctets","","When a buffer from which an integer was supposed to be encoded does\nnot contain enough octets to complete the decoding.",1,null],[13,"InvalidPrefix","","Only valid prefixes are [1, 8]",1,null],[4,"StringDecodingError","","Represents all errors that can be encountered while decoding an octet\nstring.",null,null],[13,"NotEnoughOctets","","",2,null],[13,"HuffmanDecoderError","","",2,null],[4,"DecoderError","","Represents all errors that can be encountered while performing the decoding\nof an HPACK header set.",null,null],[13,"HeaderIndexOutOfBounds","","",3,null],[13,"IntegerDecodingError","","",3,null],[13,"StringDecodingError","","",3,null],[13,"InvalidMaxDynamicSize","","The size of the dynamic table can never be allowed to exceed the max\nsize mandated to the decoder by the protocol. (by perfroming changes\nmade by SizeUpdate blocks).",3,null],[6,"DecoderResult","","The result returned by the `decode` method of the `Decoder`.",null,null],[11,"eq","","",1,{"inputs":[{"name":"integerdecodingerror"},{"name":"integerdecodingerror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"integerdecodingerror"},{"name":"integerdecodingerror"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"integerdecodingerror"}],"output":{"name":"integerdecodingerror"}}],[11,"fmt","","",1,{"inputs":[{"name":"integerdecodingerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"stringdecodingerror"},{"name":"stringdecodingerror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"stringdecodingerror"},{"name":"stringdecodingerror"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"stringdecodingerror"}],"output":{"name":"stringdecodingerror"}}],[11,"fmt","","",2,{"inputs":[{"name":"stringdecodingerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"decodererror"}],"output":{"name":"decodererror"}}],[11,"fmt","","",3,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Decoder` with all settings set to default values.",4,{"inputs":[],"output":{"name":"decoder"}}],[11,"set_max_table_size","","Sets a new maximum dynamic table size for the decoder.",4,{"inputs":[{"name":"decoder"},{"name":"usize"}],"output":null}],[11,"decode","","Decode the header block found in the given buffer.",4,null],[0,"huffman","hpack","A module exposing utilities for encoding and decoding Huffman-coded octet\nstrings, under the Huffman code defined by HPACK.\n(HPACK-draft-10, Appendix B)",null,null],[3,"HuffmanDecoder","hpack::huffman","A simple implementation of a Huffman code decoder.",null,null],[4,"HuffmanDecoderError","","Represents the error variants that the `HuffmanDecoder` can return.",null,null],[13,"PaddingTooLarge","","Any padding strictly larger than 7 bits MUST be interpreted as an error",5,null],[13,"InvalidPadding","","Any padding that does not correspond to the most significant bits of\nEOS MUST be interpreted as an error.",5,null],[13,"EOSInString","","If EOS is ever found in the string, it causes an error.",5,null],[6,"HuffmanDecoderResult","","The type that represents the result of the `decode` method of the\n`HuffmanDecoder`.",null,null],[11,"eq","","",5,{"inputs":[{"name":"huffmandecodererror"},{"name":"huffmandecodererror"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"huffmandecodererror"},{"name":"huffmandecodererror"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"huffmandecodererror"}],"output":{"name":"huffmandecodererror"}}],[11,"fmt","","",5,{"inputs":[{"name":"huffmandecodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructs a new HuffmanDecoder with the default Huffman code table, as\ndefined in the HPACK-draft-10, Appendix B.",6,{"inputs":[],"output":{"name":"huffmandecoder"}}],[11,"decode","","Decodes the buffer `buf` into a newly allocated `Vec`.",6,null]],"paths":[[3,"Encoder"],[4,"IntegerDecodingError"],[4,"StringDecodingError"],[4,"DecoderError"],[3,"Decoder"],[4,"HuffmanDecoderError"],[3,"HuffmanDecoder"]]};
searchIndex["num_cpus"] = {"doc":"Replaces the deprecated functionality of std::os::num_cpus.","items":[[5,"get","num_cpus","Returns the number of CPUs of the current machine.",null,{"inputs":[],"output":{"name":"usize"}}]],"paths":[]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"utimbuf","libc","",null,null],[12,"actime","","",0,null],[12,"modtime","","",0,null],[3,"timeval","","",null,null],[12,"tv_sec","","",1,null],[12,"tv_usec","","",1,null],[3,"timespec","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_nsec","","",2,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",3,null],[12,"rlim_max","","",3,null],[3,"rusage","","",null,null],[12,"ru_utime","","",4,null],[12,"ru_stime","","",4,null],[12,"ru_maxrss","","",4,null],[12,"ru_ixrss","","",4,null],[12,"ru_idrss","","",4,null],[12,"ru_isrss","","",4,null],[12,"ru_minflt","","",4,null],[12,"ru_majflt","","",4,null],[12,"ru_nswap","","",4,null],[12,"ru_inblock","","",4,null],[12,"ru_oublock","","",4,null],[12,"ru_msgsnd","","",4,null],[12,"ru_msgrcv","","",4,null],[12,"ru_nsignals","","",4,null],[12,"ru_nvcsw","","",4,null],[12,"ru_nivcsw","","",4,null],[3,"in_addr","","",null,null],[12,"s_addr","","",5,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",6,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",7,null],[12,"imr_interface","","",7,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",8,null],[12,"ipv6mr_interface","","",8,null],[3,"hostent","","",null,null],[12,"h_name","","",9,null],[12,"h_aliases","","",9,null],[12,"h_addrtype","","",9,null],[12,"h_length","","",9,null],[12,"h_addr_list","","",9,null],[3,"iovec","","",null,null],[12,"iov_base","","",10,null],[12,"iov_len","","",10,null],[3,"pollfd","","",null,null],[12,"fd","","",11,null],[12,"events","","",11,null],[12,"revents","","",11,null],[3,"winsize","","",null,null],[12,"ws_row","","",12,null],[12,"ws_col","","",12,null],[12,"ws_xpixel","","",12,null],[12,"ws_ypixel","","",12,null],[3,"sockaddr","","",null,null],[12,"sa_len","","",13,null],[12,"sa_family","","",13,null],[12,"sa_data","","",13,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_len","","",14,null],[12,"sin6_family","","",14,null],[12,"sin6_port","","",14,null],[12,"sin6_flowinfo","","",14,null],[12,"sin6_addr","","",14,null],[12,"sin6_scope_id","","",14,null],[3,"sockaddr_un","","",null,null],[12,"sun_len","","",15,null],[12,"sun_family","","",15,null],[12,"sun_path","","",15,null],[3,"passwd","","",null,null],[12,"pw_name","","",16,null],[12,"pw_passwd","","",16,null],[12,"pw_uid","","",16,null],[12,"pw_gid","","",16,null],[12,"pw_change","","",16,null],[12,"pw_class","","",16,null],[12,"pw_gecos","","",16,null],[12,"pw_dir","","",16,null],[12,"pw_shell","","",16,null],[12,"pw_expire","","",16,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",17,null],[12,"ifa_name","","",17,null],[12,"ifa_flags","","",17,null],[12,"ifa_addr","","",17,null],[12,"ifa_netmask","","",17,null],[12,"ifa_dstaddr","","",17,null],[12,"ifa_data","","",17,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",18,null],[12,"tm_min","","",18,null],[12,"tm_hour","","",18,null],[12,"tm_mday","","",18,null],[12,"tm_mon","","",18,null],[12,"tm_year","","",18,null],[12,"tm_wday","","",18,null],[12,"tm_yday","","",18,null],[12,"tm_isdst","","",18,null],[12,"tm_gmtoff","","",18,null],[12,"tm_zone","","",18,null],[3,"utsname","","",null,null],[12,"sysname","","",19,null],[12,"nodename","","",19,null],[12,"release","","",19,null],[12,"version","","",19,null],[12,"machine","","",19,null],[3,"msghdr","","",null,null],[12,"msg_name","","",20,null],[12,"msg_namelen","","",20,null],[12,"msg_iov","","",20,null],[12,"msg_iovlen","","",20,null],[12,"msg_control","","",20,null],[12,"msg_controllen","","",20,null],[12,"msg_flags","","",20,null],[3,"fsid_t","","",null,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",21,null],[12,"gl_offs","","",21,null],[12,"gl_pathv","","",21,null],[3,"sockaddr_storage","","",null,null],[12,"ss_len","","",22,null],[12,"ss_family","","",22,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",23,null],[12,"ai_family","","",23,null],[12,"ai_socktype","","",23,null],[12,"ai_protocol","","",23,null],[12,"ai_addrlen","","",23,null],[12,"ai_canonname","","",23,null],[12,"ai_addr","","",23,null],[12,"ai_next","","",23,null],[3,"mach_timebase_info","","",null,null],[12,"numer","","",24,null],[12,"denom","","",24,null],[3,"stat","","",null,null],[12,"st_dev","","",25,null],[12,"st_mode","","",25,null],[12,"st_nlink","","",25,null],[12,"st_ino","","",25,null],[12,"st_uid","","",25,null],[12,"st_gid","","",25,null],[12,"st_rdev","","",25,null],[12,"st_atime","","",25,null],[12,"st_atime_nsec","","",25,null],[12,"st_mtime","","",25,null],[12,"st_mtime_nsec","","",25,null],[12,"st_ctime","","",25,null],[12,"st_ctime_nsec","","",25,null],[12,"st_birthtime","","",25,null],[12,"st_birthtime_nsec","","",25,null],[12,"st_size","","",25,null],[12,"st_blocks","","",25,null],[12,"st_blksize","","",25,null],[12,"st_flags","","",25,null],[12,"st_gen","","",25,null],[12,"st_lspare","","",25,null],[12,"st_qspare","","",25,null],[3,"dirent","","",null,null],[12,"d_ino","","",26,null],[12,"d_seekoff","","",26,null],[12,"d_reclen","","",26,null],[12,"d_namlen","","",26,null],[12,"d_type","","",26,null],[12,"d_name","","",26,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",27,null],[12,"si_errno","","",27,null],[12,"si_code","","",27,null],[12,"si_pid","","",27,null],[12,"si_uid","","",27,null],[12,"si_status","","",27,null],[12,"si_addr","","",27,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",28,null],[12,"sa_mask","","",28,null],[12,"sa_flags","","",28,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",29,null],[12,"ss_size","","",29,null],[12,"ss_flags","","",29,null],[3,"fstore_t","","",null,null],[12,"fst_flags","","",30,null],[12,"fst_posmode","","",30,null],[12,"fst_offset","","",30,null],[12,"fst_length","","",30,null],[12,"fst_bytesalloc","","",30,null],[3,"radvisory","","",null,null],[12,"ra_offset","","",31,null],[12,"ra_count","","",31,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",32,null],[12,"f_frsize","","",32,null],[12,"f_blocks","","",32,null],[12,"f_bfree","","",32,null],[12,"f_bavail","","",32,null],[12,"f_files","","",32,null],[12,"f_ffree","","",32,null],[12,"f_favail","","",32,null],[12,"f_fsid","","",32,null],[12,"f_flag","","",32,null],[12,"f_namemax","","",32,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",33,null],[12,"dli_fbase","","",33,null],[12,"dli_sname","","",33,null],[12,"dli_saddr","","",33,null],[3,"sockaddr_in","","",null,null],[12,"sin_len","","",34,null],[12,"sin_family","","",34,null],[12,"sin_port","","",34,null],[12,"sin_addr","","",34,null],[12,"sin_zero","","",34,null],[3,"statfs","","",null,null],[12,"f_bsize","","",35,null],[12,"f_iosize","","",35,null],[12,"f_blocks","","",35,null],[12,"f_bfree","","",35,null],[12,"f_bavail","","",35,null],[12,"f_files","","",35,null],[12,"f_ffree","","",35,null],[12,"f_fsid","","",35,null],[12,"f_owner","","",35,null],[12,"f_type","","",35,null],[12,"f_flags","","",35,null],[12,"f_fssubtype","","",35,null],[12,"f_fstypename","","",35,null],[12,"f_mntonname","","",35,null],[12,"f_mntfromname","","",35,null],[12,"f_reserved","","",35,null],[3,"kevent","","",null,null],[12,"ident","","",36,null],[12,"filter","","",36,null],[12,"flags","","",36,null],[12,"fflags","","",36,null],[12,"data","","",36,null],[12,"udata","","",36,null],[3,"kevent64_s","","",null,null],[12,"ident","","",37,null],[12,"filter","","",37,null],[12,"flags","","",37,null],[12,"fflags","","",37,null],[12,"data","","",37,null],[12,"udata","","",37,null],[12,"ext","","",37,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",38,null],[12,"dqb_bsoftlimit","","",38,null],[12,"dqb_curbytes","","",38,null],[12,"dqb_ihardlimit","","",38,null],[12,"dqb_isoftlimit","","",38,null],[12,"dqb_curinodes","","",38,null],[12,"dqb_btime","","",38,null],[12,"dqb_itime","","",38,null],[12,"dqb_id","","",38,null],[12,"dqb_spare","","",38,null],[3,"termios","","",null,null],[12,"c_iflag","","",39,null],[12,"c_oflag","","",39,null],[12,"c_cflag","","",39,null],[12,"c_lflag","","",39,null],[12,"c_cc","","",39,null],[12,"c_ispeed","","",39,null],[12,"c_ospeed","","",39,null],[3,"flock","","",null,null],[12,"l_start","","",40,null],[12,"l_len","","",40,null],[12,"l_pid","","",40,null],[12,"l_type","","",40,null],[12,"l_whence","","",40,null],[3,"sf_hdtr","","",null,null],[12,"headers","","",41,null],[12,"hdr_cnt","","",41,null],[12,"trailers","","",41,null],[12,"trl_cnt","","",41,null],[3,"lconv","","",null,null],[12,"decimal_point","","",42,null],[12,"thousands_sep","","",42,null],[12,"grouping","","",42,null],[12,"int_curr_symbol","","",42,null],[12,"currency_symbol","","",42,null],[12,"mon_decimal_point","","",42,null],[12,"mon_thousands_sep","","",42,null],[12,"mon_grouping","","",42,null],[12,"positive_sign","","",42,null],[12,"negative_sign","","",42,null],[12,"int_frac_digits","","",42,null],[12,"frac_digits","","",42,null],[12,"p_cs_precedes","","",42,null],[12,"p_sep_by_space","","",42,null],[12,"n_cs_precedes","","",42,null],[12,"n_sep_by_space","","",42,null],[12,"p_sign_posn","","",42,null],[12,"n_sign_posn","","",42,null],[12,"int_p_cs_precedes","","",42,null],[12,"int_n_cs_precedes","","",42,null],[12,"int_p_sep_by_space","","",42,null],[12,"int_n_sep_by_space","","",42,null],[12,"int_p_sign_posn","","",42,null],[12,"int_n_sign_posn","","",42,null],[3,"pthread_attr_t","","",null,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"_WSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFCONTINUED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memcmp","","",null,null],[5,"memchr","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"chown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"getdtablesize","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_create","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"pthread_kill","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"sigaltstack","","",null,null],[5,"sigwait","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"mknod","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"uname","","",null,null],[5,"daemon","","",null,null],[5,"gethostname","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"getsid","","",null,null],[5,"madvise","","",null,null],[5,"readlink","","",null,null],[5,"msync","","",null,null],[5,"sysconf","","",null,null],[5,"recvfrom","","",null,null],[5,"mkfifo","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"timegm","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkstemps","","",null,null],[5,"mkdtemp","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"setgroups","","",null,null],[5,"ioctl","","",null,null],[5,"kqueue","","",null,null],[5,"unmount","","",null,null],[5,"syscall","","",null,null],[5,"getpwuid_r","","",null,null],[5,"getnameinfo","","",null,null],[5,"mincore","","",null,null],[5,"sysctlnametomib","","",null,null],[5,"mprotect","","",null,null],[5,"shm_open","","",null,null],[5,"sysctl","","",null,null],[5,"sysctlbyname","","",null,null],[5,"mach_absolute_time","","",null,null],[5,"mach_timebase_info","","",null,null],[5,"pthread_setname_np","","",null,null],[5,"pthread_get_stackaddr_np","","",null,null],[5,"pthread_get_stacksize_np","","",null,null],[5,"__error","","",null,null],[5,"backtrace","","",null,null],[5,"statfs","","",null,null],[5,"fstatfs","","",null,null],[5,"kevent","","",null,null],[5,"kevent64","","",null,null],[5,"mount","","",null,null],[5,"ptrace","","",null,null],[5,"quotactl","","",null,null],[5,"sethostname","","",null,null],[5,"sendfile","","",null,null],[5,"openpty","","",null,null],[5,"forkpty","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"localeconv_l","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"querylocale","","",null,null],[11,"is_some","core::option","Returns `true` if the option is a `Some` value",43,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",43,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",43,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",43,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",43,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",43,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",43,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",43,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",43,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",43,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",43,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",43,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",43,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",43,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",43,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",43,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",43,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",43,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",43,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",43,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",43,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",43,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"default","core::num","",44,{"inputs":[],"output":{"name":"wrapping"}}],[11,"fmt","","",44,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"cmp","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"option"}}],[11,"lt","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"eq","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"shl","","",44,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",44,null],[11,"shr","","",44,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",44,null],[11,"shl","","",44,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",44,null],[11,"shr","","",44,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",44,null],[11,"shl","","",44,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",44,null],[11,"shr","","",44,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",44,null],[11,"shl","","",44,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",44,null],[11,"shr","","",44,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",44,null],[11,"shl","","",44,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",44,null],[11,"shr","","",44,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",44,null],[11,"shl","","",44,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",44,null],[11,"shr","","",44,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",44,null],[11,"shl","","",44,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",44,null],[11,"shr","","",44,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",44,null],[11,"shl","","",44,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",44,null],[11,"shr","","",44,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",44,null],[11,"shl","","",44,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",44,null],[11,"shr","","",44,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",44,null],[11,"shl","","",44,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",44,null],[11,"shr","","",44,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",44,null],[11,"add","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",44,null],[11,"sub","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",44,null],[11,"mul","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",44,null],[11,"div","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",44,null],[11,"rem","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",44,null],[11,"not","","",44,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",44,null],[11,"bitor","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",44,null],[11,"bitand","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",44,null],[11,"add","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",44,null],[11,"sub","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",44,null],[11,"mul","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",44,null],[11,"div","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",44,null],[11,"rem","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",44,null],[11,"not","","",44,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",44,null],[11,"bitor","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",44,null],[11,"bitand","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",44,null],[11,"add","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",44,null],[11,"sub","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",44,null],[11,"mul","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",44,null],[11,"div","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",44,null],[11,"rem","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",44,null],[11,"not","","",44,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",44,null],[11,"bitor","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",44,null],[11,"bitand","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",44,null],[11,"add","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",44,null],[11,"sub","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",44,null],[11,"mul","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",44,null],[11,"div","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",44,null],[11,"rem","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",44,null],[11,"not","","",44,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",44,null],[11,"bitor","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",44,null],[11,"bitand","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",44,null],[11,"add","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",44,null],[11,"sub","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",44,null],[11,"mul","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",44,null],[11,"div","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",44,null],[11,"rem","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",44,null],[11,"not","","",44,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",44,null],[11,"bitor","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",44,null],[11,"bitand","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",44,null],[11,"add","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",44,null],[11,"sub","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",44,null],[11,"mul","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",44,null],[11,"div","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",44,null],[11,"rem","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",44,null],[11,"not","","",44,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",44,null],[11,"bitor","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",44,null],[11,"bitand","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",44,null],[11,"add","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",44,null],[11,"sub","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",44,null],[11,"mul","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",44,null],[11,"div","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",44,null],[11,"rem","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",44,null],[11,"not","","",44,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",44,null],[11,"bitor","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",44,null],[11,"bitand","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",44,null],[11,"add","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",44,null],[11,"sub","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",44,null],[11,"mul","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",44,null],[11,"div","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",44,null],[11,"rem","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",44,null],[11,"not","","",44,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",44,null],[11,"bitor","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",44,null],[11,"bitand","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",44,null],[11,"add","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",44,null],[11,"sub","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",44,null],[11,"mul","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",44,null],[11,"div","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",44,null],[11,"rem","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",44,null],[11,"not","","",44,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",44,null],[11,"bitor","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",44,null],[11,"bitand","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",44,null],[11,"add","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",44,null],[11,"sub","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",44,null],[11,"mul","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",44,null],[11,"div","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",44,null],[11,"rem","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",44,null],[11,"not","","",44,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",44,null],[11,"bitor","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",44,null],[11,"bitand","","",44,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",44,null],[11,"fmt","","",45,{"inputs":[{"name":"fpcategory"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",45,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"clone","","",45,{"inputs":[{"name":"fpcategory"}],"output":{"name":"fpcategory"}}],[11,"eq","","",46,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"clone","","",46,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parseinterror"}}],[11,"fmt","","",46,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",47,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",47,{"inputs":[{"name":"interrorkind"}],"output":{"name":"interrorkind"}}],[11,"fmt","","",47,{"inputs":[{"name":"interrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::nonzero","",48,null],[11,"fmt","","",48,{"inputs":[{"name":"nonzero"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",48,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"option"}}],[11,"lt","","",48,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"le","","",48,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"gt","","",48,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ge","","",48,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"cmp","","",48,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"ordering"}}],[11,"eq","","",48,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"clone","","",48,{"inputs":[{"name":"nonzero"}],"output":{"name":"nonzero"}}],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually &quot;non-zero&quot;.",48,{"inputs":[{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",48,{"inputs":[{"name":"nonzero"}],"output":{"name":"t"}}],[11,"new","core::ptr","Creates a new `Unique`.",49,null],[11,"get","","Dereferences the content.",49,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",49,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"deref","","",49,null],[11,"fmt","","",49,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Shared`.",50,null],[11,"clone","","",50,{"inputs":[{"name":"shared"}],"output":{"name":"shared"}}],[11,"deref","","",50,null],[11,"fmt","","",50,{"inputs":[{"name":"shared"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::marker","",51,null],[11,"eq","","",51,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",51,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",51,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",51,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"default","","",51,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",52,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"clone","","",52,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"fmt","","",52,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",53,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",53,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"fmt","","",53,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",54,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"clone","","",54,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"fmt","","",54,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",55,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"clone","","",55,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"fmt","","",55,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cmp","",56,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",56,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"clone","","",56,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",56,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","","",56,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",56,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"fmt","libc","",57,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",57,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns true if the boxed type is the same as `T`",57,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",57,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",57,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",57,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",57,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",57,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"hash","core::any","",58,null],[11,"fmt","","",58,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",58,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"clone","","",58,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",58,{"inputs":[],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",59,{"inputs":[],"output":{"name":"atomicbool"}}],[11,"default","","",60,{"inputs":[],"output":{"name":"atomicisize"}}],[11,"default","","",61,{"inputs":[],"output":{"name":"atomicusize"}}],[11,"default","","",62,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"clone","","",63,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new `AtomicBool`.",59,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",59,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",59,null],[11,"swap","","Stores a value into the bool, returning the old value.",59,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",59,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",59,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",59,null],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",59,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",59,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",59,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",59,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicIsize`.",60,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",60,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",60,null],[11,"swap","","Stores a value into the isize, returning the old value.",60,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the `isize` if the current value is the same as the `current` value.",60,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_exchange","","Stores a value into the `isize` if the current value is the same as the `current` value.",60,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_exchange_weak","","Stores a value into the `isize if the current value is the same as the `current` value.",60,null],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",60,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",60,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",60,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",60,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",60,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","Creates a new `AtomicUsize`.",61,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",61,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",61,null],[11,"swap","","Stores a value into the usize, returning the old value.",61,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the `usize` if the current value is the same as the `current` value.",61,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_exchange","","Stores a value into the `usize` if the current value is the same as the `current` value.",61,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_exchange_weak","","Stores a value into the `usize` if the current value is the same as the `current` value.",61,null],[11,"fetch_add","","Add to the current usize, returning the previous value.",61,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",61,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",61,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",61,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",61,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"new","","Creates a new `AtomicPtr`.",62,null],[11,"load","","Loads a value from the pointer.",62,null],[11,"store","","Stores a value into the pointer.",62,null],[11,"swap","","Stores a value into the pointer, returning the old value.",62,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",62,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",62,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",62,null],[11,"fmt","","",61,{"inputs":[{"name":"atomicusize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"atomicisize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"atomicbool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",62,{"inputs":[{"name":"atomicptr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","core::cell","Creates a new `Cell` containing the given value.",64,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",64,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",64,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",64,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",64,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"default","","",64,{"inputs":[],"output":{"name":"cell"}}],[11,"eq","","",64,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"fmt","","",65,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",65,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"clone","","",65,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"new","","Creates a new `RefCell` containing `value`.",66,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",66,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",66,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",66,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",66,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",66,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",66,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"default","","",66,{"inputs":[],"output":{"name":"refcell"}}],[11,"eq","","",66,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"drop","","",67,null],[11,"clone","","",67,{"inputs":[{"name":"borrowref"}],"output":{"name":"borrowref"}}],[11,"deref","","",68,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",68,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",68,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",68,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",69,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",69,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"drop","","",70,null],[11,"deref","","",69,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",69,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",71,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",71,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",71,null],[11,"clone","core::char","",72,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"escapeunicode"}}],[11,"clone","","",73,{"inputs":[{"name":"escapeunicodestate"}],"output":{"name":"escapeunicodestate"}}],[11,"next","","",72,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"option"}}],[11,"size_hint","","",72,null],[11,"clone","","",74,{"inputs":[{"name":"escapedefault"}],"output":{"name":"escapedefault"}}],[11,"clone","","",75,{"inputs":[{"name":"escapedefaultstate"}],"output":{"name":"escapedefaultstate"}}],[11,"next","","",74,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",74,null],[11,"count","","",74,{"inputs":[{"name":"escapedefault"}],"output":{"name":"usize"}}],[11,"nth","","",74,{"inputs":[{"name":"escapedefault"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",74,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"clone","core::iter","",76,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"next","","",76,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",76,null],[11,"next_back","","",76,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"clone","","",77,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"next","","",77,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",77,null],[11,"next_back","","",77,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"clone","","",78,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"next","","",78,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",78,null],[11,"clone","","",79,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"clone","","",80,{"inputs":[{"name":"chainstate"}],"output":{"name":"chainstate"}}],[11,"next","","",79,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",79,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",79,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",79,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",79,null],[11,"next_back","","",79,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"clone","","",81,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"next","","",81,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",81,null],[11,"next_back","","",81,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"clone","","",82,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"next","","",82,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",82,null],[11,"next_back","","",82,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"clone","","",83,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"next","","",83,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",83,null],[11,"next_back","","",83,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"clone","","",84,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"next","","",84,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",84,null],[11,"next_back","","",84,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"clone","","",85,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"next","","# Overflow Behavior",85,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",85,null],[11,"nth","","",85,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",85,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"next_back","","",85,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"clone","","",86,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"next","","",86,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",86,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",86,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",86,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",86,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",86,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks if the iterator has finished iterating.",86,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"clone","","",87,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"next","","",87,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",87,null],[11,"clone","","",88,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"next","","",88,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",88,null],[11,"clone","","",89,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",89,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",89,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",89,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",89,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",89,null],[11,"clone","","",90,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"next","","",90,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",90,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",90,null],[11,"clone","","",91,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[11,"next","","",91,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",91,null],[11,"clone","","",92,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"next","","",92,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",92,null],[11,"next_back","","",92,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"clone","","",93,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"next","","",93,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",93,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",93,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",93,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",93,null],[11,"next_back","","",93,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"clone","","",94,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"next","","",94,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",94,null],[11,"next_back","","",94,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"clone","","",95,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",54,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",53,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","core::iter","",95,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",95,null],[11,"clone","","",96,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",96,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",96,null],[11,"next_back","","",96,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"next","","",95,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",95,null],[11,"next","core::ops","",53,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",53,null],[11,"next_back","","",53,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",54,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"clone","core::iter","",97,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"next","","",97,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",97,null],[11,"next_back","","",97,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"next","","",98,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",98,null],[11,"next_back","","",98,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"len","","",98,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"clone","","",98,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"default","","",98,{"inputs":[],"output":{"name":"empty"}}],[11,"clone","","",99,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"next","","",99,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",99,null],[11,"next_back","","",99,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"len","","",99,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"hash","core::option","",43,null],[11,"fmt","","",43,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",43,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",43,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",43,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",43,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",43,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",43,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",43,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",43,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"default","","",43,{"inputs":[],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",43,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"clone","","",100,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[11,"next","","",100,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"size_hint","","",100,null],[11,"next_back","","",100,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"next","","",101,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",101,null],[11,"next_back","","",101,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",101,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",102,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",102,null],[11,"next_back","","",102,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",103,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",103,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",103,null],[11,"next_back","","",103,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",43,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",104,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"clone","","",105,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[11,"hash","core::result","",106,null],[11,"fmt","","",106,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",106,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",106,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",106,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",106,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",106,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",106,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","","",106,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",106,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"clone","","",106,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"is_ok","","Returns true if the result is `Ok`",106,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",106,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",106,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",106,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",106,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",106,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",106,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",106,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",106,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",106,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",106,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",106,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",106,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",106,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",106,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",106,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",106,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",106,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",106,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",106,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"next","","",107,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",107,null],[11,"next_back","","",107,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",107,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",108,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",108,null],[11,"next_back","","",108,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",109,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",109,null],[11,"next_back","","",109,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",106,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"as_slice","core::slice","View the underlying data as a subslice of the original data.",110,null],[11,"next","","",110,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",110,null],[11,"count","","",110,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"nth","","",110,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",110,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",110,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",110,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"into_slice","","View the underlying data as a subslice of the original data.",111,null],[11,"next","","",111,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",111,null],[11,"count","","",111,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"nth","","",111,{"inputs":[{"name":"itermut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",111,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next_back","","",111,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",112,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",112,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"size_hint","","",112,null],[11,"next_back","","",112,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",112,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",113,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",113,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"size_hint","","",113,null],[11,"next_back","","",113,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",114,{"inputs":[{"name":"genericsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",114,null],[11,"next","","",115,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"size_hint","","",115,null],[11,"next","","",116,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",116,null],[11,"next","","",117,{"inputs":[{"name":"splitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",117,null],[11,"next","","",118,{"inputs":[{"name":"rsplitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",118,null],[11,"clone","","",119,{"inputs":[{"name":"windows"}],"output":{"name":"windows"}}],[11,"next","","",119,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"size_hint","","",119,null],[11,"count","","",119,{"inputs":[{"name":"windows"}],"output":{"name":"usize"}}],[11,"nth","","",119,{"inputs":[{"name":"windows"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",119,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"next_back","","",119,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"clone","","",120,{"inputs":[{"name":"chunks"}],"output":{"name":"chunks"}}],[11,"next","","",120,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"size_hint","","",120,null],[11,"count","","",120,{"inputs":[{"name":"chunks"}],"output":{"name":"usize"}}],[11,"nth","","",120,{"inputs":[{"name":"chunks"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",120,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next_back","","",120,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next","","",121,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"size_hint","","",121,null],[11,"count","","",121,{"inputs":[{"name":"chunksmut"}],"output":{"name":"usize"}}],[11,"nth","","",121,{"inputs":[{"name":"chunksmut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",121,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"next_back","","",121,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"fmt","core::str::pattern","",122,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",122,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",122,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",122,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",123,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[11,"into_searcher","","",124,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",123,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",123,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",123,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",125,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",125,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",125,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",125,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",125,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",125,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",125,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",125,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",126,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",126,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",126,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",126,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",126,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",126,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",126,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",126,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",127,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",127,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",127,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",127,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",127,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",127,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",127,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",127,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",128,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",128,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",129,{"inputs":[{"name":"strsearcherimpl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",129,{"inputs":[{"name":"strsearcherimpl"}],"output":{"name":"strsearcherimpl"}}],[11,"fmt","","",130,{"inputs":[{"name":"emptyneedle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",130,{"inputs":[{"name":"emptyneedle"}],"output":{"name":"emptyneedle"}}],[11,"haystack","","",128,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",128,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",128,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",128,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",128,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",131,{"inputs":[{"name":"twowaysearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",131,{"inputs":[{"name":"twowaysearcher"}],"output":{"name":"twowaysearcher"}}],[11,"use_early_reject","","",132,{"inputs":[],"output":{"name":"bool"}}],[11,"rejecting","","",132,null],[11,"matching","","",132,null],[11,"use_early_reject","","",133,{"inputs":[],"output":{"name":"bool"}}],[11,"rejecting","","",133,null],[11,"matching","","",133,null],[11,"eq","core::str","",134,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",134,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"clone","","",134,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"parseboolerror"}}],[11,"fmt","","",134,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",134,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",135,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",135,{"inputs":[{"name":"utf8error"}],"output":{"name":"utf8error"}}],[11,"eq","","",135,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",135,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",135,{"inputs":[{"name":"utf8error"}],"output":{"name":"usize"}}],[11,"fmt","","",135,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",136,{"inputs":[{"name":"chars"}],"output":{"name":"chars"}}],[11,"next","","",136,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"size_hint","","",136,null],[11,"next_back","","",136,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",136,{"inputs":[{"name":"chars"}],"output":{"name":"str"}}],[11,"clone","","",137,{"inputs":[{"name":"charindices"}],"output":{"name":"charindices"}}],[11,"next","","",137,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"size_hint","","",137,null],[11,"next_back","","",137,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",137,{"inputs":[{"name":"charindices"}],"output":{"name":"str"}}],[11,"clone","","",138,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"next","","",138,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"size_hint","","",138,null],[11,"count","","",138,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"last","","",138,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"nth","","",138,{"inputs":[{"name":"bytes"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next_back","","",138,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"len","","",138,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"clone","","",139,{"inputs":[{"name":"splitinternal"}],"output":{"name":"splitinternal"}}],[11,"next","","",140,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"clone","","",140,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",141,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"clone","","",141,{"inputs":[{"name":"rsplit"}],"output":{"name":"rsplit"}}],[11,"next_back","","",140,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next_back","","",141,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"next","","",142,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"clone","","",142,{"inputs":[{"name":"splitterminator"}],"output":{"name":"splitterminator"}}],[11,"next","","",143,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",143,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"rsplitterminator"}}],[11,"next_back","","",142,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"next_back","","",143,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",144,{"inputs":[{"name":"splitninternal"}],"output":{"name":"splitninternal"}}],[11,"next","","",145,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"clone","","",145,{"inputs":[{"name":"splitn"}],"output":{"name":"splitn"}}],[11,"next","","",146,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"clone","","",146,{"inputs":[{"name":"rsplitn"}],"output":{"name":"rsplitn"}}],[11,"clone","","",147,{"inputs":[{"name":"matchindicesinternal"}],"output":{"name":"matchindicesinternal"}}],[11,"next","","",148,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"clone","","",148,{"inputs":[{"name":"matchindices"}],"output":{"name":"matchindices"}}],[11,"next","","",149,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",149,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"rmatchindices"}}],[11,"next_back","","",148,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"next_back","","",149,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",150,{"inputs":[{"name":"matchesinternal"}],"output":{"name":"matchesinternal"}}],[11,"next","","",151,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"clone","","",151,{"inputs":[{"name":"matches"}],"output":{"name":"matches"}}],[11,"next","","",152,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",152,{"inputs":[{"name":"rmatches"}],"output":{"name":"rmatches"}}],[11,"next_back","","",151,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"next_back","","",152,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",153,{"inputs":[{"name":"lines"}],"output":{"name":"lines"}}],[11,"next","","",153,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"size_hint","","",153,null],[11,"next_back","","",153,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"clone","","",154,{"inputs":[{"name":"linesany"}],"output":{"name":"linesany"}}],[11,"clone","","",155,{"inputs":[{"name":"linesanymap"}],"output":{"name":"linesanymap"}}],[11,"call","","",155,null],[11,"call_mut","","",155,null],[11,"call_once","","",155,null],[11,"next","","",154,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"size_hint","","",154,null],[11,"next_back","","",154,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"clone","","",156,{"inputs":[{"name":"charrange"}],"output":{"name":"charrange"}}],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",157,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",157,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",157,null],[11,"finish","","",157,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"clone","","",157,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"default","","",157,{"inputs":[],"output":{"name":"siphasher"}}],[11,"build_hasher","core::hash","",158,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"h"}}],[11,"clone","","",158,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"buildhasherdefault"}}],[11,"default","","",158,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"eq","core::fmt::num","",159,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"ne","","",159,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"clone","","",159,{"inputs":[{"name":"binary"}],"output":{"name":"binary"}}],[11,"eq","","",160,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"ne","","",160,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"clone","","",160,{"inputs":[{"name":"octal"}],"output":{"name":"octal"}}],[11,"eq","","",161,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",161,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"clone","","",161,{"inputs":[{"name":"decimal"}],"output":{"name":"decimal"}}],[11,"eq","","",162,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"ne","","",162,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"clone","","",162,{"inputs":[{"name":"lowerhex"}],"output":{"name":"lowerhex"}}],[11,"eq","","",163,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"ne","","",163,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"clone","","",163,{"inputs":[{"name":"upperhex"}],"output":{"name":"upperhex"}}],[11,"eq","","",164,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"ne","","",164,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"clone","","",164,{"inputs":[{"name":"radix"}],"output":{"name":"radix"}}],[11,"clone","","",165,{"inputs":[{"name":"radixfmt"}],"output":{"name":"radixfmt"}}],[11,"fmt","","",165,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",165,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",165,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",165,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",165,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",165,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",165,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",165,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",165,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",165,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",165,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",165,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",165,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",165,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",165,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",165,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",165,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",165,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",165,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",165,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_str","core::fmt::builders","",166,{"inputs":[{"name":"padadapter"},{"name":"str"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated struct output.",167,{"inputs":[{"name":"debugstruct"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",167,{"inputs":[{"name":"debugstruct"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated tuple struct output.",168,{"inputs":[{"name":"debugtuple"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",168,{"inputs":[{"name":"debugtuple"}],"output":{"name":"result"}}],[11,"formatter","","Returns the wrapped `Formatter`.",168,{"inputs":[{"name":"debugtuple"}],"output":{"name":"formatter"}}],[11,"finish","","",169,null],[11,"entry","","Adds a new entry to the set output.",170,{"inputs":[{"name":"debugset"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",170,{"inputs":[{"name":"debugset"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",170,{"inputs":[{"name":"debugset"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the list output.",171,{"inputs":[{"name":"debuglist"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",171,{"inputs":[{"name":"debuglist"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",171,{"inputs":[{"name":"debuglist"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the map output.",172,{"inputs":[{"name":"debugmap"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",172,{"inputs":[{"name":"debugmap"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",172,{"inputs":[{"name":"debugmap"}],"output":{"name":"result"}}],[11,"fmt","core::fmt","",173,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",173,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"clone","","",174,{"inputs":[{"name":"argumentv1"}],"output":{"name":"argumentv1"}}],[11,"clone","","",175,{"inputs":[{"name":"flagv1"}],"output":{"name":"flagv1"}}],[11,"clone","","",176,{"inputs":[{"name":"arguments"}],"output":{"name":"arguments"}}],[11,"fmt","","",176,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",176,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",177,{"inputs":[{"name":"formatter"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",177,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",177,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",177,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting (packed version of rt::Flag)",177,{"inputs":[{"name":"formatter"}],"output":{"name":"u32"}}],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",177,{"inputs":[{"name":"formatter"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",177,{"inputs":[{"name":"formatter"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",177,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",177,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",177,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",177,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",177,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",177,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",177,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",177,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",177,{"inputs":[{"name":"formatter"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",177,{"inputs":[{"name":"formatter"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",177,{"inputs":[{"name":"formatter"}],"output":{"name":"debugmap"}}],[11,"write_str","","",177,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",177,{"inputs":[{"name":"formatter"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",177,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"fmt","","",173,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::marker","",51,{"inputs":[{"name":"phantomdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cell","",64,{"inputs":[{"name":"cell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",66,{"inputs":[{"name":"refcell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",68,{"inputs":[{"name":"ref"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",69,{"inputs":[{"name":"refmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone_from","libc::dox","Performs copy-assignment from `source`.",178,null],[11,"clone_from","libc::dox::imp","Performs copy-assignment from `source`.",178,null],[11,"clone","libc","",179,{"inputs":[{"name":"pthread_attr_t"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","","",21,{"inputs":[{"name":"glob_t"}],"output":{"name":"glob_t"}}],[11,"clone","","",22,{"inputs":[{"name":"sockaddr_storage"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",23,{"inputs":[{"name":"addrinfo"}],"output":{"name":"addrinfo"}}],[11,"clone","","",24,{"inputs":[{"name":"mach_timebase_info"}],"output":{"name":"mach_timebase_info"}}],[11,"clone","","",25,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"clone","","",26,{"inputs":[{"name":"dirent"}],"output":{"name":"dirent"}}],[11,"clone","","",180,{"inputs":[{"name":"pthread_mutex_t"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",181,{"inputs":[{"name":"pthread_mutexattr_t"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",182,{"inputs":[{"name":"pthread_cond_t"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",183,{"inputs":[{"name":"pthread_rwlock_t"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",27,{"inputs":[{"name":"siginfo_t"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",28,{"inputs":[{"name":"sigaction"}],"output":{"name":"sigaction"}}],[11,"clone","","",29,{"inputs":[{"name":"stack_t"}],"output":{"name":"stack_t"}}],[11,"clone","","",30,{"inputs":[{"name":"fstore_t"}],"output":{"name":"fstore_t"}}],[11,"clone","","",31,{"inputs":[{"name":"radvisory"}],"output":{"name":"radvisory"}}],[11,"clone","","",32,{"inputs":[{"name":"statvfs"}],"output":{"name":"statvfs"}}],[11,"clone","","",33,{"inputs":[{"name":"dl_info"}],"output":{"name":"dl_info"}}],[11,"clone","","",34,{"inputs":[{"name":"sockaddr_in"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",35,{"inputs":[{"name":"statfs"}],"output":{"name":"statfs"}}],[11,"clone","","",36,{"inputs":[{"name":"kevent"}],"output":{"name":"kevent"}}],[11,"clone","","",37,{"inputs":[{"name":"kevent64_s"}],"output":{"name":"kevent64_s"}}],[11,"clone","","",38,{"inputs":[{"name":"dqblk"}],"output":{"name":"dqblk"}}],[11,"clone","","",39,{"inputs":[{"name":"termios"}],"output":{"name":"termios"}}],[11,"clone","","",40,{"inputs":[{"name":"flock"}],"output":{"name":"flock"}}],[11,"clone","","",41,{"inputs":[{"name":"sf_hdtr"}],"output":{"name":"sf_hdtr"}}],[11,"clone","","",42,{"inputs":[{"name":"lconv"}],"output":{"name":"lconv"}}],[11,"clone","","",13,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"clone","","",14,{"inputs":[{"name":"sockaddr_in6"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",15,{"inputs":[{"name":"sockaddr_un"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",16,{"inputs":[{"name":"passwd"}],"output":{"name":"passwd"}}],[11,"clone","","",17,{"inputs":[{"name":"ifaddrs"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",184,{"inputs":[{"name":"fd_set"}],"output":{"name":"fd_set"}}],[11,"clone","","",18,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"clone","","",19,{"inputs":[{"name":"utsname"}],"output":{"name":"utsname"}}],[11,"clone","","",20,{"inputs":[{"name":"msghdr"}],"output":{"name":"msghdr"}}],[11,"clone","","",185,{"inputs":[{"name":"fsid_t"}],"output":{"name":"fsid_t"}}],[11,"clone","","",0,{"inputs":[{"name":"utimbuf"}],"output":{"name":"utimbuf"}}],[11,"clone","","",1,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"clone","","",2,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"clone","","",3,{"inputs":[{"name":"rlimit"}],"output":{"name":"rlimit"}}],[11,"clone","","",4,{"inputs":[{"name":"rusage"}],"output":{"name":"rusage"}}],[11,"clone","","",5,{"inputs":[{"name":"in_addr"}],"output":{"name":"in_addr"}}],[11,"clone","","",6,{"inputs":[{"name":"in6_addr"}],"output":{"name":"in6_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",8,{"inputs":[{"name":"ipv6_mreq"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"hostent"}],"output":{"name":"hostent"}}],[11,"clone","","",10,{"inputs":[{"name":"iovec"}],"output":{"name":"iovec"}}],[11,"clone","","",11,{"inputs":[{"name":"pollfd"}],"output":{"name":"pollfd"}}],[11,"clone","","",12,{"inputs":[{"name":"winsize"}],"output":{"name":"winsize"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"off_t","","",null,null],[6,"useconds_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"socklen_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_t","","",null,null],[6,"nfds_t","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"ino_t","","",null,null],[6,"mode_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"rlim_t","","",null,null],[6,"mach_timebase_info_data_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"sigset_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"nl_item","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PATH_MAX","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGINFO","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"CTL_HW","","",null,null],[17,"HW_NCPU","","",null,null],[17,"EV_ADD","","",null,null],[17,"EV_CLEAR","","",null,null],[17,"EV_DELETE","","",null,null],[17,"EV_DISABLE","","",null,null],[17,"EV_ENABLE","","",null,null],[17,"EV_EOF","","",null,null],[17,"EV_ERROR","","",null,null],[17,"EV_FLAG1","","",null,null],[17,"EV_ONESHOT","","",null,null],[17,"EV_SYSFLAGS","","",null,null],[17,"NOTE_ATTRIB","","",null,null],[17,"NOTE_CHILD","","",null,null],[17,"NOTE_DELETE","","",null,null],[17,"NOTE_EXEC","","",null,null],[17,"NOTE_EXIT","","",null,null],[17,"NOTE_EXTEND","","",null,null],[17,"NOTE_FORK","","",null,null],[17,"NOTE_LINK","","",null,null],[17,"NOTE_LOWAT","","",null,null],[17,"NOTE_PDATAMASK","","",null,null],[17,"NOTE_RENAME","","",null,null],[17,"NOTE_REVOKE","","",null,null],[17,"NOTE_TRACK","","",null,null],[17,"NOTE_TRACKERR","","",null,null],[17,"NOTE_WRITE","","",null,null],[17,"NCCS","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"VEOF","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VERASE","","",null,null],[17,"VWERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VREPRINT","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VLNEXT","","",null,null],[17,"VDISCARD","","",null,null],[17,"VMIN","","",null,null],[17,"VTIME","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS5","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHO","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"IEXTEN","","",null,null],[17,"EXTPROC","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"WNOHANG","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"CODESET","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"D_MD_ORDER","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"BUFSIZ","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"TMP_MAX","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGEMT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_KILLPAGES","","",null,null],[17,"MS_DEACTIVATE","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EAGAIN","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"EALREADY","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"ENOTSUP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"ELOOP","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"EPROCLIM","","",null,null],[17,"EUSERS","","",null,null],[17,"EDQUOT","","",null,null],[17,"ESTALE","","",null,null],[17,"EREMOTE","","",null,null],[17,"EBADRPC","","",null,null],[17,"ERPCMISMATCH","","",null,null],[17,"EPROGUNAVAIL","","",null,null],[17,"EPROGMISMATCH","","",null,null],[17,"EPROCUNAVAIL","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"EFTYPE","","",null,null],[17,"EAUTH","","",null,null],[17,"ENEEDAUTH","","",null,null],[17,"EPWROFF","","",null,null],[17,"EDEVERR","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"EBADEXEC","","",null,null],[17,"EBADARCH","","",null,null],[17,"ESHLIBVERS","","",null,null],[17,"EBADMACHO","","",null,null],[17,"ECANCELED","","",null,null],[17,"EIDRM","","",null,null],[17,"ENOMSG","","",null,null],[17,"EILSEQ","","",null,null],[17,"ENOATTR","","",null,null],[17,"EBADMSG","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"ENODATA","","",null,null],[17,"ENOLINK","","",null,null],[17,"ENOSR","","",null,null],[17,"ENOSTR","","",null,null],[17,"EPROTO","","",null,null],[17,"ETIME","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"ENOPOLICY","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"EQFULL","","",null,null],[17,"ELAST","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_PREALLOCATE","","",null,null],[17,"F_RDADVISE","","",null,null],[17,"F_RDAHEAD","","",null,null],[17,"F_NOCACHE","","",null,null],[17,"F_GETPATH","","",null,null],[17,"F_FULLFSYNC","","",null,null],[17,"F_FREEZE_FS","","",null,null],[17,"F_THAW_FS","","",null,null],[17,"F_GLOBAL_NOCACHE","","",null,null],[17,"F_NODIRECT","","",null,null],[17,"F_ALLOCATECONTIG","","",null,null],[17,"F_ALLOCATEALL","","",null,null],[17,"F_PEOFPOSMODE","","",null,null],[17,"F_VOLPOSMODE","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"TIOCMODG","","",null,null],[17,"TIOCMODS","","",null,null],[17,"TIOCM_LE","","",null,null],[17,"TIOCM_DTR","","",null,null],[17,"TIOCM_RTS","","",null,null],[17,"TIOCM_ST","","",null,null],[17,"TIOCM_SR","","",null,null],[17,"TIOCM_CTS","","",null,null],[17,"TIOCM_CAR","","",null,null],[17,"TIOCM_CD","","",null,null],[17,"TIOCM_RNG","","",null,null],[17,"TIOCM_RI","","",null,null],[17,"TIOCM_DSR","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCFLUSH","","",null,null],[17,"TIOCGETD","","",null,null],[17,"TIOCSETD","","",null,null],[17,"TIOCIXON","","",null,null],[17,"TIOCIXOFF","","",null,null],[17,"TIOCSBRK","","",null,null],[17,"TIOCCBRK","","",null,null],[17,"TIOCSDTR","","",null,null],[17,"TIOCCDTR","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCNOTTY","","",null,null],[17,"TIOCPKT","","",null,null],[17,"TIOCPKT_DATA","","",null,null],[17,"TIOCPKT_FLUSHREAD","","",null,null],[17,"TIOCPKT_FLUSHWRITE","","",null,null],[17,"TIOCPKT_STOP","","",null,null],[17,"TIOCPKT_START","","",null,null],[17,"TIOCPKT_NOSTOP","","",null,null],[17,"TIOCPKT_DOSTOP","","",null,null],[17,"TIOCPKT_IOCTL","","",null,null],[17,"TIOCSTOP","","",null,null],[17,"TIOCSTART","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCREMOTE","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"TIOCUCNTL","","",null,null],[17,"TIOCSTAT","","",null,null],[17,"TIOCSCONS","","",null,null],[17,"TIOCCONS","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCEXT","","",null,null],[17,"TIOCSIG","","",null,null],[17,"TIOCDRAIN","","",null,null],[17,"TIOCMSDTRWAIT","","",null,null],[17,"TIOCMGDTRWAIT","","",null,null],[17,"TIOCSDRAINWAIT","","",null,null],[17,"TIOCGDRAINWAIT","","",null,null],[17,"TIOCDSIMICROCODE","","",null,null],[17,"TIOCPTYGRANT","","",null,null],[17,"TIOCPTYGNAME","","",null,null],[17,"TIOCPTYUNLK","","",null,null],[17,"SIGTRAP","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIM_NLIMITS","","",null,null],[17,"_RLIMIT_POSIX_FLAG","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_FREE","","",null,null],[17,"MADV_ZERO_WIRED_PAGES","","",null,null],[17,"MADV_FREE_REUSABLE","","",null,null],[17,"MADV_FREE_REUSE","","",null,null],[17,"MADV_CAN_REUSE","","",null,null],[17,"MINCORE_INCORE","","",null,null],[17,"MINCORE_REFERENCED","","",null,null],[17,"MINCORE_MODIFIED","","",null,null],[17,"MINCORE_REFERENCED_OTHER","","",null,null],[17,"MINCORE_MODIFIED_OTHER","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IPV6_JOIN_GROUP","","",null,null],[17,"IPV6_LEAVE_GROUP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_KEEPALIVE","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_USELOOPBACK","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"MAP_COPY","","",null,null],[17,"MAP_RENAME","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_NOEXTEND","","",null,null],[17,"MAP_HASSEMAPHORE","","",null,null],[17,"MAP_NOCACHE","","",null,null],[17,"MAP_JIT","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"SO_NREAD","","",null,null],[17,"SO_NKE","","",null,null],[17,"SO_NOSIGPIPE","","",null,null],[17,"SO_NOADDRERR","","",null,null],[17,"SO_NWRITE","","",null,null],[17,"SO_DONTTRUNC","","",null,null],[17,"SO_WANTMORE","","",null,null],[17,"SO_WANTOOBFLAG","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_NPROCESSORS_CONF","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_2_PBS","","",null,null],[17,"_SC_2_PBS_ACCOUNTING","","",null,null],[17,"_SC_2_PBS_CHECKPOINT","","",null,null],[17,"_SC_2_PBS_LOCATE","","",null,null],[17,"_SC_2_PBS_MESSAGE","","",null,null],[17,"_SC_2_PBS_TRACK","","",null,null],[17,"_SC_ADVISORY_INFO","","",null,null],[17,"_SC_BARRIERS","","",null,null],[17,"_SC_CLOCK_SELECTION","","",null,null],[17,"_SC_CPUTIME","","",null,null],[17,"_SC_FILE_LOCKING","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"_SC_MONOTONIC_CLOCK","","",null,null],[17,"_SC_READER_WRITER_LOCKS","","",null,null],[17,"_SC_REGEXP","","",null,null],[17,"_SC_SHELL","","",null,null],[17,"_SC_SPAWN","","",null,null],[17,"_SC_SPIN_LOCKS","","",null,null],[17,"_SC_SPORADIC_SERVER","","",null,null],[17,"_SC_THREAD_CPUTIME","","",null,null],[17,"_SC_THREAD_SPORADIC_SERVER","","",null,null],[17,"_SC_TIMEOUTS","","",null,null],[17,"_SC_TRACE","","",null,null],[17,"_SC_TRACE_EVENT_FILTER","","",null,null],[17,"_SC_TRACE_INHERIT","","",null,null],[17,"_SC_TRACE_LOG","","",null,null],[17,"_SC_TYPED_MEMORY_OBJECTS","","",null,null],[17,"_SC_V6_ILP32_OFF32","","",null,null],[17,"_SC_V6_ILP32_OFFBIG","","",null,null],[17,"_SC_V6_LP64_OFF64","","",null,null],[17,"_SC_V6_LPBIG_OFFBIG","","",null,null],[17,"_SC_IPV6","","",null,null],[17,"_SC_RAW_SOCKETS","","",null,null],[17,"_SC_SYMLOOP_MAX","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_XOPEN_STREAMS","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LP64_OFF64","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_SS_REPL_MAX","","",null,null],[17,"_SC_TRACE_EVENT_NAME_MAX","","",null,null],[17,"_SC_TRACE_NAME_MAX","","",null,null],[17,"_SC_TRACE_SYS_MAX","","",null,null],[17,"_SC_TRACE_USER_EVENT_MAX","","",null,null],[17,"_SC_PASS_MAX","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"_PTHREAD_MUTEX_SIG_init","","",null,null],[17,"_PTHREAD_COND_SIG_init","","",null,null],[17,"_PTHREAD_RWLOCK_SIG_init","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"HW_AVAILCPU","","",null,null],[17,"EVFILT_AIO","","",null,null],[17,"EVFILT_PROC","","",null,null],[17,"EVFILT_READ","","",null,null],[17,"EVFILT_SIGNAL","","",null,null],[17,"EVFILT_SYSCOUNT","","",null,null],[17,"EVFILT_TIMER","","",null,null],[17,"EVFILT_VNODE","","",null,null],[17,"EVFILT_WRITE","","",null,null],[17,"EVFILT_FS","","",null,null],[17,"EVFILT_MACHPORT","","",null,null],[17,"EVFILT_USER","","",null,null],[17,"EVFILT_VM","","",null,null],[17,"EV_DISPATCH","","",null,null],[17,"EV_FLAG0","","",null,null],[17,"EV_OOBAND","","",null,null],[17,"EV_POLL","","",null,null],[17,"EV_RECEIPT","","",null,null],[17,"NOTE_ABSOLUTE","","",null,null],[17,"NOTE_EXITSTATUS","","",null,null],[17,"NOTE_EXIT_REPARENTED","","",null,null],[17,"NOTE_FFAND","","",null,null],[17,"NOTE_FFCOPY","","",null,null],[17,"NOTE_FFCTRLMASK","","",null,null],[17,"NOTE_FFLAGSMASK","","",null,null],[17,"NOTE_FFNOP","","",null,null],[17,"NOTE_FFOR","","",null,null],[17,"NOTE_NONE","","",null,null],[17,"NOTE_NSECONDS","","",null,null],[17,"NOTE_REAP","","",null,null],[17,"NOTE_SECONDS","","",null,null],[17,"NOTE_SIGNAL","","",null,null],[17,"NOTE_TRIGGER","","",null,null],[17,"NOTE_USECONDS","","",null,null],[17,"NOTE_VM_ERROR","","",null,null],[17,"NOTE_VM_PRESSURE","","",null,null],[17,"NOTE_VM_PRESSURE_SUDDEN_TERMINATE","","",null,null],[17,"NOTE_VM_PRESSURE_TERMINATE","","",null,null],[17,"NOTE_PCTRLMASK","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"CR0","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF0","","",null,null],[17,"FF1","","",null,null],[17,"BS0","","",null,null],[17,"BS1","","",null,null],[17,"TAB3","","",null,null],[17,"VT0","","",null,null],[17,"VT1","","",null,null],[17,"IUTF8","","",null,null],[17,"CRTSCTS","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"RTLD_FIRST","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"_WSTOPPED","","",null,null],[17,"__PTHREAD_MUTEX_SIZE__","","",null,null],[17,"__PTHREAD_COND_SIZE__","","",null,null],[17,"__PTHREAD_RWLOCK_SIZE__","","",null,null],[17,"TIOCTIMESTAMP","","",null,null],[17,"TIOCDCDTIMESTAMP","","",null,null]],"paths":[[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"sockaddr"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"passwd"],[3,"ifaddrs"],[3,"tm"],[3,"utsname"],[3,"msghdr"],[3,"glob_t"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"mach_timebase_info"],[3,"stat"],[3,"dirent"],[3,"siginfo_t"],[3,"sigaction"],[3,"stack_t"],[3,"fstore_t"],[3,"radvisory"],[3,"statvfs"],[3,"Dl_info"],[3,"sockaddr_in"],[3,"statfs"],[3,"kevent"],[3,"kevent64_s"],[3,"dqblk"],[3,"termios"],[3,"flock"],[3,"sf_hdtr"],[3,"lconv"],[4,"Option"],[3,"Wrapping"],[4,"FpCategory"],[3,"ParseIntError"],[4,"IntErrorKind"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[4,"Ordering"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"RefMut"],[3,"BorrowRefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[4,"EscapeUnicodeState"],[3,"EscapeDefault"],[4,"EscapeDefaultState"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[4,"ChainState"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"StepBy"],[3,"RangeInclusive"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"GenericSplitN"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharEqSearcher"],[3,"CharEqPattern"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[4,"StrSearcherImpl"],[3,"EmptyNeedle"],[3,"TwoWaySearcher"],[4,"MatchOnly"],[4,"RejectAndMatch"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"SplitInternal"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitNInternal"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndicesInternal"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"MatchesInternal"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"LinesAnyMap"],[3,"CharRange"],[3,"SipHasher"],[3,"BuildHasherDefault"],[3,"Binary"],[3,"Octal"],[3,"Decimal"],[3,"LowerHex"],[3,"UpperHex"],[3,"Radix"],[3,"RadixFmt"],[3,"PadAdapter"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugInner"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Error"],[3,"ArgumentV1"],[4,"FlagV1"],[3,"Arguments"],[3,"Formatter"],[8,"Clone"],[3,"pthread_attr_t"],[3,"pthread_mutex_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"pthread_rwlock_t"],[3,"fd_set"],[3,"fsid_t"]]};
searchIndex["unicode_bidi"] = {"doc":"This crate implements the [Unicode Bidirectional Algorithm][tr9] for display of mixed\nright-to-left and left-to-right text.  It is written in safe Rust, compatible with the\ncurrent stable release.","items":[[3,"BidiInfo","unicode_bidi","Output of `process_text`",null,null],[12,"classes","","The BidiClass of the character at each byte in the text.",0,null],[12,"levels","","The directional embedding level of each byte in the text.",0,null],[12,"paragraphs","","The boundaries and paragraph embedding level of each paragraph within the text.",0,null],[3,"ParagraphInfo","","Info about a single paragraph",null,null],[12,"range","","The paragraphs boundaries within the text, as byte indices.",1,null],[12,"level","","The paragraph embedding level. http://www.unicode.org/reports/tr9/#BD4",1,null],[3,"InitialProperties","","Output of `initial_scan`",null,null],[12,"initial_classes","","The BidiClass of the character at each byte in the text.\nIf a character is multiple bytes, its class will appear multiple times in the vector.",2,null],[12,"paragraphs","","The boundaries and level of each paragraph within the text.",2,null],[5,"process_text","","Determine the bidirectional embedding levels for a single paragraph.",null,{"inputs":[{"name":"str"},{"name":"option"}],"output":{"name":"bidiinfo"}}],[5,"is_ltr","","Even embedding levels are left-to-right.",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"is_rtl","","Odd levels are right-to-left.",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"reorder_line","","Re-order a line based on resolved levels.",null,null],[5,"visual_runs","","Find the level runs within a line and return them in visual order.",null,null],[5,"initial_scan","","Find the paragraphs and BidiClasses in a string of text.",null,{"inputs":[{"name":"str"},{"name":"option"}],"output":{"name":"initialproperties"}}],[0,"tables","","",null,null],[4,"BidiClass","unicode_bidi::tables","Represents the Unicode character property **Bidi_Class**, also known as\nthe *bidirectional character type*.",null,null],[13,"AL","","",3,null],[13,"AN","","",3,null],[13,"B","","",3,null],[13,"BN","","",3,null],[13,"CS","","",3,null],[13,"EN","","",3,null],[13,"ES","","",3,null],[13,"ET","","",3,null],[13,"FSI","","",3,null],[13,"L","","",3,null],[13,"LRE","","",3,null],[13,"LRI","","",3,null],[13,"LRO","","",3,null],[13,"NSM","","",3,null],[13,"ON","","",3,null],[13,"PDF","","",3,null],[13,"PDI","","",3,null],[13,"R","","",3,null],[13,"RLE","","",3,null],[13,"RLI","","",3,null],[13,"RLO","","",3,null],[13,"S","","",3,null],[13,"WS","","",3,null],[5,"bidi_class","","Find the BidiClass of a single char.",null,{"inputs":[{"name":"char"}],"output":{"name":"bidiclass"}}],[17,"UNICODE_VERSION","","The version of [Unicode](http://www.unicode.org/)\nthat the `bidi_class` function is based on.",null,null],[11,"eq","","",3,{"inputs":[{"name":"bidiclass"},{"name":"bidiclass"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"bidiclass"},{"name":"bidiclass"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"bidiclass"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"bidiclass"}],"output":{"name":"bidiclass"}}],[6,"LevelRun","unicode_bidi","A maximal substring of characters with the same embedding level.",null,null],[11,"eq","","",0,{"inputs":[{"name":"bidiinfo"},{"name":"bidiinfo"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"bidiinfo"},{"name":"bidiinfo"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"bidiinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"paragraphinfo"},{"name":"paragraphinfo"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"paragraphinfo"},{"name":"paragraphinfo"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"paragraphinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"initialproperties"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"initialproperties"},{"name":"initialproperties"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"initialproperties"},{"name":"initialproperties"}],"output":{"name":"bool"}}]],"paths":[[3,"BidiInfo"],[3,"ParagraphInfo"],[3,"InitialProperties"],[4,"BidiClass"]]};
searchIndex["rustc_serialize"] = {"doc":"Support code for encoding and decoding types.","items":[[11,"encode","collections::string","",0,{"inputs":[{"name":"string"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::boxed","",1,{"inputs":[{"name":"box"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::rc","",2,{"inputs":[{"name":"rc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::borrow","",3,{"inputs":[{"name":"cow"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec","",4,{"inputs":[{"name":"vec"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",4,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::option","",5,{"inputs":[{"name":"option"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::marker","",6,{"inputs":[{"name":"phantomdata"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",6,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::path","",7,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"result"}}],[11,"encode","","",8,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",8,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::cell","",9,{"inputs":[{"name":"cell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",9,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",10,{"inputs":[{"name":"refcell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",10,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::arc","",11,{"inputs":[{"name":"arc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",11,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::linked_list","",12,{"inputs":[{"name":"linkedlist"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",12,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec_deque","",13,{"inputs":[{"name":"vecdeque"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",13,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::map","",14,{"inputs":[{"name":"btreemap"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",14,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::set","",15,{"inputs":[{"name":"btreeset"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",15,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::map","",16,{"inputs":[{"name":"hashmap"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",16,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::set","",17,{"inputs":[{"name":"hashset"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",17,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",18,null],[12,"newline","","Newline to use",18,null],[12,"pad","","True to pad output with `=` characters",18,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",18,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",19,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",19,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",20,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",20,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",21,null],[13,"InvalidBase64Length","","The input had an invalid length",21,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified\nformat configuration, returning the owned string.",22,{"inputs":[{"name":"tobase64"},{"name":"config"}],"output":{"name":"string"}}],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",23,{"inputs":[{"name":"frombase64"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"characterset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"characterset"}],"output":{"name":"characterset"}}],[11,"fmt","","",20,{"inputs":[{"name":"newline"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"newline"}],"output":{"name":"newline"}}],[11,"fmt","","",18,{"inputs":[{"name":"config"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"config"}],"output":{"name":"config"}}],[11,"clone","","",21,{"inputs":[{"name":"frombase64error"}],"output":{"name":"frombase64error"}}],[11,"fmt","","",21,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",21,{"inputs":[{"name":"frombase64error"}],"output":{"name":"str"}}],[11,"fmt","","",21,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",24,null],[13,"InvalidHexLength","","The input had an invalid length",24,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",25,{"inputs":[{"name":"tohex"}],"output":{"name":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",26,{"inputs":[{"name":"fromhex"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"fromhexerror"}}],[11,"fmt","","",24,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",24,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"str"}}],[11,"fmt","","",24,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",27,null],[13,"U64","","",27,null],[13,"F64","","",27,null],[13,"String","","",27,null],[13,"Boolean","","",27,null],[13,"Array","","",27,null],[13,"Object","","",27,null],[13,"Null","","",27,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",28,null],[13,"InvalidNumber","","",28,null],[13,"EOFWhileParsingObject","","",28,null],[13,"EOFWhileParsingArray","","",28,null],[13,"EOFWhileParsingValue","","",28,null],[13,"EOFWhileParsingString","","",28,null],[13,"KeyMustBeAString","","",28,null],[13,"ExpectedColon","","",28,null],[13,"TrailingCharacters","","",28,null],[13,"TrailingComma","","",28,null],[13,"InvalidEscape","","",28,null],[13,"InvalidUnicodeCodePoint","","",28,null],[13,"LoneLeadingSurrogateInHexEscape","","",28,null],[13,"UnexpectedEndOfHexEscape","","",28,null],[13,"UnrecognizedHex","","",28,null],[13,"NotFourDigit","","",28,null],[13,"ControlCharacterInString","","",28,null],[13,"NotUtf8","","",28,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",29,null],[13,"IoError","","",29,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",30,null],[13,"ExpectedError","","",30,null],[13,"MissingFieldError","","",30,null],[13,"UnknownVariantError","","",30,null],[13,"ApplicationError","","",30,null],[13,"EOF","","",30,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",31,null],[13,"BadHashmapKey","","",31,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",32,null],[13,"ObjectEnd","","",32,null],[13,"ArrayStart","","",32,null],[13,"ArrayEnd","","",32,null],[13,"BooleanValue","","",32,null],[13,"I64Value","","",32,null],[13,"U64Value","","",32,null],[13,"F64Value","","",32,null],[13,"StringValue","","",32,null],[13,"NullValue","","",32,null],[13,"Error","","",32,null],[4,"StackElement","","StackElements compose a Stack.\nFor example, Key(&quot;foo&quot;), Key(&quot;bar&quot;), Index(3) and Key(&quot;x&quot;) are the\nStackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",33,null],[13,"Key","","",33,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&amp;str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",34,{"inputs":[{"name":"tojson"}],"output":{"name":"json"}}],[11,"fmt","","",27,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"option"}}],[11,"lt","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"le","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"gt","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ge","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"eq","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"eq","","",28,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"errorcode"}],"output":{"name":"errorcode"}}],[11,"fmt","","",29,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"parsererror"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"fmt","","",30,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"fmt","","",31,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"encodererror"}],"output":{"name":"self"}}],[11,"fmt","","",28,{"inputs":[{"name":"errorcode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",30,{"inputs":[{"name":"decodererror"}],"output":{"name":"str"}}],[11,"cause","","",30,{"inputs":[{"name":"decodererror"}],"output":{"name":"option"}}],[11,"fmt","","",30,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",30,{"inputs":[{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",29,{"inputs":[{"name":"parsererror"}],"output":{"name":"str"}}],[11,"fmt","","",29,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",29,{"inputs":[{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",31,{"inputs":[{"name":"encodererror"}],"output":{"name":"str"}}],[11,"fmt","","",31,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",31,{"inputs":[{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable\nJSON to the specified writer",35,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact\nJSON to the specified writer",35,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",35,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_nil","","",35,{"inputs":[{"name":"encoder"}],"output":{"name":"encoderesult"}}],[11,"emit_usize","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[11,"emit_u64","","",35,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",35,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",35,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_u8","","",35,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"emit_isize","","",35,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"encoderesult"}}],[11,"emit_i64","","",35,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",35,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_i16","","",35,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"encoderesult"}}],[11,"emit_i8","","",35,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"encoderesult"}}],[11,"emit_bool","","",35,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"emit_f64","","",35,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"encoderesult"}}],[11,"emit_f32","","",35,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"encoderesult"}}],[11,"emit_char","","",35,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"encoderesult"}}],[11,"emit_str","","",35,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"emit_enum","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct_field","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option","","",35,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option_none","","",35,{"inputs":[{"name":"encoder"}],"output":{"name":"encoderesult"}}],[11,"emit_option_some","","",35,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq_elt","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_key","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_val","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"encode","","",27,{"inputs":[{"name":"json"},{"name":"s"}],"output":{"name":"result"}}],[11,"from_reader","","Decodes a json value from an `&amp;mut io::Read`",27,{"inputs":[{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",27,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Display`.",27,{"inputs":[{"name":"json"}],"output":{"name":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",27,null],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_object_mut","","If the Json value is an Object, returns the associated mutable BTreeMap.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_array_mut","","If the Json value is an Array, returns the associated mutable vector.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"index","","",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"json"}}],[11,"index","","",27,{"inputs":[{"name":"json"},{"name":"usize"}],"output":{"name":"json"}}],[11,"fmt","","",32,{"inputs":[{"name":"jsonevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"fmt","","",33,{"inputs":[{"name":"stackelement"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"stackelement"}],"output":{"name":"stackelement"}}],[11,"eq","","",33,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"new","","",36,{"inputs":[],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",36,{"inputs":[{"name":"stack"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",36,{"inputs":[{"name":"stack"}],"output":{"name":"bool"}}],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",36,{"inputs":[{"name":"stack"},{"name":"usize"}],"output":{"name":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",36,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"top","","Returns the top-most element (if any).",36,{"inputs":[{"name":"stack"}],"output":{"name":"option"}}],[11,"next","","",37,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[11,"new","","Creates the JSON parser.",37,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",37,{"inputs":[{"name":"parser"}],"output":{"name":"stack"}}],[11,"new","","Create a JSON Builder.",38,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",38,{"inputs":[{"name":"builder"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",39,{"inputs":[{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_usize","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u8","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u16","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_isize","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i8","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i16","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_f32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_f64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_bool","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_char","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_str","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_enum","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_variant","","",39,null],[11,"read_enum_variant_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_struct_variant","","",39,null],[11,"read_enum_struct_variant_field","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct_field","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_option","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq_elt","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_key","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_val","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"error","","",39,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"decodererror"}}],[11,"to_json","","",27,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"to_json","collections::string","",0,{"inputs":[{"name":"string"}],"output":{"name":"json"}}],[11,"to_json","collections::vec","",4,{"inputs":[{"name":"vec"}],"output":{"name":"json"}}],[11,"to_json","collections::btree::map","",14,{"inputs":[{"name":"btreemap"}],"output":{"name":"json"}}],[11,"to_json","std::collections::hash::map","",16,{"inputs":[{"name":"hashmap"}],"output":{"name":"json"}}],[11,"to_json","core::option","",5,{"inputs":[{"name":"option"}],"output":{"name":"json"}}],[11,"fmt","rustc_serialize::json","Encodes a json value into a string",27,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",40,{"inputs":[{"name":"prettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",41,{"inputs":[{"name":"asjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",42,{"inputs":[{"name":"asprettyjson"},{"name":"u32"}],"output":{"name":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",42,{"inputs":[{"name":"asprettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",27,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[8,"Decoder","rustc_serialize","",null,null],[16,"Error","","",43,null],[10,"read_nil","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_usize","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u16","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u8","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_isize","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i16","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i8","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_bool","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_f64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_f32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_char","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_str","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_enum","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_variant","","",43,null],[10,"read_enum_variant_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_struct_variant","","",43,null],[10,"read_enum_struct_variant_field","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct_field","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_option","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq_elt","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_key","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_val","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"error","","",43,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"error"}}],[8,"Encoder","","",null,null],[16,"Error","","",44,null],[10,"emit_nil","","",44,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[10,"emit_usize","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"result"}}],[10,"emit_u64","","",44,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"result"}}],[10,"emit_u32","","",44,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[10,"emit_u16","","",44,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"result"}}],[10,"emit_u8","","",44,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"result"}}],[10,"emit_isize","","",44,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"result"}}],[10,"emit_i64","","",44,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"result"}}],[10,"emit_i32","","",44,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"result"}}],[10,"emit_i16","","",44,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"result"}}],[10,"emit_i8","","",44,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"result"}}],[10,"emit_bool","","",44,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"result"}}],[10,"emit_f64","","",44,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"result"}}],[10,"emit_f32","","",44,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"result"}}],[10,"emit_char","","",44,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"result"}}],[10,"emit_str","","",44,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"result"}}],[10,"emit_enum","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant_field","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct_field","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option","","",44,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option_none","","",44,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[10,"emit_option_some","","",44,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq_elt","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_key","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_val","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[8,"Decodable","","",null,null],[10,"decode","","",45,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","",null,null],[10,"encode","","",46,{"inputs":[{"name":"encodable"},{"name":"s"}],"output":{"name":"result"}}],[8,"DecoderHelpers","","",null,null],[10,"read_to_vec","","",47,{"inputs":[{"name":"decoderhelpers"},{"name":"f"}],"output":{"name":"result"}}],[8,"EncoderHelpers","","",null,null],[10,"emit_from_vec","","",48,null]],"paths":[[3,"String"],[3,"Box"],[3,"Rc"],[4,"Cow"],[3,"Vec"],[4,"Option"],[3,"PhantomData"],[3,"Path"],[3,"PathBuf"],[3,"Cell"],[3,"RefCell"],[3,"Arc"],[3,"LinkedList"],[3,"VecDeque"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"HashMap"],[3,"HashSet"],[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex["unicode_normalization"] = {"doc":"Unicode character composition and decomposition utilities\nas described in\n[Unicode Standard Annex #15](http://www.unicode.org/reports/tr15/).","items":[[3,"Decompositions","unicode_normalization","External iterator for a string decomposition&#39;s characters.",null,null],[3,"Recompositions","","External iterator for a string recomposition&#39;s characters.",null,null],[11,"clone","","",0,{"inputs":[{"name":"decompositions"}],"output":{"name":"decompositions"}}],[11,"next","","",0,{"inputs":[{"name":"decompositions"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"clone","","",1,{"inputs":[{"name":"recompositions"}],"output":{"name":"recompositions"}}],[11,"next","","",1,{"inputs":[{"name":"recompositions"}],"output":{"name":"option"}}],[0,"char","","Methods for composing and decomposing characters.",null,null],[5,"decompose_canonical","unicode_normalization::char","Compute canonical Unicode decomposition for character.\nSee [Unicode Standard Annex #15](http://www.unicode.org/reports/tr15/)\nfor more information.",null,{"inputs":[{"name":"char"},{"name":"f"}],"output":null}],[5,"decompose_compatible","","Compute canonical or compatible Unicode decomposition for character.\nSee [Unicode Standard Annex #15](http://www.unicode.org/reports/tr15/)\nfor more information.",null,{"inputs":[{"name":"char"},{"name":"f"}],"output":null}],[5,"compose","","Compose two characters into a single character, if possible.\nSee [Unicode Standard Annex #15](http://www.unicode.org/reports/tr15/)\nfor more information.",null,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"option"}}],[5,"canonical_combining_class","","",null,{"inputs":[{"name":"char"}],"output":{"name":"u8"}}],[5,"is_combining_mark","","Return whether the given character is a combining mark (`General_Category=Mark`)",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[17,"UNICODE_VERSION","unicode_normalization","The version of [Unicode](http://www.unicode.org/)\nthat this version of unicode-normalization is based on.",null,null],[8,"UnicodeNormalization","","Methods for iterating over strings while applying Unicode normalizations\nas described in\n[Unicode Standard Annex #15](http://www.unicode.org/reports/tr15/).",null,null],[10,"nfd","","Returns an iterator over the string in Unicode Normalization Form D\n(canonical decomposition).",2,{"inputs":[{"name":"unicodenormalization"}],"output":{"name":"decompositions"}}],[10,"nfkd","","Returns an iterator over the string in Unicode Normalization Form KD\n(compatibility decomposition).",2,{"inputs":[{"name":"unicodenormalization"}],"output":{"name":"decompositions"}}],[10,"nfc","","An Iterator over the string in Unicode Normalization Form C\n(canonical decomposition followed by canonical composition).",2,{"inputs":[{"name":"unicodenormalization"}],"output":{"name":"recompositions"}}],[10,"nfkc","","An Iterator over the string in Unicode Normalization Form KC\n(compatibility decomposition followed by canonical composition).",2,{"inputs":[{"name":"unicodenormalization"}],"output":{"name":"recompositions"}}]],"paths":[[3,"Decompositions"],[3,"Recompositions"],[8,"UnicodeNormalization"]]};
searchIndex["winapi"] = {"doc":"","items":[],"paths":[]};
searchIndex["lazy_static"] = {"doc":"A macro for declaring lazily evaluated statics.","items":[[8,"__Deref","lazy_static","The `Deref` trait is used to specify the functionality of dereferencing\noperations, like `*v`.",null,null],[16,"Target","","The resulting type after dereferencing",0,null],[10,"deref","","The method called to dereference a value",0,null],[0,"lazy","","",null,null],[3,"Lazy","lazy_static::lazy","",null,null],[11,"get","","",1,{"inputs":[{"name":"lazy"},{"name":"f"}],"output":{"name":"t"}}],[14,"__lazy_static_create!","lazy_static","",null,null],[14,"lazy_static!","","",null,null]],"paths":[[8,"__Deref"],[3,"Lazy"]]};
searchIndex["language_tags"] = {"doc":"Language tags can be used identify human languages, scripts e.g. Latin script, countries and\nother regions.","items":[[3,"LanguageTag","language_tags","A language tag as described in [BCP47](http://tools.ietf.org/html/bcp47).",null,null],[12,"language","","Language subtags are used to indicate the language, ignoring all\nother aspects such as script, region or spefic invariants.",0,null],[12,"extlangs","","Extended language subtags are used to identify certain specially\nselected languages that, for various historical and compatibility\nreasons, are closely identified with or tagged using an existing\nprimary language subtag.",0,null],[12,"script","","Script subtags are used to indicate the script or writing system\nvariations that distinguish the written forms of a language or its\ndialects.",0,null],[12,"region","","Region subtags are used to indicate linguistic variations associated\nwith or appropriate to a specific country, territory, or region.\nTypically, a region subtag is used to indicate variations such as\nregional dialects or usage, or region-specific spelling conventions.\nIt can also be used to indicate that content is expressed in a way\nthat is appropriate for use throughout a region, for instance,\nSpanish content tailored to be useful throughout Latin America.",0,null],[12,"variants","","Variant subtags are used to indicate additional, well-recognized\nvariations that define a language or its dialects that are not\ncovered by other available subtags.",0,null],[12,"extensions","","Extensions provide a mechanism for extending language tags for use in\nvarious applications.  They are intended to identify information that\nis commonly used in association with languages or language tags but\nthat is not part of language identification.",0,null],[12,"privateuse","","Private use subtags are used to indicate distinctions in language\nthat are important in a given context by private agreement.",0,null],[4,"Error","","Defines an Error type for langtags.",null,null],[13,"DuplicateExtension","","The same extension subtag is only allowed once in a tag before the private use part.",1,null],[13,"EmptyExtension","","If an extension subtag is present, it must not be empty.",1,null],[13,"EmptyPrivateUse","","If the `x` subtag is present, it must not be empty.",1,null],[13,"ForbiddenChar","","The langtag contains a char that is not A-Z, a-z, 0-9 or the dash.",1,null],[13,"InvalidSubtag","","A subtag fails to parse, it does not match any other subtags.",1,null],[13,"InvalidLanguage","","The given language subtag is invalid.",1,null],[13,"SubtagTooLong","","A subtag may be eight characters in length at maximum.",1,null],[13,"TooManyExtlangs","","At maximum three extlangs are allowed, but zero to one extlangs are preferred.",1,null],[6,"Result","","Result type used for this library.",null,null],[17,"GRANDFATHERED","","Contains all grandfathered tags.",null,null],[11,"eq","","",1,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"languagetag"}],"output":{"name":"languagetag"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"languagetag"}}],[11,"fmt","","",0,{"inputs":[{"name":"languagetag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"matches","","Matches language tags. The first language acts as a language range, the second one is used\nas a normal language tag. None fields in the language range are ignored. If the language\ntag has more extlangs than the range these extlangs are ignored. Matches are\ncase-insensitive. `*` in language ranges are represented using `None` values. The language\nrange `*` that matches language tags is created by the default language tag:\n`let wildcard: LanguageTag = Default::default();.`",0,{"inputs":[{"name":"languagetag"},{"name":"languagetag"}],"output":{"name":"bool"}}],[11,"is_language_range","","Checks if it is a language range, meaning that there are no extension and privateuse tags.",0,{"inputs":[{"name":"languagetag"}],"output":{"name":"bool"}}],[11,"canonicalize","","Returns the canonical version of the language tag.",0,{"inputs":[{"name":"languagetag"}],"output":{"name":"languagetag"}}],[11,"eq","","",0,{"inputs":[{"name":"languagetag"},{"name":"languagetag"}],"output":{"name":"bool"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"languagetag"},{"name":"formatter"}],"output":{"name":"result"}}],[14,"langtag!","","Utility for creating simple language tags.",null,null]],"paths":[[3,"LanguageTag"],[4,"Error"]]};
searchIndex["httparse"] = {"doc":"# httparse","items":[[3,"InvalidChunkSize","httparse","An error in parsing a chunk size.",null,null],[3,"Request","","A parsed Request.",null,null],[12,"method","","The request method, such as `GET`.",0,null],[12,"path","","The request path, such as `/about-us`.",0,null],[12,"version","","The request version, such as `HTTP/1.1`.",0,null],[12,"headers","","The request headers.",0,null],[3,"Response","","A parsed Response.",null,null],[12,"version","","The response version, such as `HTTP/1.1`.",1,null],[12,"code","","The response code, such as `200`.",1,null],[12,"reason","","The response reason-phrase, such as `OK`.",1,null],[12,"headers","","THe response headers.",1,null],[3,"Header","","Represents a parsed header.",null,null],[12,"name","","The name portion of a header.",2,null],[12,"value","","The value portion of a header.",2,null],[4,"Error","","An error in parsing.",null,null],[13,"HeaderName","","Invalid byte in header name.",3,null],[13,"HeaderValue","","INvalid byte in header value.",3,null],[13,"NewLine","","Invalid byte in new line.",3,null],[13,"Status","","Invalid byte in Response status.",3,null],[13,"Token","","Invalid byte where token is required.",3,null],[13,"TooManyHeaders","","Parsed more headers than provided buffer can contain.",3,null],[13,"Version","","Invalid byte in HTTP version.",3,null],[4,"Status","","The result of a successful parse pass.",null,null],[13,"Complete","","The completed result.",4,null],[13,"Partial","","A partial result.",4,null],[5,"parse_headers","","Parse a buffer of bytes as headers.",null,null],[5,"parse_chunk_size","","Parse a buffer of bytes as a chunk size.",null,null],[6,"Result","","A Result of any parsing action.",null,null],[17,"EMPTY_HEADER","","An empty header, useful for constructing a `Header` array to pass in for\nparsing.",null,null],[11,"fmt","","",3,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"eq","","",5,{"inputs":[{"name":"invalidchunksize"},{"name":"invalidchunksize"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"invalidchunksize"},{"name":"invalidchunksize"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"invalidchunksize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"status"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"status"},{"name":"status"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"status"},{"name":"status"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"status"}],"output":{"name":"status"}}],[11,"is_complete","","Convenience method to check if status is complete.",4,{"inputs":[{"name":"status"}],"output":{"name":"bool"}}],[11,"is_partial","","Convenience method to check if status is partial.",4,{"inputs":[{"name":"status"}],"output":{"name":"bool"}}],[11,"unwrap","","Convenience method to unwrap a Complete value. Panics if the status is\n`Partial`.",4,{"inputs":[{"name":"status"}],"output":{"name":"t"}}],[11,"new","","Creates a new Request, using a slice of headers you allocate.",0,null],[11,"parse","","Try to parse a buffer of bytes into the Request.",0,null],[11,"new","","Creates a new `Response` using a slice of `Header`s you have allocated.",1,null],[11,"parse","","Try to parse a buffer of bytes into this `Response`.",1,null],[11,"fmt","","",2,{"inputs":[{"name":"header"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"header"},{"name":"header"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"header"},{"name":"header"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"header"}],"output":{"name":"header"}}]],"paths":[[3,"Request"],[3,"Response"],[3,"Header"],[4,"Error"],[4,"Status"],[3,"InvalidChunkSize"]]};
searchIndex["mime"] = {"doc":"# Mime","items":[[3,"Mime","mime","Mime, or Media Type. Encapsulates common registers types.",null,null],[4,"TopLevel","","",null,null],[13,"Star","","",0,null],[13,"Text","","",0,null],[13,"Image","","",0,null],[13,"Audio","","",0,null],[13,"Video","","",0,null],[13,"Application","","",0,null],[13,"Multipart","","",0,null],[13,"Message","","",0,null],[13,"Model","","",0,null],[13,"Ext","","",0,null],[4,"SubLevel","","",null,null],[13,"Star","","",1,null],[13,"Plain","","",1,null],[13,"Html","","",1,null],[13,"Xml","","",1,null],[13,"Javascript","","",1,null],[13,"Css","","",1,null],[13,"EventStream","","",1,null],[13,"Json","","",1,null],[13,"WwwFormUrlEncoded","","",1,null],[13,"Msgpack","","",1,null],[13,"FormData","","",1,null],[13,"Png","","",1,null],[13,"Gif","","",1,null],[13,"Bmp","","",1,null],[13,"Jpeg","","",1,null],[13,"Ext","","",1,null],[4,"Attr","","",null,null],[13,"Charset","","",2,null],[13,"Boundary","","",2,null],[13,"Q","","",2,null],[13,"Ext","","",2,null],[4,"Value","","",null,null],[13,"Utf8","","",3,null],[13,"Ext","","",3,null],[6,"Param","","",null,null],[11,"hash","","",4,null],[11,"fmt","","",4,{"inputs":[{"name":"mime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"mime"}],"output":{"name":"mime"}}],[11,"eq","","",4,{"inputs":[{"name":"mime"},{"name":"mime"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"toplevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"toplevel"}],"output":{"name":"toplevel"}}],[11,"as_str","","",0,{"inputs":[{"name":"toplevel"}],"output":{"name":"str"}}],[11,"deref","","",0,{"inputs":[{"name":"toplevel"}],"output":{"name":"str"}}],[11,"eq","","",0,{"inputs":[{"name":"toplevel"},{"name":"toplevel"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"toplevel"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"toplevel"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"toplevel"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",5,{"inputs":[{"name":"string"},{"name":"toplevel"}],"output":{"name":"bool"}}],[11,"fmt","mime","",0,{"inputs":[{"name":"toplevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"sublevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"sublevel"}],"output":{"name":"sublevel"}}],[11,"as_str","","",1,{"inputs":[{"name":"sublevel"}],"output":{"name":"str"}}],[11,"deref","","",1,{"inputs":[{"name":"sublevel"}],"output":{"name":"str"}}],[11,"eq","","",1,{"inputs":[{"name":"sublevel"},{"name":"sublevel"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"sublevel"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"sublevel"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"sublevel"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",5,{"inputs":[{"name":"string"},{"name":"sublevel"}],"output":{"name":"bool"}}],[11,"fmt","mime","",1,{"inputs":[{"name":"sublevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"hash","","",2,null],[11,"fmt","","",2,{"inputs":[{"name":"attr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"attr"}],"output":{"name":"attr"}}],[11,"as_str","","",2,{"inputs":[{"name":"attr"}],"output":{"name":"str"}}],[11,"deref","","",2,{"inputs":[{"name":"attr"}],"output":{"name":"str"}}],[11,"eq","","",2,{"inputs":[{"name":"attr"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"attr"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"attr"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"attr"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",5,{"inputs":[{"name":"string"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"fmt","mime","",2,{"inputs":[{"name":"attr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"fmt","","",3,{"inputs":[{"name":"value"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"value"}],"output":{"name":"value"}}],[11,"as_str","","",3,{"inputs":[{"name":"value"}],"output":{"name":"str"}}],[11,"deref","","",3,{"inputs":[{"name":"value"}],"output":{"name":"str"}}],[11,"eq","","",3,{"inputs":[{"name":"value"},{"name":"value"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"value"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"value"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"value"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","collections::string","",5,{"inputs":[{"name":"string"},{"name":"value"}],"output":{"name":"bool"}}],[11,"fmt","mime","",3,{"inputs":[{"name":"value"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",3,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"mime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get_param","","",4,{"inputs":[{"name":"mime"},{"name":"a"}],"output":{"name":"option"}}],[11,"from_str","","",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[14,"mime!","","Easily create a Mime without having to import so many enums.",null,null]],"paths":[[4,"TopLevel"],[4,"SubLevel"],[4,"Attr"],[4,"Value"],[3,"Mime"],[3,"String"]]};
searchIndex["typeable"] = {"doc":"Exposes `Typeable`, which exposes the `get_type` method, which gives\nthe `TypeId` of any &#39;static type.","items":[[8,"Typeable","typeable","Universal mixin trait for adding a `get_type` method.",null,null],[11,"get_type","","Get the `TypeId` of this object.",0,{"inputs":[{"name":"typeable"}],"output":{"name":"typeid"}}]],"paths":[[8,"Typeable"]]};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator.","items":[[0,"isize","bitflags::__core","The pointer-sized signed integer type.",null,null],[17,"BITS","bitflags::__core::isize","",null,null],[17,"BYTES","","",null,null],[17,"MIN","","",null,null],[17,"MAX","","",null,null],[0,"i8","bitflags::__core","The 8-bit signed integer type.",null,null],[17,"BITS","bitflags::__core::i8","",null,null],[17,"BYTES","","",null,null],[17,"MIN","","",null,null],[17,"MAX","","",null,null],[0,"i16","bitflags::__core","The 16-bit signed integer type.",null,null],[17,"BITS","bitflags::__core::i16","",null,null],[17,"BYTES","","",null,null],[17,"MIN","","",null,null],[17,"MAX","","",null,null],[0,"i32","bitflags::__core","The 32-bit signed integer type.",null,null],[17,"BITS","bitflags::__core::i32","",null,null],[17,"BYTES","","",null,null],[17,"MIN","","",null,null],[17,"MAX","","",null,null],[0,"i64","bitflags::__core","The 64-bit signed integer type.",null,null],[17,"BITS","bitflags::__core::i64","",null,null],[17,"BYTES","","",null,null],[17,"MIN","","",null,null],[17,"MAX","","",null,null],[0,"usize","bitflags::__core","The pointer-sized unsigned integer type.",null,null],[17,"BITS","bitflags::__core::usize","",null,null],[17,"BYTES","","",null,null],[17,"MIN","","",null,null],[17,"MAX","","",null,null],[0,"u8","bitflags::__core","The 8-bit unsigned integer type.",null,null],[17,"BITS","bitflags::__core::u8","",null,null],[17,"BYTES","","",null,null],[17,"MIN","","",null,null],[17,"MAX","","",null,null],[0,"u16","bitflags::__core","The 16-bit unsigned integer type.",null,null],[17,"BITS","bitflags::__core::u16","",null,null],[17,"BYTES","","",null,null],[17,"MIN","","",null,null],[17,"MAX","","",null,null],[0,"u32","bitflags::__core","The 32-bit unsigned integer type.",null,null],[17,"BITS","bitflags::__core::u32","",null,null],[17,"BYTES","","",null,null],[17,"MIN","","",null,null],[17,"MAX","","",null,null],[0,"u64","bitflags::__core","The 64-bit unsigned integer type.",null,null],[17,"BITS","bitflags::__core::u64","",null,null],[17,"BYTES","","",null,null],[17,"MIN","","",null,null],[17,"MAX","","",null,null],[0,"f32","bitflags::__core","Operations and constants for 32-bits floats (`f32` type)",null,null],[17,"RADIX","bitflags::__core::f32","",null,null],[17,"MANTISSA_DIGITS","","",null,null],[17,"DIGITS","","",null,null],[17,"EPSILON","","",null,null],[17,"MIN","","Smallest finite f32 value",null,null],[17,"MIN_POSITIVE","","Smallest positive, normalized f32 value",null,null],[17,"MAX","","Largest finite f32 value",null,null],[17,"MIN_EXP","","",null,null],[17,"MAX_EXP","","",null,null],[17,"MIN_10_EXP","","",null,null],[17,"MAX_10_EXP","","",null,null],[17,"NAN","","",null,null],[17,"INFINITY","","",null,null],[17,"NEG_INFINITY","","",null,null],[0,"consts","","Basic mathematical constants.",null,null],[17,"PI","bitflags::__core::f32::consts","Archimedes&#39; constant",null,null],[17,"FRAC_PI_2","","pi/2.0",null,null],[17,"FRAC_PI_3","","pi/3.0",null,null],[17,"FRAC_PI_4","","pi/4.0",null,null],[17,"FRAC_PI_6","","pi/6.0",null,null],[17,"FRAC_PI_8","","pi/8.0",null,null],[17,"FRAC_1_PI","","1.0/pi",null,null],[17,"FRAC_2_PI","","2.0/pi",null,null],[17,"FRAC_2_SQRT_PI","","2.0/sqrt(pi)",null,null],[17,"SQRT_2","","sqrt(2.0)",null,null],[17,"FRAC_1_SQRT_2","","1.0/sqrt(2.0)",null,null],[17,"E","","Euler&#39;s number",null,null],[17,"LOG2_E","","log2(e)",null,null],[17,"LOG10_E","","log10(e)",null,null],[17,"LN_2","","ln(2.0)",null,null],[17,"LN_10","","ln(10.0)",null,null],[0,"f64","bitflags::__core","Operations and constants for 64-bits floats (`f64` type)",null,null],[17,"RADIX","bitflags::__core::f64","",null,null],[17,"MANTISSA_DIGITS","","",null,null],[17,"DIGITS","","",null,null],[17,"EPSILON","","",null,null],[17,"MIN","","Smallest finite f64 value",null,null],[17,"MIN_POSITIVE","","Smallest positive, normalized f64 value",null,null],[17,"MAX","","Largest finite f64 value",null,null],[17,"MIN_EXP","","",null,null],[17,"MAX_EXP","","",null,null],[17,"MIN_10_EXP","","",null,null],[17,"MAX_10_EXP","","",null,null],[17,"NAN","","",null,null],[17,"INFINITY","","",null,null],[17,"NEG_INFINITY","","",null,null],[0,"consts","","Basic mathematical constants.",null,null],[17,"PI","bitflags::__core::f64::consts","Archimedes&#39; constant",null,null],[17,"FRAC_PI_2","","pi/2.0",null,null],[17,"FRAC_PI_3","","pi/3.0",null,null],[17,"FRAC_PI_4","","pi/4.0",null,null],[17,"FRAC_PI_6","","pi/6.0",null,null],[17,"FRAC_PI_8","","pi/8.0",null,null],[17,"FRAC_1_PI","","1.0/pi",null,null],[17,"FRAC_2_PI","","2.0/pi",null,null],[17,"FRAC_2_SQRT_PI","","2.0/sqrt(pi)",null,null],[17,"SQRT_2","","sqrt(2.0)",null,null],[17,"FRAC_1_SQRT_2","","1.0/sqrt(2.0)",null,null],[17,"E","","Euler&#39;s number",null,null],[17,"LOG2_E","","log2(e)",null,null],[17,"LOG10_E","","log10(e)",null,null],[17,"LN_2","","ln(2.0)",null,null],[17,"LN_10","","ln(10.0)",null,null],[0,"num","bitflags::__core","Numeric traits and functions for the built-in numeric types.",null,null],[11,"default","core::num","",0,{"inputs":[],"output":{"name":"wrapping"}}],[11,"fmt","","",0,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"cmp","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"shl","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,null],[11,"shr","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,null],[11,"shl","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,null],[11,"shr","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,null],[11,"shl","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,null],[11,"shr","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,null],[11,"shl","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,null],[11,"shr","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,null],[11,"shl","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,null],[11,"shr","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,null],[11,"shl","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,null],[11,"shr","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,null],[11,"shl","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,null],[11,"shr","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,null],[11,"shl","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,null],[11,"shr","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,null],[11,"shl","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,null],[11,"shr","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,null],[11,"shl","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",0,null],[11,"shr","","",0,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",0,null],[11,"add","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",0,null],[11,"sub","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",0,null],[11,"mul","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",0,null],[11,"div","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",0,null],[11,"rem","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",0,null],[11,"not","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",0,null],[11,"add","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",0,null],[11,"sub","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",0,null],[11,"mul","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",0,null],[11,"div","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",0,null],[11,"rem","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",0,null],[11,"not","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",0,null],[11,"add","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",0,null],[11,"sub","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",0,null],[11,"mul","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",0,null],[11,"div","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",0,null],[11,"rem","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",0,null],[11,"not","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",0,null],[11,"add","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",0,null],[11,"sub","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",0,null],[11,"mul","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",0,null],[11,"div","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",0,null],[11,"rem","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",0,null],[11,"not","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",0,null],[11,"add","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",0,null],[11,"sub","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",0,null],[11,"mul","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",0,null],[11,"div","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",0,null],[11,"rem","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",0,null],[11,"not","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",0,null],[11,"add","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",0,null],[11,"sub","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",0,null],[11,"mul","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",0,null],[11,"div","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",0,null],[11,"rem","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",0,null],[11,"not","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",0,null],[11,"add","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",0,null],[11,"sub","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",0,null],[11,"mul","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",0,null],[11,"div","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",0,null],[11,"rem","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",0,null],[11,"not","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",0,null],[11,"add","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",0,null],[11,"sub","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",0,null],[11,"mul","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",0,null],[11,"div","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",0,null],[11,"rem","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",0,null],[11,"not","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",0,null],[11,"add","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",0,null],[11,"sub","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",0,null],[11,"mul","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",0,null],[11,"div","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",0,null],[11,"rem","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",0,null],[11,"not","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",0,null],[11,"add","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",0,null],[11,"sub","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",0,null],[11,"mul","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",0,null],[11,"div","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",0,null],[11,"rem","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",0,null],[11,"not","","",0,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",0,null],[11,"fmt","","",1,{"inputs":[{"name":"fpcategory"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"fpcategory"}],"output":{"name":"fpcategory"}}],[11,"eq","","",2,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parseinterror"}}],[11,"fmt","","",2,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"interrorkind"}],"output":{"name":"interrorkind"}}],[11,"fmt","","",3,{"inputs":[{"name":"interrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::nonzero","",4,null],[11,"fmt","","",4,{"inputs":[{"name":"nonzero"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"ordering"}}],[11,"eq","","",4,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"nonzero"}],"output":{"name":"nonzero"}}],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually &quot;non-zero&quot;.",4,{"inputs":[{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",4,{"inputs":[{"name":"nonzero"}],"output":{"name":"t"}}],[11,"new","core::ptr","Creates a new `Unique`.",5,null],[11,"get","","Dereferences the content.",5,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",5,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"deref","","",5,null],[11,"fmt","","",5,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Shared`.",6,null],[11,"clone","","",6,{"inputs":[{"name":"shared"}],"output":{"name":"shared"}}],[11,"deref","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"shared"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::marker","",7,null],[11,"eq","","",7,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",7,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",7,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",8,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"fmt","","",8,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"fmt","","",9,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"fmt","","",10,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"fmt","","",11,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cmp","",12,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",12,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"clone","","",12,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",12,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","","",12,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"fmt","bitflags::__core","",13,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns true if the boxed type is the same as `T`",13,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",13,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",13,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",13,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",13,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",13,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"hash","core::any","",14,null],[11,"fmt","","",14,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"clone","","",14,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",14,{"inputs":[],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",15,{"inputs":[],"output":{"name":"atomicbool"}}],[11,"default","","",16,{"inputs":[],"output":{"name":"atomicisize"}}],[11,"default","","",17,{"inputs":[],"output":{"name":"atomicusize"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"clone","","",19,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new `AtomicBool`.",15,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",15,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",15,null],[11,"swap","","Stores a value into the bool, returning the old value.",15,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",15,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",15,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",15,null],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",15,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",15,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",15,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",15,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicIsize`.",16,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",16,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",16,null],[11,"swap","","Stores a value into the isize, returning the old value.",16,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the `isize` if the current value is the same as the `current` value.",16,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_exchange","","Stores a value into the `isize` if the current value is the same as the `current` value.",16,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_exchange_weak","","Stores a value into the `isize if the current value is the same as the `current` value.",16,null],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",16,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",16,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",16,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",16,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",16,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","Creates a new `AtomicUsize`.",17,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",17,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",17,null],[11,"swap","","Stores a value into the usize, returning the old value.",17,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the `usize` if the current value is the same as the `current` value.",17,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_exchange","","Stores a value into the `usize` if the current value is the same as the `current` value.",17,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_exchange_weak","","Stores a value into the `usize` if the current value is the same as the `current` value.",17,null],[11,"fetch_add","","Add to the current usize, returning the previous value.",17,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",17,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",17,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",17,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",17,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"new","","Creates a new `AtomicPtr`.",18,null],[11,"load","","Loads a value from the pointer.",18,null],[11,"store","","Stores a value into the pointer.",18,null],[11,"swap","","Stores a value into the pointer, returning the old value.",18,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",18,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",18,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",18,null],[11,"fmt","","",17,{"inputs":[{"name":"atomicusize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"atomicisize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"atomicbool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"atomicptr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","core::cell","Creates a new `Cell` containing the given value.",20,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",20,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",20,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",20,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",20,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"default","","",20,{"inputs":[],"output":{"name":"cell"}}],[11,"eq","","",20,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"fmt","","",21,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"new","","Creates a new `RefCell` containing `value`.",22,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",22,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",22,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",22,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",22,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",22,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",22,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"default","","",22,{"inputs":[],"output":{"name":"refcell"}}],[11,"eq","","",22,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"drop","","",23,null],[11,"clone","","",23,{"inputs":[{"name":"borrowref"}],"output":{"name":"borrowref"}}],[11,"deref","","",24,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",24,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",24,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",24,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",25,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",25,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"drop","","",26,null],[11,"deref","","",25,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",25,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",27,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",27,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",27,null],[11,"clone","core::char","",28,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"escapeunicode"}}],[11,"clone","","",29,{"inputs":[{"name":"escapeunicodestate"}],"output":{"name":"escapeunicodestate"}}],[11,"next","","",28,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"option"}}],[11,"size_hint","","",28,null],[11,"clone","","",30,{"inputs":[{"name":"escapedefault"}],"output":{"name":"escapedefault"}}],[11,"clone","","",31,{"inputs":[{"name":"escapedefaultstate"}],"output":{"name":"escapedefaultstate"}}],[11,"next","","",30,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",30,null],[11,"count","","",30,{"inputs":[{"name":"escapedefault"}],"output":{"name":"usize"}}],[11,"nth","","",30,{"inputs":[{"name":"escapedefault"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",30,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"clone","core::iter","",32,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"next","","",32,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",32,null],[11,"next_back","","",32,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"clone","","",33,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"next","","",33,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",33,null],[11,"next_back","","",33,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"clone","","",34,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"next","","",34,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",34,null],[11,"clone","","",35,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"clone","","",36,{"inputs":[{"name":"chainstate"}],"output":{"name":"chainstate"}}],[11,"next","","",35,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",35,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",35,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",35,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",35,null],[11,"next_back","","",35,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"clone","","",37,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"next","","",37,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",37,null],[11,"next_back","","",37,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"clone","","",38,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"next","","",38,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",38,null],[11,"next_back","","",38,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"clone","","",39,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"next","","",39,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",39,null],[11,"next_back","","",39,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"clone","","",40,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"next","","",40,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",40,null],[11,"next_back","","",40,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"clone","","",41,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"next","","# Overflow Behavior",41,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",41,null],[11,"nth","","",41,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",41,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"next_back","","",41,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"clone","","",42,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"next","","",42,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",42,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",42,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",42,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",42,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",42,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks if the iterator has finished iterating.",42,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"clone","","",43,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"next","","",43,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",43,null],[11,"clone","","",44,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"next","","",44,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",44,null],[11,"clone","","",45,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",45,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",45,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",45,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",45,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",45,null],[11,"clone","","",46,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"next","","",46,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",46,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",46,null],[11,"clone","","",47,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[11,"next","","",47,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",47,null],[11,"clone","","",48,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"next","","",48,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",48,null],[11,"next_back","","",48,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"clone","","",49,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"next","","",49,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",49,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",49,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",49,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",49,null],[11,"next_back","","",49,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"clone","","",50,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"next","","",50,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[11,"next_back","","",50,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"clone","","",51,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",10,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",9,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","core::iter","",51,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",51,null],[11,"clone","","",52,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",52,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",52,null],[11,"next_back","","",52,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"next","","",51,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",51,null],[11,"next","core::ops","",9,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"next_back","","",9,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",10,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"clone","core::iter","",53,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"next","","",53,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",53,null],[11,"next_back","","",53,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"next","","",54,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",54,null],[11,"next_back","","",54,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"len","","",54,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"clone","","",54,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"default","","",54,{"inputs":[],"output":{"name":"empty"}}],[11,"clone","","",55,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"next","","",55,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",55,null],[11,"next_back","","",55,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"len","","",55,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"hash","core::option","",56,null],[11,"fmt","","",56,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",56,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",56,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",56,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",56,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",56,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",56,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",56,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",56,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"is_some","","Returns `true` if the option is a `Some` value",56,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",56,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",56,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",56,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",56,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",56,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",56,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",56,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",56,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",56,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",56,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",56,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",56,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",56,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",56,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",56,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",56,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",56,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",56,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",56,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",56,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",56,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"default","","",56,{"inputs":[],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",56,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"clone","","",57,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[11,"next","","",57,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"size_hint","","",57,null],[11,"next_back","","",57,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"next","","",58,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",58,null],[11,"next_back","","",58,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",58,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",59,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",59,null],[11,"next_back","","",59,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",60,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",60,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",60,null],[11,"next_back","","",60,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",56,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",61,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"clone","","",62,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[11,"hash","core::result","",63,null],[11,"fmt","","",63,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",63,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",63,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",63,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",63,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",63,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",63,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","","",63,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"clone","","",63,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"is_ok","","Returns true if the result is `Ok`",63,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",63,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",63,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",63,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",63,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",63,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",63,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",63,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",63,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",63,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",63,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",63,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",63,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",63,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",63,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",63,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",63,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",63,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",63,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",63,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"next","","",64,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",64,null],[11,"next_back","","",64,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",64,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",65,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",65,null],[11,"next_back","","",65,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",66,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",66,null],[11,"next_back","","",66,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",63,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"as_slice","core::slice","View the underlying data as a subslice of the original data.",67,null],[11,"next","","",67,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",67,null],[11,"count","","",67,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"nth","","",67,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",67,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",67,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",67,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"into_slice","","View the underlying data as a subslice of the original data.",68,null],[11,"next","","",68,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",68,null],[11,"count","","",68,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"nth","","",68,{"inputs":[{"name":"itermut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",68,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next_back","","",68,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",69,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",69,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"size_hint","","",69,null],[11,"next_back","","",69,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",69,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",70,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",70,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"size_hint","","",70,null],[11,"next_back","","",70,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",71,{"inputs":[{"name":"genericsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",71,null],[11,"next","","",72,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"size_hint","","",72,null],[11,"next","","",73,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",73,null],[11,"next","","",74,{"inputs":[{"name":"splitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",74,null],[11,"next","","",75,{"inputs":[{"name":"rsplitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",75,null],[11,"clone","","",76,{"inputs":[{"name":"windows"}],"output":{"name":"windows"}}],[11,"next","","",76,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"size_hint","","",76,null],[11,"count","","",76,{"inputs":[{"name":"windows"}],"output":{"name":"usize"}}],[11,"nth","","",76,{"inputs":[{"name":"windows"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",76,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"next_back","","",76,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"clone","","",77,{"inputs":[{"name":"chunks"}],"output":{"name":"chunks"}}],[11,"next","","",77,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"size_hint","","",77,null],[11,"count","","",77,{"inputs":[{"name":"chunks"}],"output":{"name":"usize"}}],[11,"nth","","",77,{"inputs":[{"name":"chunks"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",77,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next_back","","",77,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next","","",78,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"size_hint","","",78,null],[11,"count","","",78,{"inputs":[{"name":"chunksmut"}],"output":{"name":"usize"}}],[11,"nth","","",78,{"inputs":[{"name":"chunksmut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",78,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"next_back","","",78,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"fmt","core::str::pattern","",79,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",79,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",79,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",79,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",80,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[11,"into_searcher","","",81,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",80,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",80,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",80,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",82,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",82,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",82,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",82,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",82,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",82,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",82,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",82,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",83,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",83,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",83,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",83,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",83,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",83,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",83,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",83,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",84,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",84,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",84,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",84,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",84,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",84,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",84,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",84,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",85,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",85,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",86,{"inputs":[{"name":"strsearcherimpl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",86,{"inputs":[{"name":"strsearcherimpl"}],"output":{"name":"strsearcherimpl"}}],[11,"fmt","","",87,{"inputs":[{"name":"emptyneedle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",87,{"inputs":[{"name":"emptyneedle"}],"output":{"name":"emptyneedle"}}],[11,"haystack","","",85,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",85,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",85,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",85,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",85,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",88,{"inputs":[{"name":"twowaysearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",88,{"inputs":[{"name":"twowaysearcher"}],"output":{"name":"twowaysearcher"}}],[11,"use_early_reject","","",89,{"inputs":[],"output":{"name":"bool"}}],[11,"rejecting","","",89,null],[11,"matching","","",89,null],[11,"use_early_reject","","",90,{"inputs":[],"output":{"name":"bool"}}],[11,"rejecting","","",90,null],[11,"matching","","",90,null],[11,"eq","core::str","",91,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",91,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"clone","","",91,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"parseboolerror"}}],[11,"fmt","","",91,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",91,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",92,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",92,{"inputs":[{"name":"utf8error"}],"output":{"name":"utf8error"}}],[11,"eq","","",92,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",92,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",92,{"inputs":[{"name":"utf8error"}],"output":{"name":"usize"}}],[11,"fmt","","",92,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",93,{"inputs":[{"name":"chars"}],"output":{"name":"chars"}}],[11,"next","","",93,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"size_hint","","",93,null],[11,"next_back","","",93,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",93,{"inputs":[{"name":"chars"}],"output":{"name":"str"}}],[11,"clone","","",94,{"inputs":[{"name":"charindices"}],"output":{"name":"charindices"}}],[11,"next","","",94,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"size_hint","","",94,null],[11,"next_back","","",94,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",94,{"inputs":[{"name":"charindices"}],"output":{"name":"str"}}],[11,"clone","","",95,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"next","","",95,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"size_hint","","",95,null],[11,"count","","",95,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"last","","",95,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"nth","","",95,{"inputs":[{"name":"bytes"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next_back","","",95,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"len","","",95,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"clone","","",96,{"inputs":[{"name":"splitinternal"}],"output":{"name":"splitinternal"}}],[11,"next","","",97,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"clone","","",97,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",98,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"clone","","",98,{"inputs":[{"name":"rsplit"}],"output":{"name":"rsplit"}}],[11,"next_back","","",97,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next_back","","",98,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"next","","",99,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"clone","","",99,{"inputs":[{"name":"splitterminator"}],"output":{"name":"splitterminator"}}],[11,"next","","",100,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",100,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"rsplitterminator"}}],[11,"next_back","","",99,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"next_back","","",100,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",101,{"inputs":[{"name":"splitninternal"}],"output":{"name":"splitninternal"}}],[11,"next","","",102,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"clone","","",102,{"inputs":[{"name":"splitn"}],"output":{"name":"splitn"}}],[11,"next","","",103,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"clone","","",103,{"inputs":[{"name":"rsplitn"}],"output":{"name":"rsplitn"}}],[11,"clone","","",104,{"inputs":[{"name":"matchindicesinternal"}],"output":{"name":"matchindicesinternal"}}],[11,"next","","",105,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"clone","","",105,{"inputs":[{"name":"matchindices"}],"output":{"name":"matchindices"}}],[11,"next","","",106,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",106,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"rmatchindices"}}],[11,"next_back","","",105,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"next_back","","",106,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",107,{"inputs":[{"name":"matchesinternal"}],"output":{"name":"matchesinternal"}}],[11,"next","","",108,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"clone","","",108,{"inputs":[{"name":"matches"}],"output":{"name":"matches"}}],[11,"next","","",109,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",109,{"inputs":[{"name":"rmatches"}],"output":{"name":"rmatches"}}],[11,"next_back","","",108,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"next_back","","",109,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",110,{"inputs":[{"name":"lines"}],"output":{"name":"lines"}}],[11,"next","","",110,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"size_hint","","",110,null],[11,"next_back","","",110,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"clone","","",111,{"inputs":[{"name":"linesany"}],"output":{"name":"linesany"}}],[11,"clone","","",112,{"inputs":[{"name":"linesanymap"}],"output":{"name":"linesanymap"}}],[11,"call","","",112,null],[11,"call_mut","","",112,null],[11,"call_once","","",112,null],[11,"next","","",111,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"size_hint","","",111,null],[11,"next_back","","",111,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"clone","","",113,{"inputs":[{"name":"charrange"}],"output":{"name":"charrange"}}],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",114,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",114,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",114,null],[11,"finish","","",114,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"clone","","",114,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"default","","",114,{"inputs":[],"output":{"name":"siphasher"}}],[11,"build_hasher","core::hash","",115,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"h"}}],[11,"clone","","",115,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"buildhasherdefault"}}],[11,"default","","",115,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"eq","core::fmt::num","",116,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"ne","","",116,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"clone","","",116,{"inputs":[{"name":"binary"}],"output":{"name":"binary"}}],[11,"eq","","",117,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"ne","","",117,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"clone","","",117,{"inputs":[{"name":"octal"}],"output":{"name":"octal"}}],[11,"eq","","",118,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",118,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"clone","","",118,{"inputs":[{"name":"decimal"}],"output":{"name":"decimal"}}],[11,"eq","","",119,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"ne","","",119,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"clone","","",119,{"inputs":[{"name":"lowerhex"}],"output":{"name":"lowerhex"}}],[11,"eq","","",120,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"ne","","",120,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"clone","","",120,{"inputs":[{"name":"upperhex"}],"output":{"name":"upperhex"}}],[11,"eq","","",121,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"ne","","",121,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"clone","","",121,{"inputs":[{"name":"radix"}],"output":{"name":"radix"}}],[11,"clone","","",122,{"inputs":[{"name":"radixfmt"}],"output":{"name":"radixfmt"}}],[11,"fmt","","",122,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_str","core::fmt::builders","",123,{"inputs":[{"name":"padadapter"},{"name":"str"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated struct output.",124,{"inputs":[{"name":"debugstruct"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",124,{"inputs":[{"name":"debugstruct"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated tuple struct output.",125,{"inputs":[{"name":"debugtuple"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",125,{"inputs":[{"name":"debugtuple"}],"output":{"name":"result"}}],[11,"formatter","","Returns the wrapped `Formatter`.",125,{"inputs":[{"name":"debugtuple"}],"output":{"name":"formatter"}}],[11,"finish","","",126,null],[11,"entry","","Adds a new entry to the set output.",127,{"inputs":[{"name":"debugset"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",127,{"inputs":[{"name":"debugset"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",127,{"inputs":[{"name":"debugset"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the list output.",128,{"inputs":[{"name":"debuglist"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",128,{"inputs":[{"name":"debuglist"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",128,{"inputs":[{"name":"debuglist"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the map output.",129,{"inputs":[{"name":"debugmap"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",129,{"inputs":[{"name":"debugmap"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",129,{"inputs":[{"name":"debugmap"}],"output":{"name":"result"}}],[11,"fmt","core::fmt","",130,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",130,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"clone","","",131,{"inputs":[{"name":"flagv1"}],"output":{"name":"flagv1"}}],[11,"clone","","",132,{"inputs":[{"name":"arguments"}],"output":{"name":"arguments"}}],[11,"fmt","","",132,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",132,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",133,{"inputs":[{"name":"formatter"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",133,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",133,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",133,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting (packed version of rt::Flag)",133,{"inputs":[{"name":"formatter"}],"output":{"name":"u32"}}],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",133,{"inputs":[{"name":"formatter"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",133,{"inputs":[{"name":"formatter"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",133,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",133,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",133,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",133,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",133,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",133,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",133,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",133,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",133,{"inputs":[{"name":"formatter"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",133,{"inputs":[{"name":"formatter"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",133,{"inputs":[{"name":"formatter"}],"output":{"name":"debugmap"}}],[11,"write_str","","",133,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",133,{"inputs":[{"name":"formatter"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",133,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"fmt","","",130,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::marker","",7,{"inputs":[{"name":"phantomdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cell","",20,{"inputs":[{"name":"cell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"refcell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"ref"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",25,{"inputs":[{"name":"refmut"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Wrapping","bitflags::__core::num","Provides intentionally-wrapped arithmetic on `T`.",null,null],[0,"wrapping","","",null,null],[8,"OverflowingOps","bitflags::__core::num::wrapping","",null,null],[10,"overflowing_add","","",134,null],[10,"overflowing_sub","","",134,null],[10,"overflowing_mul","","",134,null],[10,"overflowing_div","","",134,null],[10,"overflowing_rem","","",134,null],[10,"overflowing_neg","","",134,null],[10,"overflowing_shl","","",134,null],[10,"overflowing_shr","","",134,null],[8,"Zero","bitflags::__core::num","Types that have a &quot;zero&quot; value.",null,null],[10,"zero","","The &quot;zero&quot; (usually, additive identity) for this type.",135,{"inputs":[],"output":{"name":"self"}}],[8,"One","","Types that have a &quot;one&quot; value.",null,null],[10,"one","","The &quot;one&quot; (usually, multiplicative identity) for this type.",136,{"inputs":[],"output":{"name":"self"}}],[4,"FpCategory","","A classification of floating point numbers.",null,null],[13,"Nan","","&quot;Not a Number&quot;, often obtained by dividing by zero",1,null],[13,"Infinite","","Positive or negative infinity",1,null],[13,"Zero","","Positive or negative zero",1,null],[13,"Subnormal","","De-normalized floating point representation (less precise than `Normal`)",1,null],[13,"Normal","","A regular floating point number",1,null],[3,"ParseIntError","","An error which can be returned when parsing an integer.",null,null],[3,"ParseFloatError","","An error which can be returned when parsing a float.",null,null],[0,"prelude","bitflags::__core","The libcore prelude",null,null],[0,"v1","bitflags::__core::prelude","The core prelude",null,null],[8,"Copy","bitflags::__core::prelude::v1","Types that can be copied by simply copying bits (i.e. `memcpy`).",null,null],[8,"Send","","Types that can be transferred across thread boundaries.",null,null],[8,"Sized","","Types with a constant size known at compile-time.",null,null],[8,"Sync","","Types that can be safely shared between threads when aliased.",null,null],[8,"Drop","","The `Drop` trait is used to run some code when a value goes out of scope.\nThis is sometimes called a &#39;destructor&#39;.",null,null],[10,"drop","","A method called when the value goes out of scope.",137,null],[8,"Fn","","A version of the call operator that takes an immutable receiver.",null,null],[10,"call","","This is called when the call operator is used.",138,null],[8,"FnMut","","A version of the call operator that takes a mutable receiver.",null,null],[10,"call_mut","","This is called when the call operator is used.",139,null],[8,"FnOnce","","A version of the call operator that takes a by-value receiver.",null,null],[16,"Output","","The returned type after the call operator is used.",140,null],[10,"call_once","","This is called when the call operator is used.",140,null],[5,"drop","","Disposes of a value.",null,null],[8,"Clone","","A common trait for cloning an object.",null,null],[10,"clone","","Returns a copy of the value.",141,{"inputs":[{"name":"clone"}],"output":{"name":"self"}}],[11,"clone_from","","Performs copy-assignment from `source`.",141,null],[8,"PartialEq","","Trait for equality comparisons which are [partial equivalence\nrelations](http://en.wikipedia.org/wiki/Partial_equivalence_relation).",null,null],[10,"eq","","This method tests for `self` and `other` values to be equal, and is used\nby `==`.",142,{"inputs":[{"name":"partialeq"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ne","","This method tests for `!=`.",142,{"inputs":[{"name":"partialeq"},{"name":"rhs"}],"output":{"name":"bool"}}],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",null,null],[10,"partial_cmp","","This method returns an ordering between `self` and `other` values if one exists.",143,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"option"}}],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `&lt;` operator.",143,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `&lt;=`\noperator.",143,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `&gt;` operator.",143,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `&gt;=`\noperator.",143,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[8,"Eq","","Trait for equality comparisons which are [equivalence relations](\nhttps://en.wikipedia.org/wiki/Equivalence_relation).",null,null],[8,"Ord","","Trait for types that form a [total order](https://en.wikipedia.org/wiki/Total_order).",null,null],[10,"cmp","","This method returns an `Ordering` between `self` and `other`.",144,{"inputs":[{"name":"ord"},{"name":"self"}],"output":{"name":"ordering"}}],[8,"AsRef","","A cheap, reference-to-reference conversion.",null,null],[10,"as_ref","","Performs the conversion.",145,{"inputs":[{"name":"asref"}],"output":{"name":"t"}}],[8,"AsMut","","A cheap, mutable reference-to-mutable reference conversion.",null,null],[10,"as_mut","","Performs the conversion.",146,{"inputs":[{"name":"asmut"}],"output":{"name":"t"}}],[8,"Into","","A conversion that consumes `self`, which may or may not be expensive.",null,null],[10,"into","","Performs the conversion.",147,{"inputs":[{"name":"into"}],"output":{"name":"t"}}],[8,"From","","Construct `Self` via a conversion.",null,null],[10,"from","","Performs the conversion.",148,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"Default","","A trait for giving a type a useful default value.",null,null],[10,"default","","Returns the &quot;default value&quot; for a type.",149,{"inputs":[],"output":{"name":"self"}}],[8,"Iterator","","An interface for dealing with iterators.",null,null],[16,"Item","","The type of the elements being iterated over.",150,null],[10,"next","","Advances the iterator and returns the next value.",150,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"size_hint","","Returns the bounds on the remaining length of the iterator.",150,null],[11,"count","","Consumes the iterator, counting the number of iterations and returning it.",150,{"inputs":[{"name":"iterator"}],"output":{"name":"usize"}}],[11,"last","","Consumes the iterator, returning the last element.",150,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"nth","","Consumes the `n` first elements of the iterator, then returns the\n`next()` one.",150,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"option"}}],[11,"chain","","Takes two iterators and creates a new iterator over both in sequence.",150,{"inputs":[{"name":"iterator"},{"name":"u"}],"output":{"name":"chain"}}],[11,"zip","","&#39;Zips up&#39; two iterators into a single iterator of pairs.",150,{"inputs":[{"name":"iterator"},{"name":"u"}],"output":{"name":"zip"}}],[11,"map","","Takes a closure and creates an iterator which calls that closure on each\nelement.",150,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"map"}}],[11,"filter","","Creates an iterator which uses a closure to determine if an element\nshould be yielded.",150,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"filter"}}],[11,"filter_map","","Creates an iterator that both filters and maps.",150,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"filtermap"}}],[11,"enumerate","","Creates an iterator which gives the current iteration count as well as\nthe next value.",150,{"inputs":[{"name":"iterator"}],"output":{"name":"enumerate"}}],[11,"peekable","","Creates an iterator which can look at the `next()` element without\nconsuming it.",150,{"inputs":[{"name":"iterator"}],"output":{"name":"peekable"}}],[11,"skip_while","","Creates an iterator that [`skip()`]s elements based on a predicate.",150,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Creates an iterator that yields elements based on a predicate.",150,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"skip","","Creates an iterator that skips the first `n` elements.",150,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"skip"}}],[11,"take","","Creates an iterator that yields its first `n` elements.",150,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"take"}}],[11,"scan","","An iterator adaptor similar to [`fold()`] that holds internal state and\nproduces a new iterator.",150,{"inputs":[{"name":"iterator"},{"name":"st"},{"name":"f"}],"output":{"name":"scan"}}],[11,"flat_map","","Creates an iterator that works like map, but flattens nested structure.",150,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"flatmap"}}],[11,"fuse","","Creates an iterator which ends after the first `None`.",150,{"inputs":[{"name":"iterator"}],"output":{"name":"fuse"}}],[11,"inspect","","Do something with each element of an iterator, passing the value on.",150,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"by_ref","","Borrows an iterator, rather than consuming it.",150,{"inputs":[{"name":"iterator"}],"output":{"name":"self"}}],[11,"collect","","Transforms an iterator into a collection.",150,{"inputs":[{"name":"iterator"}],"output":{"name":"b"}}],[11,"partition","","Consumes an iterator, creating two collections from it.",150,null],[11,"fold","","An iterator adaptor that applies a function, producing a single, final value.",150,{"inputs":[{"name":"iterator"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"all","","Tests if every element of the iterator matches a predicate.",150,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","Tests if any element of the iterator matches a predicate.",150,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","Searches for an element of an iterator that satisfies a predicate.",150,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"position","","Searches for an element in an iterator, returning its index.",150,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"rposition","","Searches for an element in an iterator from the right, returning its\nindex.",150,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"max","","Returns the maximum element of an iterator.",150,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"min","","Returns the minimum element of an iterator.",150,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"max_by","","",150,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"option"}}],[11,"max_by_key","","Returns the element that gives the maximum value from the\nspecified function.",150,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by","","",150,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by_key","","Returns the element that gives the minimum value from the\nspecified function.",150,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"option"}}],[11,"rev","","Reverses an iterator&#39;s direction.",150,{"inputs":[{"name":"iterator"}],"output":{"name":"rev"}}],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",150,null],[11,"cloned","","Creates an iterator which `clone()`s all of its elements.",150,{"inputs":[{"name":"iterator"}],"output":{"name":"cloned"}}],[11,"cycle","","Repeats an iterator endlessly.",150,{"inputs":[{"name":"iterator"}],"output":{"name":"cycle"}}],[11,"sum","","Sums the elements of an iterator.",150,{"inputs":[{"name":"iterator"}],"output":{"name":"s"}}],[11,"product","","Iterates over the entire iterator, multiplying all the elements",150,{"inputs":[{"name":"iterator"}],"output":{"name":"p"}}],[11,"cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",150,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",150,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"option"}}],[11,"eq","","Determines if the elements of this `Iterator` are equal to those of\nanother.",150,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ne","","Determines if the elements of this `Iterator` are unequal to those of\nanother.",150,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"lt","","Determines if the elements of this `Iterator` are lexicographically\nless than those of another.",150,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"le","","Determines if the elements of this `Iterator` are lexicographically\nless or equal to those of another.",150,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"gt","","Determines if the elements of this `Iterator` are lexicographically\ngreater than those of another.",150,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ge","","Determines if the elements of this `Iterator` are lexicographically\ngreater than or equal to those of another.",150,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[8,"Extend","","Extend a collection with the contents of an iterator.",null,null],[10,"extend","","Extends a collection with the contents of an iterator.",151,null],[8,"IntoIterator","","Conversion into an `Iterator`.",null,null],[16,"Item","","The type of the elements being iterated over.",152,null],[16,"IntoIter","","Which kind of iterator are we turning this into?",152,null],[10,"into_iter","","Creates an iterator from a value.",152,null],[8,"DoubleEndedIterator","","An iterator able to yield elements from both ends.",null,null],[10,"next_back","","An iterator able to yield elements from both ends.",153,{"inputs":[{"name":"doubleendediterator"}],"output":{"name":"option"}}],[8,"ExactSizeIterator","","An iterator that knows its exact length.",null,null],[11,"len","","Returns the exact number of times the iterator will iterate.",154,{"inputs":[{"name":"exactsizeiterator"}],"output":{"name":"usize"}}],[4,"Option","","The `Option` type. See [the module level documentation](index.html) for more.",null,null],[13,"None","","No value",56,null],[13,"Some","","Some value `T`",56,null],[4,"Result","","`Result` is a type that represents either success (`Ok`) or failure (`Err`).",null,null],[13,"Ok","","Contains the success value",63,null],[13,"Err","","Contains the error value",63,null],[8,"SliceExt","","Extension methods for slices.",null,null],[16,"Item","","",155,null],[10,"split_at","","",155,null],[10,"iter","","",155,{"inputs":[{"name":"sliceext"}],"output":{"name":"iter"}}],[10,"split","","",155,{"inputs":[{"name":"sliceext"},{"name":"p"}],"output":{"name":"split"}}],[10,"splitn","","",155,{"inputs":[{"name":"sliceext"},{"name":"usize"},{"name":"p"}],"output":{"name":"splitn"}}],[10,"rsplitn","","",155,{"inputs":[{"name":"sliceext"},{"name":"usize"},{"name":"p"}],"output":{"name":"rsplitn"}}],[10,"windows","","",155,{"inputs":[{"name":"sliceext"},{"name":"usize"}],"output":{"name":"windows"}}],[10,"chunks","","",155,{"inputs":[{"name":"sliceext"},{"name":"usize"}],"output":{"name":"chunks"}}],[10,"get","","",155,{"inputs":[{"name":"sliceext"},{"name":"usize"}],"output":{"name":"option"}}],[10,"first","","",155,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"split_first","","",155,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"split_last","","",155,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"last","","",155,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"get_unchecked","","",155,null],[10,"as_ptr","","",155,null],[10,"binary_search","","",155,null],[10,"binary_search_by","","",155,{"inputs":[{"name":"sliceext"},{"name":"f"}],"output":{"name":"result"}}],[10,"len","","",155,{"inputs":[{"name":"sliceext"}],"output":{"name":"usize"}}],[11,"is_empty","","",155,{"inputs":[{"name":"sliceext"}],"output":{"name":"bool"}}],[10,"get_mut","","",155,{"inputs":[{"name":"sliceext"},{"name":"usize"}],"output":{"name":"option"}}],[10,"iter_mut","","",155,{"inputs":[{"name":"sliceext"}],"output":{"name":"itermut"}}],[10,"first_mut","","",155,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"split_first_mut","","",155,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"split_last_mut","","",155,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"last_mut","","",155,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"split_mut","","",155,{"inputs":[{"name":"sliceext"},{"name":"p"}],"output":{"name":"splitmut"}}],[10,"splitn_mut","","",155,{"inputs":[{"name":"sliceext"},{"name":"usize"},{"name":"p"}],"output":{"name":"splitnmut"}}],[10,"rsplitn_mut","","",155,{"inputs":[{"name":"sliceext"},{"name":"usize"},{"name":"p"}],"output":{"name":"rsplitnmut"}}],[10,"chunks_mut","","",155,{"inputs":[{"name":"sliceext"},{"name":"usize"}],"output":{"name":"chunksmut"}}],[10,"swap","","",155,null],[10,"split_at_mut","","",155,null],[10,"reverse","","",155,null],[10,"get_unchecked_mut","","",155,null],[10,"as_mut_ptr","","",155,null],[10,"contains","","",155,null],[10,"starts_with","","",155,null],[10,"ends_with","","",155,null],[10,"clone_from_slice","","",155,null],[10,"copy_from_slice","","",155,null],[0,"intrinsics","bitflags::__core","rustc compiler intrinsics.",null,null],[5,"atomic_cxchg","bitflags::__core::intrinsics","",null,null],[5,"atomic_cxchg_acq","","",null,null],[5,"atomic_cxchg_rel","","",null,null],[5,"atomic_cxchg_acqrel","","",null,null],[5,"atomic_cxchg_relaxed","","",null,null],[5,"atomic_cxchg_failrelaxed","","",null,null],[5,"atomic_cxchg_failacq","","",null,null],[5,"atomic_cxchg_acq_failrelaxed","","",null,null],[5,"atomic_cxchg_acqrel_failrelaxed","","",null,null],[5,"atomic_cxchgweak","","",null,null],[5,"atomic_cxchgweak_acq","","",null,null],[5,"atomic_cxchgweak_rel","","",null,null],[5,"atomic_cxchgweak_acqrel","","",null,null],[5,"atomic_cxchgweak_relaxed","","",null,null],[5,"atomic_cxchgweak_failrelaxed","","",null,null],[5,"atomic_cxchgweak_failacq","","",null,null],[5,"atomic_cxchgweak_acq_failrelaxed","","",null,null],[5,"atomic_cxchgweak_acqrel_failrelaxed","","",null,null],[5,"atomic_load","","",null,null],[5,"atomic_load_acq","","",null,null],[5,"atomic_load_relaxed","","",null,null],[5,"atomic_load_unordered","","",null,null],[5,"atomic_store","","",null,null],[5,"atomic_store_rel","","",null,null],[5,"atomic_store_relaxed","","",null,null],[5,"atomic_store_unordered","","",null,null],[5,"atomic_xchg","","",null,null],[5,"atomic_xchg_acq","","",null,null],[5,"atomic_xchg_rel","","",null,null],[5,"atomic_xchg_acqrel","","",null,null],[5,"atomic_xchg_relaxed","","",null,null],[5,"atomic_xadd","","",null,null],[5,"atomic_xadd_acq","","",null,null],[5,"atomic_xadd_rel","","",null,null],[5,"atomic_xadd_acqrel","","",null,null],[5,"atomic_xadd_relaxed","","",null,null],[5,"atomic_xsub","","",null,null],[5,"atomic_xsub_acq","","",null,null],[5,"atomic_xsub_rel","","",null,null],[5,"atomic_xsub_acqrel","","",null,null],[5,"atomic_xsub_relaxed","","",null,null],[5,"atomic_and","","",null,null],[5,"atomic_and_acq","","",null,null],[5,"atomic_and_rel","","",null,null],[5,"atomic_and_acqrel","","",null,null],[5,"atomic_and_relaxed","","",null,null],[5,"atomic_nand","","",null,null],[5,"atomic_nand_acq","","",null,null],[5,"atomic_nand_rel","","",null,null],[5,"atomic_nand_acqrel","","",null,null],[5,"atomic_nand_relaxed","","",null,null],[5,"atomic_or","","",null,null],[5,"atomic_or_acq","","",null,null],[5,"atomic_or_rel","","",null,null],[5,"atomic_or_acqrel","","",null,null],[5,"atomic_or_relaxed","","",null,null],[5,"atomic_xor","","",null,null],[5,"atomic_xor_acq","","",null,null],[5,"atomic_xor_rel","","",null,null],[5,"atomic_xor_acqrel","","",null,null],[5,"atomic_xor_relaxed","","",null,null],[5,"atomic_max","","",null,null],[5,"atomic_max_acq","","",null,null],[5,"atomic_max_rel","","",null,null],[5,"atomic_max_acqrel","","",null,null],[5,"atomic_max_relaxed","","",null,null],[5,"atomic_min","","",null,null],[5,"atomic_min_acq","","",null,null],[5,"atomic_min_rel","","",null,null],[5,"atomic_min_acqrel","","",null,null],[5,"atomic_min_relaxed","","",null,null],[5,"atomic_umin","","",null,null],[5,"atomic_umin_acq","","",null,null],[5,"atomic_umin_rel","","",null,null],[5,"atomic_umin_acqrel","","",null,null],[5,"atomic_umin_relaxed","","",null,null],[5,"atomic_umax","","",null,null],[5,"atomic_umax_acq","","",null,null],[5,"atomic_umax_rel","","",null,null],[5,"atomic_umax_acqrel","","",null,null],[5,"atomic_umax_relaxed","","",null,null],[5,"atomic_fence","","",null,null],[5,"atomic_fence_acq","","",null,null],[5,"atomic_fence_rel","","",null,null],[5,"atomic_fence_acqrel","","",null,null],[5,"atomic_singlethreadfence","","A compiler-only memory barrier.",null,null],[5,"atomic_singlethreadfence_acq","","",null,null],[5,"atomic_singlethreadfence_rel","","",null,null],[5,"atomic_singlethreadfence_acqrel","","",null,null],[5,"abort","","Aborts the execution of the process.",null,null],[5,"unreachable","","Tells LLVM that this point in the code is not reachable,\nenabling further optimizations.",null,null],[5,"assume","","Informs the optimizer that a condition is always true.\nIf the condition is false, the behavior is undefined.",null,null],[5,"breakpoint","","Executes a breakpoint trap, for inspection by a debugger.",null,null],[5,"size_of","","The size of a type in bytes.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"move_val_init","","Moves a value to an uninitialized memory location.",null,null],[5,"min_align_of","","",null,{"inputs":[],"output":{"name":"usize"}}],[5,"pref_align_of","","",null,{"inputs":[],"output":{"name":"usize"}}],[5,"size_of_val","","",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"min_align_of_val","","",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"drop_in_place","","Executes the destructor (if any) of the pointed-to value.",null,null],[5,"type_name","","Gets a static string slice containing the name of a type.",null,{"inputs":[],"output":{"name":"str"}}],[5,"type_id","","Gets an identifier which is globally unique to the specified type. This\nfunction will return the same value for a type regardless of whichever\ncrate it is invoked in.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"init_dropped","","Creates a value initialized to so that its drop flag,\nif any, says that it has been dropped.",null,{"inputs":[],"output":{"name":"t"}}],[5,"init","","Creates a value initialized to zero.",null,{"inputs":[],"output":{"name":"t"}}],[5,"uninit","","Creates an uninitialized value.",null,{"inputs":[],"output":{"name":"t"}}],[5,"forget","","Moves a value out of scope without running drop glue.",null,null],[5,"transmute","","Unsafely transforms a value of one type into a value of another type.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[5,"return_address","","Gives the address for the return value of the enclosing function.",null,null],[5,"needs_drop","","Returns `true` if the actual type given as `T` requires drop\nglue; returns `false` if the actual type provided for `T`\nimplements `Copy`.",null,{"inputs":[],"output":{"name":"bool"}}],[5,"offset","","Calculates the offset from a pointer.",null,null],[5,"arith_offset","","Calculates the offset from a pointer, potentially wrapping.",null,null],[5,"copy_nonoverlapping","","Copies `count * size_of&lt;T&gt;` bytes from `src` to `dst`. The source\nand destination may *not* overlap.",null,null],[5,"copy","","Copies `count * size_of&lt;T&gt;` bytes from `src` to `dst`. The source\nand destination may overlap.",null,null],[5,"write_bytes","","Invokes memset on the specified pointer, setting `count * size_of::&lt;T&gt;()`\nbytes of memory starting at `dst` to `val`.",null,null],[5,"volatile_copy_nonoverlapping_memory","","Equivalent to the appropriate `llvm.memcpy.p0i8.0i8.*` intrinsic, with\na size of `count` * `size_of::&lt;T&gt;()` and an alignment of\n`min_align_of::&lt;T&gt;()`",null,null],[5,"volatile_copy_memory","","Equivalent to the appropriate `llvm.memmove.p0i8.0i8.*` intrinsic, with\na size of `count` * `size_of::&lt;T&gt;()` and an alignment of\n`min_align_of::&lt;T&gt;()`",null,null],[5,"volatile_set_memory","","Equivalent to the appropriate `llvm.memset.p0i8.*` intrinsic, with a\nsize of `count` * `size_of::&lt;T&gt;()` and an alignment of\n`min_align_of::&lt;T&gt;()`.",null,null],[5,"volatile_load","","Perform a volatile load from the `src` pointer.",null,null],[5,"volatile_store","","Perform a volatile store to the `dst` pointer.",null,null],[5,"sqrtf32","","Returns the square root of an `f32`",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"sqrtf64","","Returns the square root of an `f64`",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"powif32","","Raises an `f32` to an integer power.",null,{"inputs":[{"name":"f32"},{"name":"i32"}],"output":{"name":"f32"}}],[5,"powif64","","Raises an `f64` to an integer power.",null,{"inputs":[{"name":"f64"},{"name":"i32"}],"output":{"name":"f64"}}],[5,"sinf32","","Returns the sine of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"sinf64","","Returns the sine of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"cosf32","","Returns the cosine of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"cosf64","","Returns the cosine of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"powf32","","Raises an `f32` to an `f32` power.",null,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"powf64","","Raises an `f64` to an `f64` power.",null,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"expf32","","Returns the exponential of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"expf64","","Returns the exponential of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"exp2f32","","Returns 2 raised to the power of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"exp2f64","","Returns 2 raised to the power of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"logf32","","Returns the natural logarithm of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"logf64","","Returns the natural logarithm of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"log10f32","","Returns the base 10 logarithm of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"log10f64","","Returns the base 10 logarithm of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"log2f32","","Returns the base 2 logarithm of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"log2f64","","Returns the base 2 logarithm of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"fmaf32","","Returns `a * b + c` for `f32` values.",null,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"fmaf64","","Returns `a * b + c` for `f64` values.",null,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"fabsf32","","Returns the absolute value of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"fabsf64","","Returns the absolute value of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"copysignf32","","Copies the sign from `y` to `x` for `f32` values.",null,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"copysignf64","","Copies the sign from `y` to `x` for `f64` values.",null,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"floorf32","","Returns the largest integer less than or equal to an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"floorf64","","Returns the largest integer less than or equal to an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"ceilf32","","Returns the smallest integer greater than or equal to an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"ceilf64","","Returns the smallest integer greater than or equal to an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"truncf32","","Returns the integer part of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"truncf64","","Returns the integer part of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"rintf32","","Returns the nearest integer to an `f32`. May raise an inexact floating-point exception\nif the argument is not an integer.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"rintf64","","Returns the nearest integer to an `f64`. May raise an inexact floating-point exception\nif the argument is not an integer.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"nearbyintf32","","Returns the nearest integer to an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"nearbyintf64","","Returns the nearest integer to an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"roundf32","","Returns the nearest integer to an `f32`. Rounds half-way cases away from zero.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"roundf64","","Returns the nearest integer to an `f64`. Rounds half-way cases away from zero.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"ctpop","","Returns the number of bits set in an integer type `T`",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"ctlz","","Returns the number of leading bits unset in an integer type `T`",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"cttz","","Returns the number of trailing bits unset in an integer type `T`",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"bswap","","Reverses the bytes in an integer type `T`.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"add_with_overflow","","Performs checked integer addition.",null,null],[5,"sub_with_overflow","","Performs checked integer subtraction",null,null],[5,"mul_with_overflow","","Performs checked integer multiplication",null,null],[5,"unchecked_div","","Performs an unchecked division, resulting in undefined behavior\nwhere y = 0 or x = `T::min_value()` and y = -1",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"unchecked_rem","","Returns the remainder of an unchecked division, resulting in\nundefined behavior where y = 0 or x = `T::min_value()` and y = -1",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"overflowing_add","","Returns (a + b) mod 2^N, where N is the width of T in bits.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"overflowing_sub","","Returns (a - b) mod 2^N, where N is the width of T in bits.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"overflowing_mul","","Returns (a * b) mod 2^N, where N is the width of T in bits.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"discriminant_value","","Returns the value of the discriminant for the variant in &#39;v&#39;,\ncast to a `u64`; if `T` has no discriminant, returns 0.",null,{"inputs":[{"name":"t"}],"output":{"name":"u64"}}],[5,"try","","Rust&#39;s &quot;try catch&quot; construct which invokes the function pointer `f` with\nthe data pointer `data`.",null,null],[0,"mem","bitflags::__core","Basic functions for dealing with memory",null,null],[5,"forget","bitflags::__core::mem","Leaks a value into the void, consuming ownership and never running its\ndestructor.",null,null],[5,"size_of","","Returns the size of a type in bytes.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"size_of_val","","Returns the size of the given value in bytes.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"min_align_of","","Returns the ABI-required minimum alignment of a type",null,{"inputs":[],"output":{"name":"usize"}}],[5,"min_align_of_val","","Returns the ABI-required minimum alignment of the type of the value that `val` points to",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"align_of","","Returns the alignment in memory for a type.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"align_of_val","","Returns the ABI-required minimum alignment of the type of the value that `val` points to",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"zeroed","","Creates a value initialized to zero.",null,{"inputs":[],"output":{"name":"t"}}],[5,"dropped","","Creates a value initialized to an unspecified series of bytes.",null,{"inputs":[],"output":{"name":"t"}}],[5,"uninitialized","","Bypasses Rust&#39;s normal memory-initialization checks by pretending to\nproduce a value of type T, while doing nothing at all.",null,{"inputs":[],"output":{"name":"t"}}],[5,"swap","","Swap the values at two mutable locations of the same type, without deinitializing or copying\neither one.",null,null],[5,"replace","","Replaces the value at a mutable location with a new one, returning the old value, without\ndeinitializing or copying either one.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"drop","","Disposes of a value.",null,null],[17,"POST_DROP_U8","","",null,null],[17,"POST_DROP_U32","","",null,null],[17,"POST_DROP_U64","","",null,null],[17,"POST_DROP_USIZE","","",null,null],[5,"transmute_copy","","Interprets `src` as `&amp;U`, and then reads `src` without moving the contained\nvalue.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[5,"transmute","","Unsafely transforms a value of one type into a value of another type.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[0,"nonzero","bitflags::__core","Exposes the NonZero lang item which provides optimization hints.",null,null],[8,"Zeroable","bitflags::__core::nonzero","Unsafe trait to indicate what types are usable with the NonZero struct",null,null],[3,"NonZero","","A wrapper type for raw pointers and integers that will never be\nNULL or 0 that might allow certain optimizations.",null,null],[0,"ptr","bitflags::__core","Raw, unsafe pointers, `*const T`, and `*mut T`",null,null],[5,"null","bitflags::__core::ptr","Creates a null raw pointer.",null,null],[5,"null_mut","","Creates a null mutable raw pointer.",null,null],[5,"swap","","Swaps the values at two mutable locations of the same type, without\ndeinitializing either. They may overlap, unlike `mem::swap` which is\notherwise equivalent.",null,null],[5,"replace","","Replaces the value at `dest` with `src`, returning the old\nvalue, without dropping either.",null,null],[5,"read","","Reads the value from `src` without moving it. This leaves the\nmemory in `src` unchanged.",null,null],[5,"read_and_drop","","",null,null],[5,"write","","Overwrites a memory location with the given value without reading or\ndropping the old value.",null,null],[5,"read_volatile","","Performs a volatile read of the value from `src` without moving it. This\nleaves the memory in `src` unchanged.",null,null],[5,"write_volatile","","Performs a volatile write of a memory location with the given value without\nreading or dropping the old value.",null,null],[3,"Unique","","A wrapper around a raw non-null `*mut T` that indicates that the possessor\nof this wrapper owns the referent. This in turn implies that the\n`Unique&lt;T&gt;` is `Send`/`Sync` if `T` is `Send`/`Sync`, unlike a raw\n`*mut T` (which conveys no particular ownership semantics).  It\nalso implies that the referent of the pointer should not be\nmodified without a unique path to the `Unique` reference. Useful\nfor building abstractions like `Vec&lt;T&gt;` or `Box&lt;T&gt;`, which\ninternally use raw pointers to manage the memory that they own.",null,null],[3,"Shared","","A wrapper around a raw non-null `*mut T` that indicates that the possessor\nof this wrapper has shared ownership of the referent. Useful for\nbuilding abstractions like `Rc&lt;T&gt;` or `Arc&lt;T&gt;`, which internally\nuse raw pointers to manage the memory that they own.",null,null],[5,"copy_nonoverlapping","","Copies `count * size_of&lt;T&gt;` bytes from `src` to `dst`. The source\nand destination may *not* overlap.",null,null],[5,"copy","","Copies `count * size_of&lt;T&gt;` bytes from `src` to `dst`. The source\nand destination may overlap.",null,null],[5,"write_bytes","","Invokes memset on the specified pointer, setting `count * size_of::&lt;T&gt;()`\nbytes of memory starting at `dst` to `val`.",null,null],[5,"drop_in_place","","Executes the destructor (if any) of the pointed-to value.",null,null],[0,"marker","bitflags::__core","Primitive traits and marker types representing basic &#39;kinds&#39; of types.",null,null],[8,"Send","bitflags::__core::marker","Types that can be transferred across thread boundaries.",null,null],[8,"Sized","","Types with a constant size known at compile-time.",null,null],[8,"Unsize","","Types that can be &quot;unsized&quot; to a dynamically sized type.",null,null],[8,"Copy","","Types that can be copied by simply copying bits (i.e. `memcpy`).",null,null],[8,"Sync","","Types that can be safely shared between threads when aliased.",null,null],[3,"PhantomData","","`PhantomData&lt;T&gt;` allows you to describe that a type acts as if it stores a value of type `T`,\neven though it does not. This allows you to inform the compiler about certain safety properties\nof your code.",null,null],[8,"Reflect","","Types that can be reflected over.",null,null],[0,"ops","bitflags::__core","Overloadable operators",null,null],[8,"Drop","bitflags::__core::ops","The `Drop` trait is used to run some code when a value goes out of scope.\nThis is sometimes called a &#39;destructor&#39;.",null,null],[10,"drop","","A method called when the value goes out of scope.",137,null],[8,"Add","","The `Add` trait is used to specify the functionality of `+`.",null,null],[16,"Output","","The resulting type after applying the `+` operator",156,null],[10,"add","","The method for the `+` operator",156,null],[8,"Sub","","The `Sub` trait is used to specify the functionality of `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator",157,null],[10,"sub","","The method for the `-` operator",157,null],[8,"Mul","","The `Mul` trait is used to specify the functionality of `*`.",null,null],[16,"Output","","The resulting type after applying the `*` operator",158,null],[10,"mul","","The method for the `*` operator",158,null],[8,"Div","","The `Div` trait is used to specify the functionality of `/`.",null,null],[16,"Output","","The resulting type after applying the `/` operator",159,null],[10,"div","","The method for the `/` operator",159,null],[8,"Rem","","The `Rem` trait is used to specify the functionality of `%`.",null,null],[16,"Output","","The resulting type after applying the `%` operator",160,null],[10,"rem","","The method for the `%` operator",160,null],[8,"Neg","","The `Neg` trait is used to specify the functionality of unary `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator",161,null],[10,"neg","","The method for the unary `-` operator",161,null],[8,"Not","","The `Not` trait is used to specify the functionality of unary `!`.",null,null],[16,"Output","","The resulting type after applying the `!` operator",162,null],[10,"not","","The method for the unary `!` operator",162,null],[8,"BitAnd","","The `BitAnd` trait is used to specify the functionality of `&amp;`.",null,null],[16,"Output","","The resulting type after applying the `&amp;` operator",163,null],[10,"bitand","","The method for the `&amp;` operator",163,null],[8,"BitOr","","The `BitOr` trait is used to specify the functionality of `|`.",null,null],[16,"Output","","The resulting type after applying the `|` operator",164,null],[10,"bitor","","The method for the `|` operator",164,null],[8,"BitXor","","The `BitXor` trait is used to specify the functionality of `^`.",null,null],[16,"Output","","The resulting type after applying the `^` operator",165,null],[10,"bitxor","","The method for the `^` operator",165,null],[8,"Shl","","The `Shl` trait is used to specify the functionality of `&lt;&lt;`.",null,null],[16,"Output","","The resulting type after applying the `&lt;&lt;` operator",166,null],[10,"shl","","The method for the `&lt;&lt;` operator",166,null],[8,"Shr","","The `Shr` trait is used to specify the functionality of `&gt;&gt;`.",null,null],[16,"Output","","The resulting type after applying the `&gt;&gt;` operator",167,null],[10,"shr","","The method for the `&gt;&gt;` operator",167,null],[8,"AddAssign","","The `AddAssign` trait is used to specify the functionality of `+=`.",null,null],[10,"add_assign","","The method for the `+=` operator",168,null],[8,"SubAssign","","The `SubAssign` trait is used to specify the functionality of `-=`.",null,null],[10,"sub_assign","","The method for the `-=` operator",169,null],[8,"MulAssign","","The `MulAssign` trait is used to specify the functionality of `*=`.",null,null],[10,"mul_assign","","The method for the `*=` operator",170,null],[8,"DivAssign","","The `DivAssign` trait is used to specify the functionality of `/=`.",null,null],[10,"div_assign","","The method for the `/=` operator",171,null],[8,"RemAssign","","The `RemAssign` trait is used to specify the functionality of `%=`.",null,null],[10,"rem_assign","","The method for the `%=` operator",172,null],[8,"BitAndAssign","","The `BitAndAssign` trait is used to specify the functionality of `&amp;=`.",null,null],[10,"bitand_assign","","The method for the `&amp;` operator",173,null],[8,"BitOrAssign","","The `BitOrAssign` trait is used to specify the functionality of `|=`.",null,null],[10,"bitor_assign","","The method for the `|=` operator",174,null],[8,"BitXorAssign","","The `BitXorAssign` trait is used to specify the functionality of `^=`.",null,null],[10,"bitxor_assign","","The method for the `^=` operator",175,null],[8,"ShlAssign","","The `ShlAssign` trait is used to specify the functionality of `&lt;&lt;=`.",null,null],[10,"shl_assign","","The method for the `&lt;&lt;=` operator",176,null],[8,"ShrAssign","","The `ShrAssign` trait is used to specify the functionality of `&gt;&gt;=`.",null,null],[10,"shr_assign","","The method for the `&gt;&gt;=` operator",177,null],[8,"Index","","The `Index` trait is used to specify the functionality of indexing operations\nlike `arr[idx]` when used in an immutable context.",null,null],[16,"Output","","The returned type after indexing",178,null],[10,"index","","The method for the indexing (`Foo[Bar]`) operation",178,null],[8,"IndexMut","","The `IndexMut` trait is used to specify the functionality of indexing\noperations like `arr[idx]`, when used in a mutable context.",null,null],[10,"index_mut","","The method for the indexing (`Foo[Bar]`) operation",179,null],[3,"RangeFull","","An unbounded range.",null,null],[3,"Range","","A (half-open) range which is bounded at both ends.",null,null],[12,"start","","The lower bound of the range (inclusive).",9,null],[12,"end","","The upper bound of the range (exclusive).",9,null],[3,"RangeFrom","","A range which is only bounded below.",null,null],[12,"start","","The lower bound of the range (inclusive).",10,null],[3,"RangeTo","","A range which is only bounded above.",null,null],[12,"end","","The upper bound of the range (exclusive).",11,null],[8,"Deref","","The `Deref` trait is used to specify the functionality of dereferencing\noperations, like `*v`.",null,null],[16,"Target","","The resulting type after dereferencing",180,null],[10,"deref","","The method called to dereference a value",180,null],[8,"DerefMut","","The `DerefMut` trait is used to specify the functionality of dereferencing\nmutably like `*v = 1;`",null,null],[10,"deref_mut","","The method called to mutably dereference a value",181,null],[8,"Fn","","A version of the call operator that takes an immutable receiver.",null,null],[10,"call","","This is called when the call operator is used.",138,null],[8,"FnMut","","A version of the call operator that takes a mutable receiver.",null,null],[10,"call_mut","","This is called when the call operator is used.",139,null],[8,"FnOnce","","A version of the call operator that takes a by-value receiver.",null,null],[16,"Output","","The returned type after the call operator is used.",140,null],[10,"call_once","","This is called when the call operator is used.",140,null],[8,"CoerceUnsized","","Trait that indicates that this is a pointer or a wrapper for one,\nwhere unsizing can be performed on the pointee.",null,null],[8,"Place","","Both `in (PLACE) EXPR` and `box EXPR` desugar into expressions\nthat allocate an intermediate &quot;place&quot; that holds uninitialized\nstate.  The desugaring evaluates EXPR, and writes the result at\nthe address returned by the `pointer` method of this trait.",null,null],[10,"pointer","","Returns the address where the input value will be written.\nNote that the data at this address is generally uninitialized,\nand thus one should use `ptr::write` for initializing it.",182,null],[8,"Placer","","Interface to implementations of  `in (PLACE) EXPR`.",null,null],[16,"Place","","`Place` is the intermedate agent guarding the\nuninitialized state for `Data`.",183,null],[10,"make_place","","Creates a fresh place from `self`.",183,null],[8,"InPlace","","Specialization of `Place` trait supporting `in (PLACE) EXPR`.",null,null],[16,"Owner","","`Owner` is the type of the end value of `in (PLACE) EXPR`",184,null],[10,"finalize","","Converts self into the final value, shifting\ndeallocation/cleanup responsibilities (if any remain), over to\nthe returned instance of `Owner` and forgetting self.",184,null],[8,"Boxed","","Core trait for the `box EXPR` form.",null,null],[16,"Data","","The kind of data that is stored in this kind of box.",185,null],[16,"Place","","The place that will negotiate the storage of the data.",185,null],[10,"finalize","","Converts filled place into final owning value, shifting\ndeallocation/cleanup responsibilities (if any remain), over to\nreturned instance of `Self` and forgetting `filled`.",185,null],[8,"BoxPlace","","Specialization of `Place` trait supporting `box EXPR`.",null,null],[10,"make_place","","Creates a globally fresh place.",186,{"inputs":[],"output":{"name":"self"}}],[0,"cmp","bitflags::__core","Functionality for ordering and comparison.",null,null],[8,"PartialEq","bitflags::__core::cmp","Trait for equality comparisons which are [partial equivalence\nrelations](http://en.wikipedia.org/wiki/Partial_equivalence_relation).",null,null],[10,"eq","","This method tests for `self` and `other` values to be equal, and is used\nby `==`.",142,{"inputs":[{"name":"partialeq"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ne","","This method tests for `!=`.",142,{"inputs":[{"name":"partialeq"},{"name":"rhs"}],"output":{"name":"bool"}}],[8,"Eq","","Trait for equality comparisons which are [equivalence relations](\nhttps://en.wikipedia.org/wiki/Equivalence_relation).",null,null],[4,"Ordering","","An `Ordering` is the result of a comparison between two values.",null,null],[13,"Less","","An ordering where a compared value is less [than another].",12,null],[13,"Equal","","An ordering where a compared value is equal [to another].",12,null],[13,"Greater","","An ordering where a compared value is greater [than another].",12,null],[8,"Ord","","Trait for types that form a [total order](https://en.wikipedia.org/wiki/Total_order).",null,null],[10,"cmp","","This method returns an `Ordering` between `self` and `other`.",144,{"inputs":[{"name":"ord"},{"name":"self"}],"output":{"name":"ordering"}}],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",null,null],[10,"partial_cmp","","This method returns an ordering between `self` and `other` values if one exists.",143,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"option"}}],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `&lt;` operator.",143,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `&lt;=`\noperator.",143,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `&gt;` operator.",143,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `&gt;=`\noperator.",143,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[5,"min","","Compare and return the minimum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"max","","Compare and return the maximum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"clone","bitflags::__core","The `Clone` trait for types that cannot be &#39;implicitly copied&#39;",null,null],[8,"Clone","bitflags::__core::clone","A common trait for cloning an object.",null,null],[10,"clone","","Returns a copy of the value.",141,{"inputs":[{"name":"clone"}],"output":{"name":"self"}}],[11,"clone_from","","Performs copy-assignment from `source`.",141,null],[0,"default","bitflags::__core","The `Default` trait for types which may have meaningful default values.",null,null],[8,"Default","bitflags::__core::default","A trait for giving a type a useful default value.",null,null],[10,"default","","Returns the &quot;default value&quot; for a type.",149,{"inputs":[],"output":{"name":"self"}}],[0,"convert","bitflags::__core","Traits for conversions between types.",null,null],[8,"AsRef","bitflags::__core::convert","A cheap, reference-to-reference conversion.",null,null],[10,"as_ref","","Performs the conversion.",145,{"inputs":[{"name":"asref"}],"output":{"name":"t"}}],[8,"AsMut","","A cheap, mutable reference-to-mutable reference conversion.",null,null],[10,"as_mut","","Performs the conversion.",146,{"inputs":[{"name":"asmut"}],"output":{"name":"t"}}],[8,"Into","","A conversion that consumes `self`, which may or may not be expensive.",null,null],[10,"into","","Performs the conversion.",147,{"inputs":[{"name":"into"}],"output":{"name":"t"}}],[8,"From","","Construct `Self` via a conversion.",null,null],[10,"from","","Performs the conversion.",148,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"borrow","bitflags::__core","A module for working with borrowed data.",null,null],[8,"Borrow","bitflags::__core::borrow","A trait for borrowing data.",null,null],[10,"borrow","","Immutably borrows from an owned value.",187,{"inputs":[{"name":"borrow"}],"output":{"name":"borrowed"}}],[8,"BorrowMut","","A trait for mutably borrowing data.",null,null],[10,"borrow_mut","","Mutably borrows from an owned value.",188,{"inputs":[{"name":"borrowmut"}],"output":{"name":"borrowed"}}],[0,"any","bitflags::__core","This module implements the `Any` trait, which enables dynamic typing\nof any `&#39;static` type through runtime reflection.",null,null],[8,"Any","bitflags::__core::any","A type to emulate dynamic typing.",null,null],[10,"get_type_id","","Gets the `TypeId` of `self`.",13,{"inputs":[{"name":"any"}],"output":{"name":"typeid"}}],[3,"TypeId","","A `TypeId` represents a globally unique identifier for a type.",null,null],[0,"array","bitflags::__core","Implementations of things like `Eq` for fixed-length arrays\nup to a certain length. Eventually we should able to generalize\nto all lengths.",null,null],[8,"FixedSizeArray","bitflags::__core::array","Utility trait implemented only on arrays of fixed size",null,null],[10,"as_slice","","Converts the array to immutable slice",189,null],[10,"as_mut_slice","","Converts the array to mutable slice",189,null],[0,"sync","bitflags::__core","Synchronization primitives",null,null],[0,"atomic","bitflags::__core::sync","Atomic types",null,null],[3,"AtomicBool","bitflags::__core::sync::atomic","A boolean type which can be safely shared between threads.",null,null],[3,"AtomicIsize","","A signed integer type which can be safely shared between threads.",null,null],[3,"AtomicUsize","","An unsigned integer type which can be safely shared between threads.",null,null],[3,"AtomicPtr","","A raw pointer type which can be safely shared between threads.",null,null],[4,"Ordering","","Atomic memory orderings",null,null],[13,"Relaxed","","No ordering constraints, only atomic operations. Corresponds to LLVM&#39;s\n`Monotonic` ordering.",19,null],[13,"Release","","When coupled with a store, all previous writes become visible\nto another thread that performs a load with `Acquire` ordering\non the same value.",19,null],[13,"Acquire","","When coupled with a load, all subsequent loads will see data\nwritten before a store with `Release` ordering on the same value\nin another thread.",19,null],[13,"AcqRel","","When coupled with a load, uses `Acquire` ordering, and with a store\n`Release` ordering.",19,null],[13,"SeqCst","","Like `AcqRel` with the additional guarantee that all threads see all\nsequentially consistent operations in the same order.",19,null],[17,"ATOMIC_BOOL_INIT","","An `AtomicBool` initialized to `false`.",null,null],[17,"ATOMIC_ISIZE_INIT","","An `AtomicIsize` initialized to `0`.",null,null],[17,"ATOMIC_USIZE_INIT","","An `AtomicUsize` initialized to `0`.",null,null],[5,"fence","","An atomic fence.",null,null],[0,"cell","bitflags::__core","Shareable mutable containers.",null,null],[3,"Cell","bitflags::__core::cell","A mutable memory location that admits only `Copy` data.",null,null],[3,"RefCell","","A mutable memory location with dynamically checked borrow rules",null,null],[4,"BorrowState","","An enumeration of values returned from the `state` method on a `RefCell&lt;T&gt;`.",null,null],[13,"Reading","","The cell is currently being read, there is at least one active `borrow`.",21,null],[13,"Writing","","The cell is currently being written to, there is an active `borrow_mut`.",21,null],[13,"Unused","","There are no outstanding borrows on this cell.",21,null],[3,"Ref","","Wraps a borrowed reference to a value in a `RefCell` box.\nA wrapper type for an immutably borrowed value from a `RefCell&lt;T&gt;`.",null,null],[3,"RefMut","","A wrapper type for a mutably borrowed value from a `RefCell&lt;T&gt;`.",null,null],[3,"UnsafeCell","","The core primitive for interior mutability in Rust.",null,null],[0,"char","bitflags::__core","Character manipulation.",null,null],[17,"MAX","bitflags::__core::char","The highest valid code point a `char` can have.",null,null],[5,"from_u32","","Converts a `u32` to a `char`.",null,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[5,"from_u32_unchecked","","Converts a `u32` to a `char`, ignoring validity.",null,{"inputs":[{"name":"u32"}],"output":{"name":"char"}}],[5,"from_digit","","Converts a digit in the given radix to a `char`.",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[3,"EscapeUnicode","","Returns an iterator that yields the hexadecimal Unicode escape of a\ncharacter, as `char`s.",null,null],[3,"EscapeDefault","","An iterator that yields the literal escape code of a `char`.",null,null],[0,"panicking","bitflags::__core","Panic support for libcore",null,null],[5,"panic","bitflags::__core::panicking","",null,null],[5,"panic_fmt","","",null,null],[0,"iter","bitflags::__core","Composable external iteration",null,null],[8,"Iterator","bitflags::__core::iter","An interface for dealing with iterators.",null,null],[16,"Item","","The type of the elements being iterated over.",150,null],[10,"next","","Advances the iterator and returns the next value.",150,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"size_hint","","Returns the bounds on the remaining length of the iterator.",150,null],[11,"count","","Consumes the iterator, counting the number of iterations and returning it.",150,{"inputs":[{"name":"iterator"}],"output":{"name":"usize"}}],[11,"last","","Consumes the iterator, returning the last element.",150,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"nth","","Consumes the `n` first elements of the iterator, then returns the\n`next()` one.",150,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"option"}}],[11,"chain","","Takes two iterators and creates a new iterator over both in sequence.",150,{"inputs":[{"name":"iterator"},{"name":"u"}],"output":{"name":"chain"}}],[11,"zip","","&#39;Zips up&#39; two iterators into a single iterator of pairs.",150,{"inputs":[{"name":"iterator"},{"name":"u"}],"output":{"name":"zip"}}],[11,"map","","Takes a closure and creates an iterator which calls that closure on each\nelement.",150,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"map"}}],[11,"filter","","Creates an iterator which uses a closure to determine if an element\nshould be yielded.",150,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"filter"}}],[11,"filter_map","","Creates an iterator that both filters and maps.",150,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"filtermap"}}],[11,"enumerate","","Creates an iterator which gives the current iteration count as well as\nthe next value.",150,{"inputs":[{"name":"iterator"}],"output":{"name":"enumerate"}}],[11,"peekable","","Creates an iterator which can look at the `next()` element without\nconsuming it.",150,{"inputs":[{"name":"iterator"}],"output":{"name":"peekable"}}],[11,"skip_while","","Creates an iterator that [`skip()`]s elements based on a predicate.",150,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Creates an iterator that yields elements based on a predicate.",150,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"skip","","Creates an iterator that skips the first `n` elements.",150,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"skip"}}],[11,"take","","Creates an iterator that yields its first `n` elements.",150,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"take"}}],[11,"scan","","An iterator adaptor similar to [`fold()`] that holds internal state and\nproduces a new iterator.",150,{"inputs":[{"name":"iterator"},{"name":"st"},{"name":"f"}],"output":{"name":"scan"}}],[11,"flat_map","","Creates an iterator that works like map, but flattens nested structure.",150,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"flatmap"}}],[11,"fuse","","Creates an iterator which ends after the first `None`.",150,{"inputs":[{"name":"iterator"}],"output":{"name":"fuse"}}],[11,"inspect","","Do something with each element of an iterator, passing the value on.",150,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"by_ref","","Borrows an iterator, rather than consuming it.",150,{"inputs":[{"name":"iterator"}],"output":{"name":"self"}}],[11,"collect","","Transforms an iterator into a collection.",150,{"inputs":[{"name":"iterator"}],"output":{"name":"b"}}],[11,"partition","","Consumes an iterator, creating two collections from it.",150,null],[11,"fold","","An iterator adaptor that applies a function, producing a single, final value.",150,{"inputs":[{"name":"iterator"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"all","","Tests if every element of the iterator matches a predicate.",150,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","Tests if any element of the iterator matches a predicate.",150,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","Searches for an element of an iterator that satisfies a predicate.",150,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"position","","Searches for an element in an iterator, returning its index.",150,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"rposition","","Searches for an element in an iterator from the right, returning its\nindex.",150,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"max","","Returns the maximum element of an iterator.",150,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"min","","Returns the minimum element of an iterator.",150,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"max_by","","",150,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"option"}}],[11,"max_by_key","","Returns the element that gives the maximum value from the\nspecified function.",150,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by","","",150,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by_key","","Returns the element that gives the minimum value from the\nspecified function.",150,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"option"}}],[11,"rev","","Reverses an iterator&#39;s direction.",150,{"inputs":[{"name":"iterator"}],"output":{"name":"rev"}}],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",150,null],[11,"cloned","","Creates an iterator which `clone()`s all of its elements.",150,{"inputs":[{"name":"iterator"}],"output":{"name":"cloned"}}],[11,"cycle","","Repeats an iterator endlessly.",150,{"inputs":[{"name":"iterator"}],"output":{"name":"cycle"}}],[11,"sum","","Sums the elements of an iterator.",150,{"inputs":[{"name":"iterator"}],"output":{"name":"s"}}],[11,"product","","Iterates over the entire iterator, multiplying all the elements",150,{"inputs":[{"name":"iterator"}],"output":{"name":"p"}}],[11,"cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",150,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",150,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"option"}}],[11,"eq","","Determines if the elements of this `Iterator` are equal to those of\nanother.",150,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ne","","Determines if the elements of this `Iterator` are unequal to those of\nanother.",150,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"lt","","Determines if the elements of this `Iterator` are lexicographically\nless than those of another.",150,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"le","","Determines if the elements of this `Iterator` are lexicographically\nless or equal to those of another.",150,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"gt","","Determines if the elements of this `Iterator` are lexicographically\ngreater than those of another.",150,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ge","","Determines if the elements of this `Iterator` are lexicographically\ngreater than or equal to those of another.",150,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[8,"FromIterator","","Conversion from an `Iterator`.",null,null],[10,"from_iter","","Creates a value from an iterator.",190,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"IntoIterator","","Conversion into an `Iterator`.",null,null],[16,"Item","","The type of the elements being iterated over.",152,null],[16,"IntoIter","","Which kind of iterator are we turning this into?",152,null],[10,"into_iter","","Creates an iterator from a value.",152,null],[8,"Extend","","Extend a collection with the contents of an iterator.",null,null],[10,"extend","","Extends a collection with the contents of an iterator.",151,null],[8,"DoubleEndedIterator","","An iterator able to yield elements from both ends.",null,null],[10,"next_back","","An iterator able to yield elements from both ends.",153,{"inputs":[{"name":"doubleendediterator"}],"output":{"name":"option"}}],[8,"ExactSizeIterator","","An iterator that knows its exact length.",null,null],[11,"len","","Returns the exact number of times the iterator will iterate.",154,{"inputs":[{"name":"exactsizeiterator"}],"output":{"name":"usize"}}],[3,"Rev","","An double-ended iterator with the direction inverted.",null,null],[3,"Cloned","","An iterator that clones the elements of an underlying iterator.",null,null],[3,"Cycle","","An iterator that repeats endlessly.",null,null],[3,"Chain","","An iterator that strings two iterators together.",null,null],[3,"Zip","","An iterator that iterates two other iterators simultaneously.",null,null],[3,"Map","","An iterator that maps the values of `iter` with `f`.",null,null],[3,"Filter","","An iterator that filters the elements of `iter` with `predicate`.",null,null],[3,"FilterMap","","An iterator that uses `f` to both filter and map elements from `iter`.",null,null],[3,"Enumerate","","An iterator that yields the current count and the element during iteration.",null,null],[3,"Peekable","","An iterator with a `peek()` that returns an optional reference to the next\nelement.",null,null],[3,"SkipWhile","","An iterator that rejects elements while `predicate` is true.",null,null],[3,"TakeWhile","","An iterator that only accepts elements while `predicate` is true.",null,null],[3,"Skip","","An iterator that skips over `n` elements of `iter`.",null,null],[3,"Take","","An iterator that only iterates over the first `n` iterations of `iter`.",null,null],[3,"Scan","","An iterator to maintain state while iterating another iterator.",null,null],[3,"FlatMap","","An iterator that maps each element to an iterator, and yields the elements\nof the produced iterators.",null,null],[3,"Fuse","","An iterator that yields `None` forever after the underlying iterator\nyields `None` once.",null,null],[3,"Inspect","","An iterator that calls a function with a reference to each element before\nyielding it.",null,null],[8,"Step","","Objects that can be stepped over in both directions.",null,null],[10,"step","","Steps `self` if possible.",191,{"inputs":[{"name":"step"},{"name":"self"}],"output":{"name":"option"}}],[10,"steps_between","","Returns the number of steps between two step objects. The count is\ninclusive of `start` and exclusive of `end`.",191,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[3,"StepBy","","An adapter for stepping range iterators by a custom amount.",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[5,"range_inclusive","","Returns an iterator over the range [start, stop].",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[3,"Repeat","","An iterator that repeats an element endlessly.",null,null],[5,"repeat","","Creates a new iterator that endlessly repeats a single element.",null,{"inputs":[{"name":"t"}],"output":{"name":"repeat"}}],[3,"Empty","","An iterator that yields nothing.",null,null],[5,"empty","","Creates an iterator that yields nothing.",null,{"inputs":[],"output":{"name":"empty"}}],[3,"Once","","An iterator that yields an element exactly once.",null,null],[5,"once","","Creates an iterator that yields an element exactly once.",null,{"inputs":[{"name":"t"}],"output":{"name":"once"}}],[0,"option","bitflags::__core","Optional values",null,null],[4,"Option","bitflags::__core::option","The `Option` type. See [the module level documentation](index.html) for more.",null,null],[13,"None","","No value",56,null],[13,"Some","","Some value `T`",56,null],[3,"Iter","","An iterator over a reference of the contained item in an Option.",null,null],[3,"IterMut","","An iterator over a mutable reference of the contained item in an Option.",null,null],[3,"IntoIter","","An iterator over the item contained inside an Option.",null,null],[0,"raw","bitflags::__core","Contains struct definitions for the layout of compiler built-in types.",null,null],[3,"Slice","bitflags::__core::raw","The representation of a slice like `&amp;[T]`.",null,null],[12,"data","","",61,null],[12,"len","","",61,null],[3,"TraitObject","","The representation of a trait object like `&amp;SomeTrait`.",null,null],[12,"data","","",62,null],[12,"vtable","","",62,null],[8,"Repr","","This trait is meant to map equivalences between raw structs and their\ncorresponding rust values.",null,null],[11,"repr","","This function &quot;unwraps&quot; a rust value (without consuming it) into its raw\nstruct representation. This can be used to read/write different values\nfor the struct. This is a safe method because by default it does not\nenable write-access to the fields of the return value in safe code.",192,{"inputs":[{"name":"repr"}],"output":{"name":"t"}}],[0,"result","bitflags::__core","Error handling with the `Result` type",null,null],[4,"Result","bitflags::__core::result","`Result` is a type that represents either success (`Ok`) or failure (`Err`).",null,null],[13,"Ok","","Contains the success value",63,null],[13,"Err","","Contains the error value",63,null],[3,"Iter","","An iterator over a reference to the `Ok` variant of a `Result`.",null,null],[3,"IterMut","","An iterator over a mutable reference to the `Ok` variant of a `Result`.",null,null],[3,"IntoIter","","An iterator over the value in a `Ok` variant of a `Result`.",null,null],[0,"slice","bitflags::__core","Slice management and manipulation",null,null],[8,"SliceExt","bitflags::__core::slice","Extension methods for slices.",null,null],[16,"Item","","",155,null],[10,"split_at","","",155,null],[10,"iter","","",155,{"inputs":[{"name":"sliceext"}],"output":{"name":"iter"}}],[10,"split","","",155,{"inputs":[{"name":"sliceext"},{"name":"p"}],"output":{"name":"split"}}],[10,"splitn","","",155,{"inputs":[{"name":"sliceext"},{"name":"usize"},{"name":"p"}],"output":{"name":"splitn"}}],[10,"rsplitn","","",155,{"inputs":[{"name":"sliceext"},{"name":"usize"},{"name":"p"}],"output":{"name":"rsplitn"}}],[10,"windows","","",155,{"inputs":[{"name":"sliceext"},{"name":"usize"}],"output":{"name":"windows"}}],[10,"chunks","","",155,{"inputs":[{"name":"sliceext"},{"name":"usize"}],"output":{"name":"chunks"}}],[10,"get","","",155,{"inputs":[{"name":"sliceext"},{"name":"usize"}],"output":{"name":"option"}}],[10,"first","","",155,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"split_first","","",155,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"split_last","","",155,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"last","","",155,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"get_unchecked","","",155,null],[10,"as_ptr","","",155,null],[10,"binary_search","","",155,null],[10,"binary_search_by","","",155,{"inputs":[{"name":"sliceext"},{"name":"f"}],"output":{"name":"result"}}],[10,"len","","",155,{"inputs":[{"name":"sliceext"}],"output":{"name":"usize"}}],[11,"is_empty","","",155,{"inputs":[{"name":"sliceext"}],"output":{"name":"bool"}}],[10,"get_mut","","",155,{"inputs":[{"name":"sliceext"},{"name":"usize"}],"output":{"name":"option"}}],[10,"iter_mut","","",155,{"inputs":[{"name":"sliceext"}],"output":{"name":"itermut"}}],[10,"first_mut","","",155,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"split_first_mut","","",155,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"split_last_mut","","",155,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"last_mut","","",155,{"inputs":[{"name":"sliceext"}],"output":{"name":"option"}}],[10,"split_mut","","",155,{"inputs":[{"name":"sliceext"},{"name":"p"}],"output":{"name":"splitmut"}}],[10,"splitn_mut","","",155,{"inputs":[{"name":"sliceext"},{"name":"usize"},{"name":"p"}],"output":{"name":"splitnmut"}}],[10,"rsplitn_mut","","",155,{"inputs":[{"name":"sliceext"},{"name":"usize"},{"name":"p"}],"output":{"name":"rsplitnmut"}}],[10,"chunks_mut","","",155,{"inputs":[{"name":"sliceext"},{"name":"usize"}],"output":{"name":"chunksmut"}}],[10,"swap","","",155,null],[10,"split_at_mut","","",155,null],[10,"reverse","","",155,null],[10,"get_unchecked_mut","","",155,null],[10,"as_mut_ptr","","",155,null],[10,"contains","","",155,null],[10,"starts_with","","",155,null],[10,"ends_with","","",155,null],[10,"clone_from_slice","","",155,null],[10,"copy_from_slice","","",155,null],[3,"Iter","","Immutable slice iterator",null,null],[3,"IterMut","","Mutable slice iterator.",null,null],[3,"Split","","An iterator over subslices separated by elements that match a predicate\nfunction.",null,null],[3,"SplitMut","","An iterator over the subslices of the vector which are separated\nby elements that match `pred`.",null,null],[3,"SplitN","","An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits.",null,null],[3,"RSplitN","","An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice.",null,null],[3,"SplitNMut","","An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits.",null,null],[3,"RSplitNMut","","An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice.",null,null],[3,"Windows","","An iterator over overlapping subslices of length `size`.",null,null],[3,"Chunks","","An iterator over a slice in (non-overlapping) chunks (`size` elements at a\ntime).",null,null],[3,"ChunksMut","","An iterator over a slice in (non-overlapping) mutable chunks (`size`\nelements at a time). When the slice len is not evenly divided by the chunk\nsize, the last slice of the iteration will be the remainder.",null,null],[5,"from_raw_parts","","Forms a slice from a pointer and a length.",null,null],[5,"from_raw_parts_mut","","Performs the same functionality as `from_raw_parts`, except that a mutable\nslice is returned.",null,null],[0,"bytes","","Operations on `[u8]`.",null,null],[8,"MutableByteVector","bitflags::__core::slice::bytes","A trait for operations on mutable `[u8]`s.",null,null],[10,"set_memory","","Sets all bytes of the receiver to the given value.",193,null],[5,"copy_memory","","Copies data from `src` to `dst`",null,null],[0,"str","bitflags::__core","String manipulation",null,null],[0,"pattern","bitflags::__core::str","The string Pattern API.",null,null],[8,"Pattern","bitflags::__core::str::pattern","A string pattern.",null,null],[16,"Searcher","","Associated searcher for this pattern",194,null],[10,"into_searcher","","Constructs the associated searcher from\n`self` and the `haystack` to search in.",194,null],[11,"is_contained_in","","Checks whether the pattern matches anywhere in the haystack",194,{"inputs":[{"name":"pattern"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the haystack",194,{"inputs":[{"name":"pattern"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the haystack",194,{"inputs":[{"name":"pattern"},{"name":"str"}],"output":{"name":"bool"}}],[4,"SearchStep","","Result of calling `Searcher::next()` or `ReverseSearcher::next_back()`.",null,null],[13,"Match","","Expresses that a match of the pattern has been found at\n`haystack[a..b]`.",79,null],[13,"Reject","","Expresses that `haystack[a..b]` has been rejected as a possible match\nof the pattern.",79,null],[13,"Done","","Expresses that every byte of the haystack has been visted, ending\nthe iteration.",79,null],[8,"Searcher","","A searcher for a string pattern.",null,null],[10,"haystack","","Getter for the underlaying string to be searched in",195,{"inputs":[{"name":"searcher"}],"output":{"name":"str"}}],[10,"next","","Performs the next search step starting from the front.",195,{"inputs":[{"name":"searcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","Find the next `Match` result. See `next()`",195,{"inputs":[{"name":"searcher"}],"output":{"name":"option"}}],[11,"next_reject","","Find the next `Reject` result. See `next()`",195,{"inputs":[{"name":"searcher"}],"output":{"name":"option"}}],[8,"ReverseSearcher","","A reverse searcher for a string pattern.",null,null],[10,"next_back","","Performs the next search step starting from the back.",196,{"inputs":[{"name":"reversesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","Find the next `Match` result. See `next_back()`",196,{"inputs":[{"name":"reversesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","Find the next `Reject` result. See `next_back()`",196,{"inputs":[{"name":"reversesearcher"}],"output":{"name":"option"}}],[8,"DoubleEndedSearcher","","A marker trait to express that a `ReverseSearcher`\ncan be used for a `DoubleEndedIterator` implementation.",null,null],[3,"CharSearcher","","Associated type for `&lt;char as Pattern&lt;&#39;a&gt;&gt;::Searcher`.",null,null],[3,"CharSliceSearcher","","Associated type for `&lt;&amp;[char] as Pattern&lt;&#39;a&gt;&gt;::Searcher`.",null,null],[3,"CharPredicateSearcher","","Associated type for `&lt;F as Pattern&lt;&#39;a&gt;&gt;::Searcher`.",null,null],[3,"StrSearcher","","Associated type for `&lt;&amp;str as Pattern&lt;&#39;a&gt;&gt;::Searcher`.",null,null],[8,"FromStr","bitflags::__core::str","A trait to abstract the idea of creating a new instance of a type from a\nstring.",null,null],[16,"Err","","The associated error which can be returned from parsing.",197,null],[10,"from_str","","Parses a string `s` to return a value of this type.",197,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[3,"ParseBoolError","","An error returned when parsing a `bool` from a string fails.",null,null],[3,"Utf8Error","","Errors which can occur when attempting to interpret a sequence of `u8`\nas a string.",null,null],[5,"from_utf8","","Converts a slice of bytes to a string slice.",null,null],[5,"from_utf8_unchecked","","Converts a slice of bytes to a string slice without checking\nthat the string contains valid UTF-8.",null,null],[3,"Chars","","Iterator for the char (representing *Unicode Scalar Values*) of a string",null,null],[5,"next_code_point","","Reads the next code point out of a byte iterator (assuming a\nUTF-8-like encoding).",null,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[3,"CharIndices","","Iterator for a string&#39;s characters and their byte offsets.",null,null],[3,"Bytes","","External iterator for a string&#39;s bytes.\nUse with the `std::iter` module.",null,null],[3,"Split","","Created with the method [`split()`].",null,null],[3,"RSplit","","Created with the method [`rsplit()`].",null,null],[3,"SplitTerminator","","Created with the method [`split_terminator()`].",null,null],[3,"RSplitTerminator","","Created with the method [`rsplit_terminator()`].",null,null],[3,"SplitN","","Created with the method [`splitn()`].",null,null],[3,"RSplitN","","Created with the method [`rsplitn()`].",null,null],[3,"MatchIndices","","Created with the method [`match_indices()`].",null,null],[3,"RMatchIndices","","Created with the method [`rmatch_indices()`].",null,null],[3,"Matches","","Created with the method [`matches()`].",null,null],[3,"RMatches","","Created with the method [`rmatches()`].",null,null],[3,"Lines","","Created with the method [`lines()`].",null,null],[3,"LinesAny","","Created with the method [`lines_any()`].",null,null],[3,"CharRange","","Struct that contains a `char` and the index of the first byte of\nthe next `char` in a string.  This can be used as a data structure\nfor iterating over the UTF-8 bytes of a string.",null,null],[12,"ch","","Current `char`",113,null],[12,"next","","Index of the first byte of the next `char`",113,null],[0,"hash","bitflags::__core","Generic hashing support.",null,null],[8,"Hash","bitflags::__core::hash","A hashable type.",null,null],[10,"hash","","Feeds this value into the state given, updating the hasher as necessary.",198,null],[11,"hash_slice","","Feeds a slice of this type into the state provided.",198,null],[8,"Hasher","","A trait which represents the ability to hash an arbitrary stream of bytes.",null,null],[10,"finish","","Completes a round of hashing, producing the output hash generated.",199,{"inputs":[{"name":"hasher"}],"output":{"name":"u64"}}],[10,"write","","Writes some data into this `Hasher`",199,null],[11,"write_u8","","Write a single `u8` into this hasher",199,null],[11,"write_u16","","Write a single `u16` into this hasher.",199,null],[11,"write_u32","","Write a single `u32` into this hasher.",199,null],[11,"write_u64","","Write a single `u64` into this hasher.",199,null],[11,"write_usize","","Write a single `usize` into this hasher.",199,null],[11,"write_i8","","Write a single `i8` into this hasher.",199,null],[11,"write_i16","","Write a single `i16` into this hasher.",199,null],[11,"write_i32","","Write a single `i32` into this hasher.",199,null],[11,"write_i64","","Write a single `i64` into this hasher.",199,null],[11,"write_isize","","Write a single `isize` into this hasher.",199,null],[8,"BuildHasher","","A `BuildHasher` is typically used as a factory for instances of `Hasher`\nwhich a `HashMap` can then use to hash keys independently.",null,null],[16,"Hasher","","Type of the hasher that will be created.",200,null],[10,"build_hasher","","Creates a new hasher.",200,null],[3,"BuildHasherDefault","","A structure which implements `BuildHasher` for all `Hasher` types which also\nimplement `Default`.",null,null],[8,"HashState","","Deprecated, renamed to `BuildHasher`",null,null],[16,"Hasher","","Type of the hasher that will be created.",201,null],[10,"hasher","","Creates a new hasher based on the given state of this object.",201,null],[3,"SipHasher","","An implementation of SipHash 2-4.",null,null],[0,"fmt","bitflags::__core","Utilities for formatting and printing strings",null,null],[6,"Result","bitflags::__core::fmt","",null,null],[3,"Error","","The error type which is returned from formatting a message into a stream.",null,null],[8,"Write","","A collection of methods that are required to format a message into a stream.",null,null],[10,"write_str","","Writes a slice of bytes into this writer, returning whether the write\nsucceeded.",202,{"inputs":[{"name":"write"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","Writes a `char` into this writer, returning whether the write succeeded.",202,{"inputs":[{"name":"write"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","Glue for usage of the `write!` macro with implementors of this trait.",202,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[3,"Formatter","","A struct to represent both where to emit formatting strings to and how they\nshould be formatted. A mutable version of this is passed to all formatting\ntraits.",null,null],[3,"Arguments","","This structure represents a safely precompiled version of a format string\nand its arguments. This cannot be generated at runtime because it cannot\nsafely be done so, so no constructors are given and the fields are private\nto prevent modification.",null,null],[8,"Debug","","Format trait for the `?` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",203,{"inputs":[{"name":"debug"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Display","","Format trait for an empty format, `{}`.",null,null],[10,"fmt","","Formats the value using the given formatter.",204,{"inputs":[{"name":"display"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Octal","","Format trait for the `o` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",205,{"inputs":[{"name":"octal"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Binary","","Format trait for the `b` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",206,{"inputs":[{"name":"binary"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"LowerHex","","Format trait for the `x` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",207,{"inputs":[{"name":"lowerhex"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"UpperHex","","Format trait for the `X` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",208,{"inputs":[{"name":"upperhex"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Pointer","","Format trait for the `p` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",209,{"inputs":[{"name":"pointer"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"LowerExp","","Format trait for the `e` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",210,{"inputs":[{"name":"lowerexp"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"UpperExp","","Format trait for the `E` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",211,{"inputs":[{"name":"upperexp"},{"name":"formatter"}],"output":{"name":"result"}}],[5,"write","","The `write` function takes an output stream, a precompiled format string,\nand a list of arguments. The arguments will be formatted according to the\nspecified format string into the output stream provided.",null,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[5,"radix","","Constructs a radix formatter in the range of `2..36`.",null,{"inputs":[{"name":"t"},{"name":"u8"}],"output":{"name":"radixfmt"}}],[3,"Radix","","A radix with in the range of `2..36`.",null,null],[3,"RadixFmt","","A helper type for formatting radixes.",null,null],[3,"DebugStruct","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugTuple","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugSet","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugList","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugMap","","A struct to help with `fmt::Debug` implementations.",null,null],[14,"bitflags!","bitflags","The `bitflags!` macro generates a `struct` that holds a set of C-style\nbitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null]],"paths":[[3,"Wrapping"],[4,"FpCategory"],[3,"ParseIntError"],[4,"IntErrorKind"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[4,"Ordering"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"RefMut"],[3,"BorrowRefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[4,"EscapeUnicodeState"],[3,"EscapeDefault"],[4,"EscapeDefaultState"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[4,"ChainState"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"StepBy"],[3,"RangeInclusive"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[4,"Option"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"GenericSplitN"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharEqSearcher"],[3,"CharEqPattern"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[4,"StrSearcherImpl"],[3,"EmptyNeedle"],[3,"TwoWaySearcher"],[4,"MatchOnly"],[4,"RejectAndMatch"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"SplitInternal"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitNInternal"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndicesInternal"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"MatchesInternal"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"LinesAnyMap"],[3,"CharRange"],[3,"SipHasher"],[3,"BuildHasherDefault"],[3,"Binary"],[3,"Octal"],[3,"Decimal"],[3,"LowerHex"],[3,"UpperHex"],[3,"Radix"],[3,"RadixFmt"],[3,"PadAdapter"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugInner"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Error"],[4,"FlagV1"],[3,"Arguments"],[3,"Formatter"],[8,"OverflowingOps"],[8,"Zero"],[8,"One"],[8,"Drop"],[8,"Fn"],[8,"FnMut"],[8,"FnOnce"],[8,"Clone"],[8,"PartialEq"],[8,"PartialOrd"],[8,"Ord"],[8,"AsRef"],[8,"AsMut"],[8,"Into"],[8,"From"],[8,"Default"],[8,"Iterator"],[8,"Extend"],[8,"IntoIterator"],[8,"DoubleEndedIterator"],[8,"ExactSizeIterator"],[8,"SliceExt"],[8,"Add"],[8,"Sub"],[8,"Mul"],[8,"Div"],[8,"Rem"],[8,"Neg"],[8,"Not"],[8,"BitAnd"],[8,"BitOr"],[8,"BitXor"],[8,"Shl"],[8,"Shr"],[8,"AddAssign"],[8,"SubAssign"],[8,"MulAssign"],[8,"DivAssign"],[8,"RemAssign"],[8,"BitAndAssign"],[8,"BitOrAssign"],[8,"BitXorAssign"],[8,"ShlAssign"],[8,"ShrAssign"],[8,"Index"],[8,"IndexMut"],[8,"Deref"],[8,"DerefMut"],[8,"Place"],[8,"Placer"],[8,"InPlace"],[8,"Boxed"],[8,"BoxPlace"],[8,"Borrow"],[8,"BorrowMut"],[8,"FixedSizeArray"],[8,"FromIterator"],[8,"Step"],[8,"Repr"],[8,"MutableByteVector"],[8,"Pattern"],[8,"Searcher"],[8,"ReverseSearcher"],[8,"FromStr"],[8,"Hash"],[8,"Hasher"],[8,"BuildHasher"],[8,"HashState"],[8,"Write"],[8,"Debug"],[8,"Display"],[8,"Octal"],[8,"Binary"],[8,"LowerHex"],[8,"UpperHex"],[8,"Pointer"],[8,"LowerExp"],[8,"UpperExp"]]};
searchIndex["matches"] = {"doc":"","items":[[14,"matches!","matches","",null,null],[14,"_tt_as_expr_hack!","","Work around &quot;error: unexpected token: `an interpolated tt`&quot;, whatever that means.",null,null]],"paths":[]};
searchIndex["log"] = {"doc":"A lightweight logging facade.","items":[[3,"LogRecord","log","The &quot;payload&quot; of a log message.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level\nfilter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has\nalready been called or if `set_logger_raw` has not been called yet.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The &quot;error&quot; level.",0,null],[13,"Warn","","The &quot;warn&quot; level.",0,null],[13,"Info","","The &quot;info&quot; level.",0,null],[13,"Debug","","The &quot;debug&quot; level.",0,null],[13,"Trace","","The &quot;trace&quot; level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging\nframework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"shutdown_logger","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[5,"shutdown_logger_raw","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be\nlogged.",2,{"inputs":[{"name":"log"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[10,"log","","Logs the `LogRecord`.",2,{"inputs":[{"name":"log"},{"name":"logrecord"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"loglevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevel"}}],[11,"eq","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"ordering"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"loglevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevelfilter"}}],[11,"fmt","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"loglevelfilter"}}],[11,"eq","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"ordering"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"args","","The message body.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"arguments"}}],[11,"metadata","","Metadata about the log directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"logmetadata"}}],[11,"location","","The location of the log directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"loglocation"}}],[11,"level","","The verbosity level of the message.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"str"}}],[11,"level","","The verbosity level of the message.",4,{"inputs":[{"name":"logmetadata"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",4,{"inputs":[{"name":"logmetadata"}],"output":{"name":"str"}}],[11,"fmt","","",5,{"inputs":[{"name":"loglocation"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"loglocation"}}],[11,"module_path","","The module path of the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"str"}}],[11,"file","","The source file containing the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"str"}}],[11,"line","","The line containing the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"u32"}}],[11,"fmt","","",6,{"inputs":[{"name":"maxloglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","Gets the current maximum log level filter.",6,{"inputs":[{"name":"maxloglevelfilter"}],"output":{"name":"loglevelfilter"}}],[11,"set","","Sets the maximum log level.",6,{"inputs":[{"name":"maxloglevelfilter"},{"name":"loglevelfilter"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"setloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"setloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",7,{"inputs":[{"name":"setloggererror"}],"output":{"name":"str"}}],[11,"fmt","","",8,{"inputs":[{"name":"shutdownloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"shutdownloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",8,{"inputs":[{"name":"shutdownloggererror"}],"output":{"name":"str"}}],[14,"log!","","The standard logging macro.",null,null],[14,"error!","","Logs a message at the error level.",null,null],[14,"warn!","","Logs a message at the warn level.",null,null],[14,"info!","","Logs a message at the info level.",null,null],[14,"debug!","","Logs a message at the debug level.",null,null],[14,"trace!","","Logs a message at the trace level.",null,null],[14,"log_enabled!","","Determines if a message logged at the specified level in that module will\nbe logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
initSearch(searchIndex);
